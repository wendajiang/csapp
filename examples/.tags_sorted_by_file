!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
CFLAGS	arch/Makefile	/^CFLAGS = -O1 -m64$/;"	m
ISADIR	arch/Makefile	/^ISADIR = ..\/..\/im\/labs\/archlab\/src\/misc$/;"	m
YAS	arch/Makefile	/^YAS = $(ISADIR)\/yas$/;"	m
YIS	arch/Makefile	/^YIS = $(ISADIR)\/yis$/;"	m
_poptest	arch/pp.s	/^_poptest:$/;"	l
_pushtest	arch/pp.s	/^_pushtest:$/;"	l
poptest	arch/pp.s	/^poptest:$/;"	l
pushtest	arch/pp.s	/^pushtest:$/;"	l
main	arch/pushpoptest.c	/^int main()$/;"	f
main	asm/010-main.c	/^int main() {$/;"	f
mult2	asm/010-main.c	/^long mult2(long a, long b) {$/;"	f
multstore	asm/010-mstore-annotate.c	/^void multstore(long x, long y, long *dest) {$/;"	f
multstore	asm/010-mstore-intel.c	/^void multstore(long x, long y, long *dest) {$/;"	f
multstore	asm/010-mstore.c	/^void multstore(long x, long y, long *dest) {$/;"	f
multstore	asm/010-mstore.s	/^multstore:$/;"	l
byte_move	asm/020-fragments.s	/^byte_move:$/;"	l
cmov	asm/020-fragments.s	/^cmov:$/;"	l
divq	asm/020-fragments.s	/^divq:$/;"	l
idivq	asm/020-fragments.s	/^idivq:$/;"	l
jump	asm/020-fragments.s	/^jump:$/;"	l
moveg	asm/020-fragments.s	/^moveg:$/;"	l
movmix	asm/020-fragments.s	/^movmix:$/;"	l
next	asm/020-fragments.s	/^next: 	$/;"	l
pc_trick	asm/020-fragments.s	/^pc_trick:$/;"	l
popq	asm/020-fragments.s	/^popq:$/;"	l
pushq	asm/020-fragments.s	/^pushq:$/;"	l
test	asm/020-fragments.s	/^test:$/;"	l
words	asm/020-fragments.s	/^words:$/;"	l
words_suffix	asm/020-fragments.s	/^words_suffix:$/;"	l
ans	asm/030-add-suffixes.s	/^ans:$/;"	l
extra	asm/030-add-suffixes.s	/^extra:$/;"	l
prob	asm/030-add-suffixes.s	/^prob:$/;"	l
exchange	asm/050-exchange.c	/^long exchange(long *xp, long y)$/;"	f
decode1	asm/060-decode1-ans.c	/^void decode1(long *xp, long *yp, long *zp) $/;"	f
scale	asm/070-leaq.c	/^long scale(long x, long y, long z) {$/;"	f
scale2	asm/070-leaq.c	/^long scale2(long x, long y, long z) {$/;"	f
shift_left4_rightn	asm/080-shift.c	/^long shift_left4_rightn(long x, long n)$/;"	f
arith	asm/090-arith.c	/^long arith(long x, long y, long z)$/;"	f
arith2	asm/090-arith.c	/^long arith2(long x, $/;"	f
int128_t	asm/100-muldiv.c	/^typedef __int128 int128_t;$/;"	t	file:
remdiv	asm/100-muldiv.c	/^void remdiv(long x, long y,$/;"	f
store_prod	asm/100-muldiv.c	/^void store_prod(int128_t *dest, int64_t x, int64_t y) {$/;"	f
store_uprod	asm/100-muldiv.c	/^void store_uprod(uint128_t *dest, uint64_t x, uint64_t y) {$/;"	f
uint128_t	asm/100-muldiv.c	/^typedef unsigned __int128 uint128_t;$/;"	t	file:
uremdiv	asm/100-muldiv.c	/^void uremdiv(unsigned long x, unsigned long y,$/;"	f
full_mult	asm/100-special-arith.c	/^void full_mult(int64_t x, int64_t y, int64_t *dest) {$/;"	f
COMP	asm/110-cc.c	/^#define COMP /;"	d	file:
TEST	asm/110-cc.c	/^#define TEST /;"	d	file:
bge	asm/110-cc.c	/^int bge(short a, short b) {$/;"	f
comp	asm/110-cc.c	/^int comp(data_t a, data_t b) {$/;"	f
data_t	asm/110-cc.c	/^typedef long data_t;$/;"	t	file:
gt	asm/110-cc.c	/^int gt(unsigned long a, unsigned long b) {$/;"	f
ilt	asm/110-cc.c	/^int ilt(int a, int b) {$/;"	f
lieq	asm/110-cc.c	/^int lieq(long a, long b) {$/;"	f
peq	asm/110-cc.c	/^int peq(char *a, char *b) {$/;"	f
test	asm/110-cc.c	/^int test(data_t a) {$/;"	f
test_cgt	asm/110-cc.c	/^int test_cgt(char a) {$/;"	f
test_ile	asm/110-cc.c	/^int test_ile(int a) {$/;"	f
test_lige	asm/110-cc.c	/^int test_lige(long a) {$/;"	f
test_uwz	asm/110-cc.c	/^int test_uwz(unsigned short a) {$/;"	f
test_wz	asm/110-cc.c	/^int test_wz(short a) {$/;"	f
ucle	asm/110-cc.c	/^int ucle(unsigned char a, unsigned char b) {$/;"	f
ulieq	asm/110-cc.c	/^int ulieq(unsigned long a, unsigned long b) {$/;"	f
x	asm/110-cc.c	/^int x, y;$/;"	v
y	asm/110-cc.c	/^int x, y;$/;"	v
loop	asm/120-branch.c	/^long loop(long x)$/;"	f
main	asm/120-branch.c	/^int main()$/;"	f
absdiff_asm	asm/130-abs-manual.s	/^absdiff_asm:$/;"	l
MAXLEN	asm/130-abs-measure.c	/^#define MAXLEN /;"	d	file:
ad	asm/130-abs-measure.c	/^long ad(long a, long b) {$/;"	f
addrun	asm/130-abs-measure.c	/^double addrun(size_t n) {$/;"	f
afun	asm/130-abs-measure.c	/^typedef long (*afun)(long, long);$/;"	t	file:
alt_a	asm/130-abs-measure.c	/^long alt_a[MAXLEN], alt_b[MAXLEN];$/;"	v
alt_b	asm/130-abs-measure.c	/^long alt_a[MAXLEN], alt_b[MAXLEN];$/;"	v
gsum	asm/130-abs-measure.c	/^volatile long gsum = 0;$/;"	v
hi_lo_a	asm/130-abs-measure.c	/^long hi_lo_a[MAXLEN], hi_lo_b[MAXLEN];$/;"	v
hi_lo_b	asm/130-abs-measure.c	/^long hi_lo_a[MAXLEN], hi_lo_b[MAXLEN];$/;"	v
main	asm/130-abs-measure.c	/^int main(int argc, char *argv[]) {$/;"	f
mulrun	asm/130-abs-measure.c	/^double mulrun(size_t n) {$/;"	f
ran_a	asm/130-abs-measure.c	/^long ran_a[MAXLEN], ran_b[MAXLEN];$/;"	v
ran_b	asm/130-abs-measure.c	/^long ran_a[MAXLEN], ran_b[MAXLEN];$/;"	v
run	asm/130-abs-measure.c	/^static double run(afun f, long *avals, long *bvals, size_t n) {$/;"	f	file:
setup	asm/130-abs-measure.c	/^static void setup() {$/;"	f	file:
absdiff_se	asm/130-abs.c	/^long absdiff_se(long x, long y)$/;"	f
ge_cnt	asm/130-abs.c	/^long ge_cnt = 0;$/;"	v
gotodiff_se	asm/130-abs.c	/^long gotodiff_se(long x, long y)$/;"	f
gotodiff_se_alt	asm/130-abs.c	/^long gotodiff_se_alt(long x, long y) {$/;"	f
lt_cnt	asm/130-abs.c	/^long lt_cnt = 0;$/;"	v
main	asm/130-abs.c	/^int main(int argc, char *argv[]) {$/;"	f
absdiff	asm/130-absdiff.c	/^long absdiff(long x, long y)$/;"	f
cmovdiff	asm/130-absdiff.c	/^long cmovdiff(long x, long y)$/;"	f
cond	asm/140-simple-if.c	/^void cond(long a, long *p)$/;"	f
cond2	asm/140-simple-if.c	/^void cond2(long a, long *p)$/;"	f
goto_cond	asm/140-simple-if.c	/^void goto_cond(long a, long *p) {$/;"	f
test	asm/150-if.c	/^long test(long x, long y, long z) {$/;"	f
fact_do	asm/160-fact.c	/^long fact_do(long n)$/;"	f
fact_do_goto	asm/160-fact.c	/^long fact_do_goto(long n)$/;"	f
fact_for	asm/160-fact.c	/^long fact_for(long n)$/;"	f
fact_for_gd_goto	asm/160-fact.c	/^long fact_for_gd_goto(long n)$/;"	f
fact_for_jm_goto	asm/160-fact.c	/^long fact_for_jm_goto(long n)$/;"	f
fact_for_while	asm/160-fact.c	/^long fact_for_while(long n)$/;"	f
fact_while	asm/160-fact.c	/^long fact_while(long n)$/;"	f
fact_while_gd_goto	asm/160-fact.c	/^long fact_while_gd_goto(long n)$/;"	f
fact_while_jm_goto	asm/160-fact.c	/^long fact_while_jm_goto(long n)$/;"	f
rfact	asm/160-fact.c	/^long rfact(long n)$/;"	f
dw_loop	asm/170-dw.c	/^long dw_loop(long x) {$/;"	f
loop_while	asm/180-while.c	/^long loop_while(long a, long b)$/;"	f
loop_while2	asm/180-while.c	/^long loop_while2(long a, long b)$/;"	f
count_p	asm/190-fun.c	/^long count_p(unsigned long x) {$/;"	f
count_q	asm/190-fun.c	/^long count_q(unsigned long x) {$/;"	f
count_r	asm/190-fun.c	/^long count_r(unsigned long x) {$/;"	f
fun_a	asm/190-fun.c	/^long fun_a(unsigned long x) {$/;"	f
fun_b	asm/190-fun.c	/^long fun_b(unsigned long x) {$/;"	f
fun_c	asm/190-fun.c	/^long fun_c(unsigned long x) {$/;"	f
test_count_p	asm/190-fun.c	/^long test_count_p(unsigned long x)$/;"	f
test_count_q	asm/190-fun.c	/^long test_count_q(unsigned long x)$/;"	f
test_count_r	asm/190-fun.c	/^long test_count_r(unsigned long x)$/;"	f
test_fun_a	asm/190-fun.c	/^long test_fun_a(unsigned long x)$/;"	f
test_fun_b	asm/190-fun.c	/^long test_fun_b(unsigned long x)$/;"	f
test_fun_c	asm/190-fun.c	/^long test_fun_c(unsigned long x)$/;"	f
loop1	asm/200-continue-eg.c	/^long loop1()$/;"	f
loop2	asm/200-continue-eg.c	/^long loop2()$/;"	f
loop32	asm/200-continue-eg.c	/^long loop32()$/;"	f
OP	asm/210-cond.c	/^#define OP /;"	d	file:
arith	asm/210-cond.c	/^long arith(long x) {$/;"	f
cdiv	asm/210-cond.c	/^long cdiv(long x, long y)$/;"	f
cdiv2	asm/210-cond.c	/^long cdiv2(long x, long y)$/;"	f
cmul	asm/210-cond.c	/^long cmul(long x, long y)$/;"	f
cmul2	asm/210-cond.c	/^long cmul2(long x, long y)$/;"	f
cread	asm/210-cond.c	/^long cread(long *xp) {$/;"	f
cread_invalid	asm/210-cond.c	/^long cread_invalid(long *xp) {$/;"	f
intabs	asm/210-cond.c	/^long intabs(long x)$/;"	f
lcount	asm/210-cond.c	/^long lcount = 0;$/;"	v
max	asm/210-cond.c	/^long max(long x, long y) {$/;"	f
se_max	asm/210-cond.c	/^long se_max(long x, long y) {$/;"	f
wa_max	asm/210-cond.c	/^long wa_max(long x, long y)$/;"	f
wm_max	asm/210-cond.c	/^long wm_max(long x, long y)$/;"	f
wm_max2	asm/210-cond.c	/^long wm_max2(long x, long y)$/;"	f
wm_max3	asm/210-cond.c	/^long wm_max3(long x, long y)$/;"	f
test	asm/220-if2.c	/^long test(long x, long y) {$/;"	f
switch_eg	asm/230-switch.c	/^void switch_eg(long x, long n,$/;"	f
switch_eg_impl	asm/230-switch.c	/^void switch_eg_impl(long x, long n,$/;"	f
switch2	asm/240-switch2.c	/^void switch2(long x, long *dest) {$/;"	f
main	asm/250-switcher.c	/^int main(int  argc, char *argv[]) {$/;"	f
switcher	asm/250-switcher.c	/^void switcher(long a, long b, long c, long *dest)$/;"	f
main	asm/250-switchprob2.c	/^int main(int  argc, char *argv[]) {$/;"	f
switcher	asm/250-switchprob2.c	/^long int switcher(long int a, long int b, long int c)$/;"	f
leaf	asm/260-fun.c	/^long leaf(long y) {$/;"	f
main	asm/260-fun.c	/^int main(int argc, char *argv[]) {$/;"	f
top	asm/260-fun.c	/^long top(long x) {$/;"	f
first	asm/261-fun2.c	/^long first(long x) {$/;"	f
last	asm/261-fun2.c	/^long last(long u, long v) {$/;"	f
main	asm/261-fun2.c	/^int main(int argc, char *argv[]) {$/;"	f
even	asm/262-recurse.c	/^long int even(long unsigned x) {$/;"	f
main	asm/262-recurse.c	/^int main(int argc, char *argv[]) {$/;"	f
odd	asm/262-recurse.c	/^long int odd(long unsigned x) {$/;"	f
parity	asm/262-recurse.c	/^long int parity(x) {$/;"	f
rexp	asm/262-recurse.c	/^long int rexp(long unsigned int x) {$/;"	f
rarray	asm/268-local.c	/^long int rarray(long int x) {$/;"	f
rarray2	asm/268-local.c	/^long int rarray2(long int x) {$/;"	f
rcsave	asm/268-local.c	/^long int rcsave(long int x) {$/;"	f
rlstore	asm/268-local.c	/^long int rlstore(long int *xp) {$/;"	f
rlvar	asm/268-local.c	/^long int rlvar(long int x) {$/;"	f
rvarray	asm/268-local.c	/^long int rvarray(long int x, long int n) {$/;"	f
efun_t	asm/270-euclid.c	/^typedef long (*efun_t)(long, long);$/;"	t	file:
euclid_rec1	asm/270-euclid.c	/^long euclid_rec1(long a, long b) {$/;"	f
euclid_store1	asm/270-euclid.c	/^long euclid_store1(long a, long b) {$/;"	f
euclid_store1_helper	asm/270-euclid.c	/^long euclid_store1_helper(long a, long b, long *dest) {$/;"	f
euclid_store2	asm/270-euclid.c	/^long euclid_store2(long a, long b) {$/;"	f
euclid_store2_helper	asm/270-euclid.c	/^long euclid_store2_helper(long args[2], long *dest) {$/;"	f
funs	asm/270-euclid.c	/^efun_t funs[] = {euclid_rec1, euclid_store1, euclid_store2, NULL};$/;"	v
main	asm/270-euclid.c	/^int main(int argc, char *argv[]) {$/;"	f
hworld	asm/270-hworld.c	/^void hworld() {$/;"	f
main	asm/270-hworld.c	/^int main() {$/;"	f
P	asm/280-calleesave.c	/^long P(long x, long y) $/;"	f
P2	asm/280-calleesave.c	/^long P2(long x, long y)$/;"	f
P	asm/285-calleesave2.c	/^long P(long x) {$/;"	f
proc	asm/290-registers.c	/^long proc(x, y, z)$/;"	f
t3	asm/290-registers.c	/^void t3(long *ap, long *bp, long *cp,$/;"	f
caller	asm/300-storesum.c	/^long caller() {$/;"	f
store_sum	asm/300-storesum.c	/^long *store_sum(long *xp, long y) {$/;"	f
caller	asm/300-swapadd.c	/^long caller() $/;"	f
swap_add	asm/300-swapadd.c	/^long swap_add(long *xp, long *yp)  $/;"	f
call_proc	asm/310-procregs.c	/^long call_proc()$/;"	f
proc	asm/310-procregs.c	/^void proc(long  a1, long  *a1p,$/;"	f
argprob	asm/320-procprobs.c	/^void argprob(char a,  short b,  int c,  long d,$/;"	f
procprob	asm/320-procprobs.c	/^int procprob(int a, short b, long *u, char *v) {$/;"	f
rfun	asm/340-recurse.c	/^long rfun(unsigned long x) {$/;"	f
A	asm/350-array.c	/^array4_3_t A;$/;"	v
B	asm/350-array.c	/^int *B[4] = {row0, row1, row2, row3};$/;"	v
N	asm/350-array.c	/^#define N /;"	d	file:
array4_3_t	asm/350-array.c	/^typedef row3_t array4_3_t[5];$/;"	t	file:
fix_ele	asm/350-array.c	/^int fix_ele(fix_matrix A, int i, int j) {$/;"	f
fix_matrix	asm/350-array.c	/^typedef int fix_matrix[N][N];$/;"	t	file:
fix_prod_ele	asm/350-array.c	/^int fix_prod_ele (fix_matrix A, fix_matrix B, long i, long k) {$/;"	f
fix_prod_ele_opt	asm/350-array.c	/^int fix_prod_ele_opt(fix_matrix A, fix_matrix B, long i, long k) {$/;"	f
fix_set_diag	asm/350-array.c	/^void fix_set_diag(fix_matrix A, int val) {$/;"	f
fix_set_diag_opt	asm/350-array.c	/^void fix_set_diag_opt(fix_matrix A, int val) {$/;"	f
get_value	asm/350-array.c	/^int get_value(array4_3_t A, long i, long j)$/;"	f
get_value2	asm/350-array.c	/^int get_value2(long *B[4], long i, long  j)$/;"	f
new_fix_matrix	asm/350-array.c	/^fix_matrix *new_fix_matrix(long n) {$/;"	f
new_var_matrix	asm/350-array.c	/^void *new_var_matrix(long n) {$/;"	f
pvar_ele	asm/350-array.c	/^int pvar_ele(long n, void *p, long i, long j) {$/;"	f
row0	asm/350-array.c	/^row3_t row0, row1, row2, row3;$/;"	v
row1	asm/350-array.c	/^row3_t row0, row1, row2, row3;$/;"	v
row2	asm/350-array.c	/^row3_t row0, row1, row2, row3;$/;"	v
row3	asm/350-array.c	/^row3_t row0, row1, row2, row3;$/;"	v
row3_t	asm/350-array.c	/^typedef int row3_t[3];$/;"	t	file:
var_ele	asm/350-array.c	/^int var_ele(long n, int A[n][n], long i, long j) {$/;"	f
var_prod_ele	asm/350-array.c	/^int var_prod_ele(long n, int A[n][n], int B[n][n], long i, long k) {$/;"	f
var_prod_ele_opt	asm/350-array.c	/^int var_prod_ele_opt(long n, int A[n][n], int B[n][n], long i, long k) {$/;"	f
M	asm/360-fixarray.c	/^#define M /;"	d	file:
N	asm/360-fixarray.c	/^#define N /;"	d	file:
P	asm/360-fixarray.c	/^long P[M][N];$/;"	v
Q	asm/360-fixarray.c	/^long Q[N][M];$/;"	v
sum_element	asm/360-fixarray.c	/^long sum_element(long i, long j) {$/;"	f
area	asm/370-rect.c	/^long area(struct rect *rp) {$/;"	f
color	asm/370-rect.c	/^    unsigned color;       \/* Coding of color                   *\/$/;"	m	struct:rect	file:
height	asm/370-rect.c	/^    unsigned long height; \/* Height (in pixels)                *\/$/;"	m	struct:rect	file:
llx	asm/370-rect.c	/^    long llx;         \/* X coordinate of lower-left corner *\/$/;"	m	struct:rect	file:
lly	asm/370-rect.c	/^    long lly;         \/* Y coordinate of lower-left corner *\/$/;"	m	struct:rect	file:
nothing	asm/370-rect.c	/^struct rect nothing() {$/;"	f
nothing2	asm/370-rect.c	/^struct rect nothing2() {$/;"	f
rect	asm/370-rect.c	/^struct rect {$/;"	s	file:
rotate_left	asm/370-rect.c	/^void rotate_left(struct rect *rp) {$/;"	f
width	asm/370-rect.c	/^    unsigned long width;  \/* Width (in pixels)                 *\/$/;"	m	struct:rect	file:
NODE	asm/380-structure.c	/^struct NODE {$/;"	s	file:
a	asm/380-structure.c	/^    int a[2];$/;"	m	struct:rec	file:
copy	asm/380-structure.c	/^void copy(struct rec *r)$/;"	f
data	asm/380-structure.c	/^    double data;$/;"	m	struct:NODE	file:
find_a	asm/380-structure.c	/^int *find_a(struct rec *r, int i)$/;"	f
i	asm/380-structure.c	/^    int i;$/;"	m	struct:rec	file:
j	asm/380-structure.c	/^    int j;$/;"	m	struct:rec	file:
j	asm/380-structure.c	/^int j, k;$/;"	v
k	asm/380-structure.c	/^int j, k;$/;"	v
left	asm/380-structure.c	/^    struct NODE *left;$/;"	m	struct:NODE	typeref:struct:NODE::NODE	file:
link_p	asm/380-structure.c	/^void link_p(struct rec *r)$/;"	f
p	asm/380-structure.c	/^    int *p;$/;"	m	struct:rec	file:
p	asm/380-structure.c	/^struct rec *p;$/;"	v	typeref:struct:rec
q	asm/380-structure.c	/^struct rec *q;$/;"	v	typeref:struct:rec
rec	asm/380-structure.c	/^struct rec {$/;"	s	file:
right	asm/380-structure.c	/^    struct NODE *right;$/;"	m	struct:NODE	typeref:struct:NODE::NODE	file:
set_a_ele	asm/380-structure.c	/^void set_a_ele(struct rec *r, int i, int val)$/;"	f
set_i	asm/380-structure.c	/^void set_i(struct rec *r, int val)$/;"	f
set_p	asm/380-structure.c	/^void set_p(struct rec *r, int *pval)$/;"	f
next	asm/390-struct2.c	/^    struct prob *next;$/;"	m	struct:prob	typeref:struct:prob::prob	file:
p	asm/390-struct2.c	/^    int *p;$/;"	m	struct:prob	file:
prob	asm/390-struct2.c	/^struct prob {$/;"	s	file:
s	asm/390-struct2.c	/^    } s;$/;"	m	struct:prob	typeref:struct:prob::__anon1	file:
sp_init	asm/390-struct2.c	/^void sp_init(struct prob *sp)$/;"	f
x	asm/390-struct2.c	/^        int x;$/;"	m	struct:prob::__anon1	file:
y	asm/390-struct2.c	/^        int y;$/;"	m	struct:prob::__anon1	file:
ELE	asm/400-struct-eg.c	/^struct ELE {$/;"	s	file:
fun	asm/400-struct-eg.c	/^long fun(struct ELE *ptr) {$/;"	f
p	asm/400-struct-eg.c	/^    struct ELE *p;$/;"	m	struct:ELE	typeref:struct:ELE::ELE	file:
v	asm/400-struct-eg.c	/^    long    v;$/;"	m	struct:ELE	file:
S3	asm/410-union.c	/^struct S3 {$/;"	s	file:
U3	asm/410-union.c	/^union U3 {$/;"	u	file:
c	asm/410-union.c	/^    char c;$/;"	m	struct:S3	file:
c	asm/410-union.c	/^    char c;$/;"	m	union:U3	file:
double2bits	asm/410-union.c	/^unsigned long double2bits(double d) {$/;"	f
double2ulong	asm/410-union.c	/^unsigned long double2ulong(double d) {$/;"	f
i	asm/410-union.c	/^    int i[2];$/;"	m	struct:S3	file:
i	asm/410-union.c	/^    int i[2];$/;"	m	union:U3	file:
iconvert	asm/410-union.c	/^double iconvert(long x) {$/;"	f
uconvert	asm/410-union.c	/^double uconvert(unsigned long u) {$/;"	f
ulong2double	asm/410-union.c	/^double ulong2double(unsigned long u)$/;"	f
uu2double	asm/410-union.c	/^double uu2double(unsigned word0, unsigned word1) $/;"	f
v	asm/410-union.c	/^    double v;$/;"	m	struct:S3	file:
v	asm/410-union.c	/^    double v;$/;"	m	union:U3	file:
N_INTERNAL	asm/420-node.c	/^typedef enum { N_LEAF, N_INTERNAL } nodetype_t;$/;"	e	enum:__anon3	file:
N_LEAF	asm/420-node.c	/^typedef enum { N_LEAF, N_INTERNAL } nodetype_t;$/;"	e	enum:__anon3	file:
data	asm/420-node.c	/^	double data[2]; $/;"	m	union:node_t::__anon4	file:
data	asm/420-node.c	/^    double data[2]; $/;"	m	union:node_u	file:
data	asm/420-node.c	/^    double data[2];$/;"	m	struct:node_s	file:
dothings	asm/420-node.c	/^void dothings() {$/;"	f
info	asm/420-node.c	/^    } info; $/;"	m	struct:node_t	typeref:union:node_t::__anon4	file:
internal	asm/420-node.c	/^	} internal; $/;"	m	union:node_t::__anon4	typeref:struct:node_t::__anon4::__anon5	file:
internal	asm/420-node.c	/^    } internal; $/;"	m	union:node_u	typeref:struct:node_u::__anon2	file:
left	asm/420-node.c	/^	    struct node_t *left; $/;"	m	struct:node_t::__anon4::__anon5	typeref:struct:node_t::__anon4::__anon5::node_t	file:
left	asm/420-node.c	/^	union node_u *left; $/;"	m	struct:node_u::__anon2	typeref:union:node_u::__anon2::node_u	file:
left	asm/420-node.c	/^    struct node_s *left;$/;"	m	struct:node_s	typeref:struct:node_s::node_s	file:
node_s	asm/420-node.c	/^struct node_s {$/;"	s	file:
node_t	asm/420-node.c	/^struct node_t { $/;"	s	file:
node_u	asm/420-node.c	/^union node_u { $/;"	u	file:
nodetype_t	asm/420-node.c	/^typedef enum { N_LEAF, N_INTERNAL } nodetype_t;$/;"	t	typeref:enum:__anon3	file:
right	asm/420-node.c	/^	    struct node_t *right; $/;"	m	struct:node_t::__anon4::__anon5	typeref:struct:node_t::__anon4::__anon5::node_t	file:
right	asm/420-node.c	/^	union node_u *right; $/;"	m	struct:node_u::__anon2	typeref:union:node_u::__anon2::node_u	file:
right	asm/420-node.c	/^    struct node_s *right;$/;"	m	struct:node_s	typeref:struct:node_s::node_s	file:
type	asm/420-node.c	/^    nodetype_t type;$/;"	m	struct:node_t	file:
GETTER	asm/430-struct-union.c	/^#define GETTER(/;"	d	file:
a	asm/430-struct-union.c	/^	int a[2];$/;"	m	struct:__anon6::__anon8	file:
p	asm/430-struct-union.c	/^	char  *p;$/;"	m	struct:__anon6::__anon8	file:
t1	asm/430-struct-union.c	/^    } t1;$/;"	m	union:__anon6	typeref:struct:__anon6::__anon7	file:
t2	asm/430-struct-union.c	/^    } t2;$/;"	m	union:__anon6	typeref:struct:__anon6::__anon8	file:
u	asm/430-struct-union.c	/^	long   u;$/;"	m	struct:__anon6::__anon7	file:
u_type	asm/430-struct-union.c	/^} u_type;$/;"	t	typeref:union:__anon6	file:
v	asm/430-struct-union.c	/^	short  v;$/;"	m	struct:__anon6::__anon7	file:
w	asm/430-struct-union.c	/^	char   w;$/;"	m	struct:__anon6::__anon7	file:
S1	asm/440-align.c	/^struct S1 { $/;"	s	file:
S2	asm/440-align.c	/^struct S2 { $/;"	s	file:
a	asm/440-align.c	/^    char     *a;$/;"	m	struct:__anon10	file:
a	asm/440-align.c	/^    char     *a;$/;"	m	struct:__anon9	file:
b	asm/440-align.c	/^    short     b;$/;"	m	struct:__anon10	file:
b	asm/440-align.c	/^    short     b;$/;"	m	struct:__anon9	file:
bsize	asm/440-align.c	/^size_t bsize() {$/;"	f
c	asm/440-align.c	/^    char c; $/;"	m	struct:S1	file:
c	asm/440-align.c	/^    char c; $/;"	m	struct:S2	file:
c	asm/440-align.c	/^    double    c;$/;"	m	struct:__anon10	file:
c	asm/440-align.c	/^    double    c;$/;"	m	struct:__anon9	file:
d	asm/440-align.c	/^    char      d;$/;"	m	struct:__anon10	file:
d	asm/440-align.c	/^    char      d;$/;"	m	struct:__anon9	file:
e	asm/440-align.c	/^    float     e;$/;"	m	struct:__anon10	file:
e	asm/440-align.c	/^    float     e;$/;"	m	struct:__anon9	file:
f	asm/440-align.c	/^    char      f;$/;"	m	struct:__anon10	file:
f	asm/440-align.c	/^    char      f;$/;"	m	struct:__anon9	file:
g	asm/440-align.c	/^    long      g;$/;"	m	struct:__anon10	file:
g	asm/440-align.c	/^    long      g;$/;"	m	struct:__anon9	file:
h	asm/440-align.c	/^    int       h;$/;"	m	struct:__anon10	file:
h	asm/440-align.c	/^    int       h;$/;"	m	struct:__anon9	file:
i	asm/440-align.c	/^    int  i; $/;"	m	struct:S1	file:
i	asm/440-align.c	/^    int  i; $/;"	m	struct:S2	file:
j	asm/440-align.c	/^    int  j; $/;"	m	struct:S1	file:
j	asm/440-align.c	/^    int  j; $/;"	m	struct:S2	file:
lsize	asm/440-align.c	/^size_t lsize() {$/;"	f
rec	asm/440-align.c	/^} rec;$/;"	v	typeref:struct:__anon10
rec_a	asm/440-align.c	/^} rec_a;$/;"	v	typeref:struct:__anon9
lframe	asm/445-frame.c	/^long lframe(long n, long idx)  {$/;"	f
main	asm/445-frame.c	/^int main() {$/;"	f
vframe	asm/445-frame.c	/^long vframe(long n, long idx, long *q)  {$/;"	f
BUFSIZE	asm/450-bufdemo.c	/^#define BUFSIZE /;"	d	file:
echo	asm/450-bufdemo.c	/^void echo()$/;"	f
gets	asm/450-bufdemo.c	/^char *gets(char *s)$/;"	f
good_echo	asm/450-bufdemo.c	/^void good_echo() $/;"	f
main	asm/450-bufdemo.c	/^int main(int argc, char *argv[])$/;"	f
echo	asm/450-bufdemo.s	/^echo:$/;"	l
gets	asm/450-bufdemo.s	/^gets:$/;"	l
good_echo	asm/450-bufdemo.s	/^good_echo:$/;"	l
main	asm/450-bufdemo.s	/^main:$/;"	l
get_line	asm/460-bufovf.c	/^char *get_line()$/;"	f
gets	asm/460-bufovf.c	/^char *gets(char *s)$/;"	f
main	asm/460-bufovf.c	/^int main(int argc, char *argv[])$/;"	f
my_strlen	asm/460-bufovf.c	/^size_t my_strlen(const char *s)$/;"	f
strcpy	asm/460-bufovf.c	/^char *strcpy(char *dest, const char *src)$/;"	f
strlen	asm/460-bufovf.c	/^#define strlen(/;"	d	file:
get_line	asm/460-bufovf.s	/^get_line:$/;"	l
gets	asm/460-bufovf.s	/^gets:$/;"	l
main	asm/460-bufovf.s	/^main:$/;"	l
my_strlen	asm/460-bufovf.s	/^my_strlen:$/;"	l
strcpy	asm/460-bufovf.s	/^strcpy:$/;"	l
main	asm/470-scheck.c	/^int main() {$/;"	f
intlen	asm/480-charbuf.c	/^int intlen(long x) {$/;"	f
intlen2	asm/480-charbuf.c	/^int intlen2(int x) {$/;"	f
iptoa	asm/480-charbuf.c	/^void iptoa(char *s, long *p) {$/;"	f
itoa	asm/480-charbuf.c	/^void itoa(char *s, int x)$/;"	f
len	asm/480-charbuf.c	/^int len(char *s) {$/;"	f
storeint	asm/480-charbuf.c	/^void storeint(int val, int *dest)$/;"	f
intlen	asm/480-charbuf.s	/^intlen:$/;"	l
intlen2	asm/480-charbuf.s	/^intlen2:$/;"	l
iptoa	asm/480-charbuf.s	/^iptoa:$/;"	l
itoa	asm/480-charbuf.s	/^itoa:$/;"	l
len	asm/480-charbuf.s	/^len:$/;"	l
storeint	asm/480-charbuf.s	/^storeint:$/;"	l
d2f	asm/500-floatcvt.c	/^float d2f(double d) {$/;"	f
f2d	asm/500-floatcvt.c	/^double f2d(float f) {$/;"	f
fcvt	asm/500-floatcvt.c	/^double fcvt(int i, float *fp, double *dp, long *lp)$/;"	f
fcvt2	asm/500-floatcvt.c	/^double fcvt2(int *ip, float *fp, double *dp, long l)$/;"	f
float_mov	asm/500-floatcvt.c	/^float float_mov(float v1, float *src, float *dst) {$/;"	f
mf2md	asm/500-floatcvt.c	/^void mf2md(float *src, double *dest) {$/;"	f
val1	asm/500-floatcvt.c	/^#define val1 /;"	d	file:
val2	asm/500-floatcvt.c	/^#define val2 /;"	d	file:
val3	asm/500-floatcvt.c	/^#define val3 /;"	d	file:
val4	asm/500-floatcvt.c	/^#define val4 /;"	d	file:
cvt	asm/510-cvt.c	/^dest_t cvt(src_t x)$/;"	f
cvt_d2si	asm/510-cvt.c	/^int cvt_d2si(double x)$/;"	f
cvt_f2d	asm/510-cvt.c	/^double cvt_f2d(float x)$/;"	f
cvt_f2sl	asm/510-cvt.c	/^long cvt_f2sl(float x)$/;"	f
cvt_sc2sl	asm/510-cvt.c	/^long cvt_sc2sl(char x)$/;"	f
cvt_si2sl	asm/510-cvt.c	/^long cvt_si2sl(int x)$/;"	f
cvt_sl2d	asm/510-cvt.c	/^double cvt_sl2d(long x)$/;"	f
cvt_sl2f	asm/510-cvt.c	/^float cvt_sl2f(long x)$/;"	f
cvt_sl2si	asm/510-cvt.c	/^int cvt_sl2si(long x)$/;"	f
cvt_sl2sl	asm/510-cvt.c	/^long cvt_sl2sl(long x)$/;"	f
cvt_uc2ul	asm/510-cvt.c	/^unsigned long cvt_uc2ul(unsigned char x)$/;"	f
cvt_ui2ul	asm/510-cvt.c	/^unsigned long cvt_ui2ul(unsigned x)$/;"	f
cvt_ul2ui	asm/510-cvt.c	/^unsigned cvt_ul2ui(unsigned long x)$/;"	f
dest_t	asm/510-cvt.c	/^typedef long dest_t;$/;"	t	file:
src_t	asm/510-cvt.c	/^typedef int src_t;$/;"	t	file:
NEG	asm/520-floatfunct.c	/^typedef enum {NEG, ZERO, POS, OTHER} range_t;$/;"	e	enum:__anon11	file:
OTHER	asm/520-floatfunct.c	/^typedef enum {NEG, ZERO, POS, OTHER} range_t;$/;"	e	enum:__anon11	file:
POS	asm/520-floatfunct.c	/^typedef enum {NEG, ZERO, POS, OTHER} range_t;$/;"	e	enum:__anon11	file:
ZERO	asm/520-floatfunct.c	/^typedef enum {NEG, ZERO, POS, OTHER} range_t;$/;"	e	enum:__anon11	file:
copy_vals	asm/520-floatfunct.c	/^void copy_vals(int i,   long l,   float f,   double d,$/;"	f
dval	asm/520-floatfunct.c	/^    double dval;$/;"	m	struct:__anon12	file:
find_range	asm/520-floatfunct.c	/^range_t find_range(float x)$/;"	f
funct	asm/520-floatfunct.c	/^double funct(double a, float x, double b, int i)$/;"	f
fval	asm/520-floatfunct.c	/^    float fval;$/;"	m	struct:__anon12	file:
ival	asm/520-floatfunct.c	/^    int ival;$/;"	m	struct:__anon12	file:
lval	asm/520-floatfunct.c	/^    long lval;$/;"	m	struct:__anon12	file:
range_t	asm/520-floatfunct.c	/^typedef enum {NEG, ZERO, POS, OTHER} range_t;$/;"	t	typeref:enum:__anon11	file:
sd	asm/520-floatfunct.c	/^tstruct_t ss1, ss2, si, sl, sf, sd;$/;"	v
sf	asm/520-floatfunct.c	/^tstruct_t ss1, ss2, si, sl, sf, sd;$/;"	v
si	asm/520-floatfunct.c	/^tstruct_t ss1, ss2, si, sl, sf, sd;$/;"	v
sl	asm/520-floatfunct.c	/^tstruct_t ss1, ss2, si, sl, sf, sd;$/;"	v
ss1	asm/520-floatfunct.c	/^tstruct_t ss1, ss2, si, sl, sf, sd;$/;"	v
ss2	asm/520-floatfunct.c	/^tstruct_t ss1, ss2, si, sl, sf, sd;$/;"	v
tstruct_t	asm/520-floatfunct.c	/^} tstruct_t;$/;"	t	typeref:struct:__anon12	file:
xfer	asm/520-floatfunct.c	/^void xfer()$/;"	f
EXPR	asm/530-float-funs.c	/^#define EXPR(/;"	d	file:
EXPR2	asm/530-float-funs.c	/^#define EXPR2(/;"	d	file:
EXPR3	asm/530-float-funs.c	/^#define EXPR3(/;"	d	file:
arg1_t	asm/530-float-funs.c	/^typedef int arg1_t;$/;"	t	file:
arg2_t	asm/530-float-funs.c	/^typedef float arg2_t;$/;"	t	file:
arg3_t	asm/530-float-funs.c	/^typedef long arg3_t;$/;"	t	file:
arg4_t	asm/530-float-funs.c	/^typedef double arg4_t;$/;"	t	file:
d_max	asm/530-float-funs.c	/^double d_max(double x, double y) {$/;"	f
dz	asm/530-float-funs.c	/^double dz(double *dp) {$/;"	f
f_max	asm/530-float-funs.c	/^float f_max(float x, float y) {$/;"	f
funct1	asm/530-float-funs.c	/^double funct1(arg1_t p, arg2_t q, arg3_t r, arg4_t s) $/;"	f
funct2	asm/530-float-funs.c	/^double funct2(double w, int x, float y, long z) $/;"	f
funct3	asm/530-float-funs.c	/^double funct3(int *ap, double b, long c, float *dp) {$/;"	f
simplefun	asm/530-float-funs.c	/^double simplefun(double x) {$/;"	f
simplefun2	asm/530-float-funs.c	/^double simplefun2(double x) {$/;"	f
simplefun3	asm/530-float-funs.c	/^double simplefun3(double x) {$/;"	f
area	asm/540-floatconst.c	/^double area(double radius)$/;"	f
cel2fahr	asm/540-floatconst.c	/^double cel2fahr(double temp)$/;"	f
circum	asm/540-floatconst.c	/^double circum(double radius)$/;"	f
decode	asm/540-floatconst.c	/^void decode(unsigned lo, unsigned hi)$/;"	f
main	asm/540-floatconst.c	/^int main(int argc, char *argv[])$/;"	f
CC	asm/Makefile	/^CC = gcc$/;"	m
CFLAGS	asm/Makefile	/^CFLAGS = -Wall$/;"	m
CINC	asm/Makefile	/^CINC = -I$(CSAPP2DIR)\/include$/;"	m
CSAPP2DIR	asm/Makefile	/^CSAPP2DIR=..$/;"	m
CSAPPLIB32	asm/Makefile	/^CSAPPLIB32 = $(CSAPP2DIR)\/lib\/libcsapp32.a$/;"	m
CSAPPLIB64	asm/Makefile	/^CSAPPLIB64 = $(CSAPP2DIR)\/lib\/libcsapp64.a$/;"	m
EXTRACT	asm/Makefile	/^EXTRACT = .\/exbytes.pl$/;"	m
F32	asm/Makefile	/^F32 =-m32$/;"	m
F32c	asm/Makefile	/^F32c = -m32 -march=i686 -msse2 -mfpmath=sse$/;"	m
F64	asm/Makefile	/^F64 =-m64$/;"	m
FNOSP	asm/Makefile	/^FNOSP = -fno-stack-protector$/;"	m
FPOINTER	asm/Makefile	/^FPOINTER = -fno-omit-frame-pointer$/;"	m
MFLAGS	asm/Makefile	/^MFLAGS = -mavx2 -mfma$/;"	m
OPT1	asm/Makefile	/^OPT1 = -O1$/;"	m
OPT2	asm/Makefile	/^OPT2 = -O2$/;"	m
OPTg	asm/Makefile	/^OPTg = -Og$/;"	m
PROGS	asm/Makefile	/^PROGS = hworld bufdemo-sp bufdemo-nosp bufovf-sp bufovf-nosp scheck64 $/;"	m
big	asm/align128.c	/^    uint128_t big;$/;"	m	struct:__anon13	file:
main	asm/align128.c	/^int main() {$/;"	f
small	asm/align128.c	/^    int small;$/;"	m	struct:__anon13	file:
test_struct	asm/align128.c	/^} test_struct;$/;"	t	typeref:struct:__anon13	file:
uint128_t	asm/align128.c	/^typedef unsigned __int128 uint128_t;$/;"	t	file:
print_rev	asm/alloca-eg.c	/^void print_rev(char *s) {$/;"	f
BUFSIZE	asm/bufdemo.c	/^#define BUFSIZE /;"	d	file:
echo	asm/bufdemo.c	/^void echo()$/;"	f
gets	asm/bufdemo.c	/^char *gets(char *s)$/;"	f
good_echo	asm/bufdemo.c	/^void good_echo() $/;"	f
main	asm/bufdemo.c	/^int main(int argc, char *argv[])$/;"	f
BUILD	asm/cast-problem.c	/^#define BUILD(/;"	d	file:
cvt	asm/cast-problem.c	/^void cvt(src_t *sp, dest_t *dp)$/;"	f
dest_t	asm/cast-problem.c	/^typedef long dest_t;$/;"	t	file:
lint	asm/cast-problem.c	/^typedef long int lint;$/;"	t	file:
lunsigned	asm/cast-problem.c	/^typedef long unsigned lunsigned;$/;"	t	file:
src_t	asm/cast-problem.c	/^typedef int src_t;$/;"	t	file:
uchar	asm/cast-problem.c	/^typedef unsigned char uchar;$/;"	t	file:
minus_one	asm/dsize.c	/^long int minus_one() {$/;"	f
plus_one	asm/dsize.c	/^long int plus_one() {$/;"	f
tmax	asm/dsize.c	/^long int tmax() {$/;"	f
reverse_string_alloca	asm/dynstack.c	/^void reverse_string_alloca(char *s) {$/;"	f
reverse_string_array	asm/dynstack.c	/^void reverse_string_array(char *s) {$/;"	f
usage	asm/exbytes.pl	/^sub usage $/;"	s
print_rev_aa	asm/framepointer.c	/^void print_rev_aa(char *s) {$/;"	f
print_rev_da	asm/framepointer.c	/^void print_rev_da(char *s) {$/;"	f
print_revn_aa	asm/framepointer.c	/^void print_revn_aa(char *s, size_t n) {$/;"	f
print_revn_da	asm/framepointer.c	/^void print_revn_da(char *s, size_t n) {$/;"	f
hworld	asm/hworld.c	/^void hworld() {$/;"	f
main	asm/hworld.c	/^int main() {$/;"	f
array_to_list_addtail	asm/linked-list.O1.s	/^array_to_list_addtail:$/;"	l
array_to_list_recurse	asm/linked-list.O1.s	/^array_to_list_recurse:$/;"	l
array_to_list_reverse	asm/linked-list.O1.s	/^array_to_list_reverse:$/;"	l
incr_ele	asm/linked-list.O1.s	/^incr_ele:$/;"	l
incr_list	asm/linked-list.O1.s	/^incr_list:$/;"	l
new_list_ele	asm/linked-list.O1.s	/^new_list_ele:$/;"	l
array_to_list_addtail	asm/linked-list.Og.s	/^array_to_list_addtail:$/;"	l
array_to_list_recurse	asm/linked-list.Og.s	/^array_to_list_recurse:$/;"	l
array_to_list_reverse	asm/linked-list.Og.s	/^array_to_list_reverse:$/;"	l
incr_ele	asm/linked-list.Og.s	/^incr_ele:$/;"	l
incr_list	asm/linked-list.Og.s	/^incr_list:$/;"	l
new_list_ele	asm/linked-list.Og.s	/^new_list_ele:$/;"	l
ELE	asm/linked-list.c	/^struct ELE {$/;"	s	file:
array_to_list_addtail	asm/linked-list.c	/^list_ptr array_to_list_addtail(int *a, size_t n) {$/;"	f
array_to_list_recurse	asm/linked-list.c	/^list_ptr array_to_list_recurse(int *a, size_t n) {$/;"	f
array_to_list_reverse	asm/linked-list.c	/^list_ptr array_to_list_reverse(int *a, size_t n) {$/;"	f
incr_ele	asm/linked-list.c	/^void incr_ele(long *p) {$/;"	f
incr_list	asm/linked-list.c	/^void incr_list(list_ptr ls) {$/;"	f
list_ele_t	asm/linked-list.c	/^typedef struct ELE list_ele_t, *list_ptr;$/;"	t	typeref:struct:ELE	file:
list_ptr	asm/linked-list.c	/^typedef struct ELE list_ele_t, *list_ptr;$/;"	t	typeref:struct:	file:
new_list_ele	asm/linked-list.c	/^list_ptr new_list_ele(long value) {$/;"	f
next	asm/linked-list.c	/^    list_ptr next;$/;"	m	struct:ELE	file:
value	asm/linked-list.c	/^    long value;$/;"	m	struct:ELE	file:
array_to_list_addtail	asm/linked-list.s	/^array_to_list_addtail:$/;"	l
array_to_list_recurse	asm/linked-list.s	/^array_to_list_recurse:$/;"	l
array_to_list_reverse	asm/linked-list.s	/^array_to_list_reverse:$/;"	l
incr_ele	asm/linked-list.s	/^incr_ele:$/;"	l
incr_list	asm/linked-list.s	/^incr_list:$/;"	l
new_list_ele	asm/linked-list.s	/^new_list_ele:$/;"	l
diff	asm/reftest.c	/^int diff(int *E, unsigned int i) {$/;"	f
proc	asm/reftest.c	/^int proc(int *E, long int i) {$/;"	f
b2qfun	asm/test-64-framework.c	/^typedef long int (*b2qfun)(unsigned char b);$/;"	t	file:
main	asm/test-64-framework.c	/^int main(int argc, char *argv[]) {$/;"	f
show_val	asm/test-64-framework.c	/^void show_val(int x) {$/;"	f
addb	asm/test-64-funs.s	/^addb:$/;"	l
addl	asm/test-64-funs.s	/^addl:$/;"	l
movm1	asm/test-64-funs.s	/^movm1:$/;"	l
movmi	asm/test-64-funs.s	/^movmi:$/;"	l
movsbl	asm/test-64-funs.s	/^movsbl:$/;"	l
movzbl	asm/test-64-funs.s	/^movzbl:$/;"	l
movsbl	asm/test_64-funs.s	/^movsbl:$/;"	l
movzbl	asm/test_64-funs.s	/^movzbl:$/;"	l
afun	asm/w100-ia32.c	/^int afun(int t) {$/;"	f
call_fun	asm/w100-ia32.c	/^int call_fun(int x, int y) {$/;"	f
fun	asm/w100-ia32.c	/^int fun(int a, int *bp) {$/;"	f
call_proc	asm/w110-procreg-ia32.c	/^long call_proc()$/;"	f
proc	asm/w110-procreg-ia32.c	/^void proc(int   a2, int   *a2p,$/;"	f
call_proc	asm/w110-procreg.c	/^int call_proc()$/;"	f
proc	asm/w110-procreg.c	/^void proc(int   a2, int   *a2p,$/;"	f
main	asm/w200-okmul.c	/^int main(int argc, char *argv[]) {$/;"	f
tmult_ok1	asm/w200-okmul.c	/^int tmult_ok1(long x, long y, long *dest) $/;"	f
tmult_ok2	asm/w200-okmul.c	/^int tmult_ok2(long x, long y, long *dest) $/;"	f
tmult_ok3	asm/w200-okmul.c	/^int tmult_ok3(long x, long y, long *dest) $/;"	f
tmult_ok4	asm/w200-okmul.c	/^int tmult_ok4(long x, long y, long *dest) $/;"	f
tmult_sat	asm/w200-okmul.c	/^long tmult_sat(long x, long y) {$/;"	f
umult_ok	asm/w200-okmul.c	/^int umult_ok(unsigned long x, unsigned long y, unsigned long *dest) $/;"	f
tmult_ok_asm	asm/w210-okmul-asm-proto.c	/^int tmult_ok_asm(long x, long y, long *dest) {$/;"	f
tmult_sat	asm/w210-okmul-asm-proto.c	/^long tmult_sat(long x, long y) {$/;"	f
umult_ok_asm	asm/w210-okmul-asm-proto.c	/^int umult_ok_asm(unsigned long x, unsigned long y, unsigned long *dest) {$/;"	f
tmult_ok_asm	asm/w220-okmul-asm64.s	/^tmult_ok_asm:$/;"	l
umult_ok_asm	asm/w220-okmul-asm64.s	/^umult_ok_asm:$/;"	l
main	asm/w230-parity.c	/^int main(int argc, char *argv[]) {$/;"	f
nonzero	asm/w230-parity.c	/^int nonzero(unsigned long x) {$/;"	f
odd_parity	asm/w230-parity.c	/^int odd_parity(unsigned long x) {$/;"	f
odd_parity_ref	asm/w230-parity.c	/^int odd_parity_ref(unsigned long x) {$/;"	f
INCR_CNT	asm/w240-cnt.c	/^#define INCR_CNT /;"	d	file:
bad_incr	asm/w240-cnt.c	/^void bad_incr(int *ptr)$/;"	f
cnt	asm/w240-cnt.c	/^volatile int cnt = 0; \/* Counter *\/$/;"	v
inames	asm/w240-cnt.c	/^char *inames[INCR_CNT] = {"bad", "lock", "mutex", "sem"};$/;"	v
incr_fun	asm/w240-cnt.c	/^incr_t incr_fun;$/;"	v
incr_t	asm/w240-cnt.c	/^typedef void (*incr_t)(int *);$/;"	t	file:
incrs	asm/w240-cnt.c	/^incr_t incrs[INCR_CNT] = {bad_incr, lock_incr, mutex_incr, sem_incr};$/;"	v
lock_incr	asm/w240-cnt.c	/^void lock_incr(int *ptr)$/;"	f
main	asm/w240-cnt.c	/^int main(int argc, char **argv) $/;"	f
mutex	asm/w240-cnt.c	/^pthread_mutex_t mutex;$/;"	v
mutex_incr	asm/w240-cnt.c	/^void mutex_incr(int *ptr)$/;"	f
run_test	asm/w240-cnt.c	/^void run_test(int niters, int nthreads, int incr_idx)$/;"	f
sem	asm/w240-cnt.c	/^sem_t sem;           \/* Semaphore that protects counter *\/$/;"	v
sem_incr	asm/w240-cnt.c	/^void sem_incr(int *ptr)$/;"	f
thread	asm/w240-cnt.c	/^void *thread(void *vargp) $/;"	f
main	asm/w250-umult-full.c	/^int main(int argc, char *argv[]) {$/;"	f
umult_full	asm/w250-umult-full.c	/^void umult_full(unsigned long x, unsigned long y, unsigned long *dest) $/;"	f
cmult	asm/w260-float.c	/^double cmult(double x, double y) {$/;"	f
dmin	asm/w260-float.c	/^double dmin(double x, double y) {$/;"	f
dsqrt	asm/w260-float.c	/^double dsqrt(double x) {$/;"	f
mult	asm/w260-float.c	/^double mult(double x, double y) {$/;"	f
main	asm/w260-parity.c	/^int main(int argc, char *argv[]) {$/;"	f
nonzero	asm/w260-parity.c	/^int nonzero(unsigned long x) {$/;"	f
odd_parity	asm/w260-parity.c	/^int odd_parity(unsigned long x) {$/;"	f
odd_parity_ref	asm/w260-parity.c	/^int odd_parity_ref(unsigned long x) {$/;"	f
amult	asm/w270-float.c	/^double amult(double x, double y) {$/;"	f
dmin	asm/w270-float.c	/^double dmin(double x, double y) {$/;"	f
dsqrt	asm/w270-float.c	/^double dsqrt(double x) {$/;"	f
mult	asm/w270-float.c	/^double mult(double x, double y) {$/;"	f
CFLAGS	conc/Makefile	/^CFLAGS = -Og -Wall -I $(CSAPP_INC) -I .$/;"	m
COUNTERARGS	conc/Makefile	/^COUNTERARGS = -O1 -Wall -I $(CSAPP_INC)$/;"	m
CSAPP_INC	conc/Makefile	/^CSAPP_INC = ..\/include$/;"	m
CSAPP_SRC	conc/Makefile	/^CSAPP_SRC = ..\/src$/;"	m
LDLIBS	conc/Makefile	/^LDLIBS = -lpthread -lm$/;"	m
PROGS	conc/Makefile	/^PROGS =	hello\\$/;"	m
psuCC	conc/Makefile	/^psuCC = gcc$/;"	m
cnt	conc/badcnt.c	/^volatile long cnt = 0; \/* Counter *\/$/;"	v
main	conc/badcnt.c	/^int main(int argc, char **argv) $/;"	f
thread	conc/badcnt.c	/^void *thread(void *vargp) $/;"	f
cnt	conc/badcnt.s	/^cnt:$/;"	l
main	conc/badcnt.s	/^main:$/;"	l
thread	conc/badcnt.s	/^thread:$/;"	l
MAXSTR	conc/ctime_ts.c	/^#define MAXSTR /;"	d	file:
ctime_ts	conc/ctime_ts.c	/^char *ctime_ts(const time_t *timep, char *privatep)$/;"	f
init_ctime_ts	conc/ctime_ts.c	/^static void init_ctime_ts(void)$/;"	f	file:
main	conc/ctime_ts.c	/^int main()$/;"	f
mutex	conc/ctime_ts.c	/^static sem_t mutex; \/* protects calls to ctime *\/$/;"	v	file:
echo	conc/echo.c	/^void echo(int connfd) $/;"	f
byte_cnt	conc/echo_cnt.c	/^static int byte_cnt;  \/* Byte counter *\/$/;"	v	file:
echo_cnt	conc/echo_cnt.c	/^void echo_cnt(int connfd) $/;"	f
init_echo_cnt	conc/echo_cnt.c	/^static void init_echo_cnt(void)$/;"	f	file:
mutex	conc/echo_cnt.c	/^static sem_t mutex;   \/* and the mutex that protects it *\/$/;"	v	file:
main	conc/echoclient.c	/^int main(int argc, char **argv) $/;"	f
main	conc/echoserverp.c	/^int main(int argc, char **argv) $/;"	f
sigchld_handler	conc/echoserverp.c	/^void sigchld_handler(int sig) \/\/line:conc:echoserverp:handlerstart$/;"	f
add_client	conc/echoservers.c	/^void add_client(int connfd, pool *p) $/;"	f
byte_cnt	conc/echoservers.c	/^int byte_cnt = 0; \/* Counts total bytes received by server *\/$/;"	v
check_clients	conc/echoservers.c	/^void check_clients(pool *p) $/;"	f
clientfd	conc/echoservers.c	/^    int clientfd[FD_SETSIZE];    \/* Set of active descriptors *\/$/;"	m	struct:__anon14	file:
clientrio	conc/echoservers.c	/^    rio_t clientrio[FD_SETSIZE]; \/* Set of active read buffers *\/$/;"	m	struct:__anon14	file:
init_pool	conc/echoservers.c	/^void init_pool(int listenfd, pool *p) $/;"	f
main	conc/echoservers.c	/^int main(int argc, char **argv)$/;"	f
maxfd	conc/echoservers.c	/^    int maxfd;        \/* Largest descriptor in read_set *\/   $/;"	m	struct:__anon14	file:
maxi	conc/echoservers.c	/^    int maxi;         \/* Highwater index into client array *\/$/;"	m	struct:__anon14	file:
nready	conc/echoservers.c	/^    int nready;       \/* Number of ready descriptors from select *\/   $/;"	m	struct:__anon14	file:
pool	conc/echoservers.c	/^} pool; \/\/line:conc:echoservers:endpool$/;"	t	typeref:struct:__anon14	file:
read_set	conc/echoservers.c	/^    fd_set read_set;  \/* Set of all active descriptors *\/$/;"	m	struct:__anon14	file:
ready_set	conc/echoservers.c	/^    fd_set ready_set; \/* Subset of descriptors ready for reading  *\/$/;"	m	struct:__anon14	file:
main	conc/echoservert.c	/^int main(int argc, char **argv) $/;"	f
thread	conc/echoservert.c	/^void *thread(void *vargp) $/;"	f
main	conc/echoservert_cnt.c	/^int main(int argc, char **argv) $/;"	f
thread	conc/echoservert_cnt.c	/^void *thread(void *vargp) $/;"	f
NTHREADS	conc/echoservert_pre.c	/^#define NTHREADS /;"	d	file:
SBUFSIZE	conc/echoservert_pre.c	/^#define SBUFSIZE /;"	d	file:
main	conc/echoservert_pre.c	/^int main(int argc, char **argv) $/;"	f
sbuf	conc/echoservert_pre.c	/^sbuf_t sbuf; \/* Shared buffer of connected descriptors *\/$/;"	v
thread	conc/echoservert_pre.c	/^void *thread(void *vargp) $/;"	f
cnt	conc/goodcnt.c	/^    volatile long cnt = 0; \/* Counter *\/$/;"	v
main	conc/goodcnt.c	/^int main(int argc, char **argv) $/;"	f
mutex	conc/goodcnt.c	/^    sem_t mutex;           \/* Semaphore that protects counter *\/$/;"	v
thread	conc/goodcnt.c	/^void *thread(void *vargp) $/;"	f
cnt	conc/goodcnt.s	/^cnt:$/;"	l
main	conc/goodcnt.s	/^main:$/;"	l
thread	conc/goodcnt.s	/^thread:$/;"	l
main	conc/hello.c	/^int main()                                    \/\/line:conc:hello:main$/;"	f
thread	conc/hello.c	/^void *thread(void *vargp) \/* thread routine *\/  \/\/line:conc:hello:beginthread$/;"	f
main	conc/hellobug.c	/^int main() $/;"	f
thread	conc/hellobug.c	/^void *thread(void *vargp) $/;"	f
N	conc/norace.c	/^#define N /;"	d	file:
main	conc/norace.c	/^int main() $/;"	f
thread	conc/norace.c	/^void *thread(void *vargp) $/;"	f
main	conc/pipe.c	/^int main(int argc, char **argv)$/;"	f
BUFSIZE	conc/prodconsn.c	/^#define BUFSIZE /;"	d	file:
MAXSLEEP	conc/prodconsn.c	/^#define MAXSLEEP /;"	d	file:
NITEMS	conc/prodconsn.c	/^#define NITEMS /;"	d	file:
consumer	conc/prodconsn.c	/^void *consumer(void *arg)  \/* Consumer thread routine *\/$/;"	f
main	conc/prodconsn.c	/^int main() $/;"	f
producer	conc/prodconsn.c	/^void *producer(void *arg)  \/* Producer thread routine *\/$/;"	f
sbuf	conc/prodconsn.c	/^sbuf_t sbuf; \/* Shared buffer *\/$/;"	v
MAXTHREADS	conc/psum-array.c	/^#define MAXTHREADS /;"	d	file:
main	conc/psum-array.c	/^int main(int argc, char **argv) $/;"	f
nelems_per_thread	conc/psum-array.c	/^long nelems_per_thread; \/* Number of elements summed by each thread *\/$/;"	v
psum	conc/psum-array.c	/^long psum[MAXTHREADS];  \/* Partial sum computed by each thread *\/$/;"	v
sum_array	conc/psum-array.c	/^void *sum_array(void *vargp) $/;"	f
MAXTHREADS	conc/psum-local.c	/^#define MAXTHREADS /;"	d	file:
main	conc/psum-local.c	/^int main(int argc, char **argv) $/;"	f
nelems_per_thread	conc/psum-local.c	/^long nelems_per_thread; \/* Number of elements summed by each thread *\/$/;"	v
psum	conc/psum-local.c	/^long psum[MAXTHREADS];  \/* Partial sum computed by each thread *\/$/;"	v
sum_local	conc/psum-local.c	/^void *sum_local(void *vargp) $/;"	f
MAXTHREADS	conc/psum-mutex.c	/^#define MAXTHREADS /;"	d	file:
gsum	conc/psum-mutex.c	/^long gsum = 0;           \/* Global sum *\/$/;"	v
main	conc/psum-mutex.c	/^int main(int argc, char **argv) $/;"	f
mutex	conc/psum-mutex.c	/^sem_t mutex;             \/* Mutex to protect global sum *\/$/;"	v
nelems_per_thread	conc/psum-mutex.c	/^long nelems_per_thread;  \/* Number of elements to sum *\/$/;"	v
sum_mutex	conc/psum-mutex.c	/^void *sum_mutex(void *vargp) $/;"	f
N	conc/race.c	/^#define N /;"	d	file:
main	conc/race.c	/^int main() $/;"	f
thread	conc/race.c	/^void *thread(void *vargp) $/;"	f
main	conc/rand.c	/^int main()$/;"	f
next_seed	conc/rand.c	/^unsigned next_seed = 1;$/;"	v
rand	conc/rand.c	/^unsigned rand(void)$/;"	f
srand	conc/rand.c	/^void srand(unsigned new_seed)$/;"	f
main	conc/rand_r.c	/^int main()$/;"	f
rand_r	conc/rand_r.c	/^int rand_r(unsigned int *nextp)$/;"	f
reader	conc/rw0.c	/^void reader(void) $/;"	f
w	conc/rw0.c	/^sem_t w; \/* Initially = 1 *\/$/;"	v
writer	conc/rw0.c	/^void writer(void) $/;"	f
mutex	conc/rw1.c	/^sem_t mutex, w; \/* Both initially = 1 *\/$/;"	v
readcnt	conc/rw1.c	/^int readcnt;    \/* Initially = 0 *\/$/;"	v
reader	conc/rw1.c	/^void reader(void) $/;"	f
w	conc/rw1.c	/^sem_t mutex, w; \/* Both initially = 1 *\/$/;"	v
writer	conc/rw1.c	/^void writer(void) $/;"	f
mutex	conc/rw2.c	/^sem_t mutex, w, wg; \/* All initially = 1 *\/$/;"	v
readcount	conc/rw2.c	/^int readcount;      \/* Initially = 0 *\/$/;"	v
reader	conc/rw2.c	/^void reader(void) $/;"	f
w	conc/rw2.c	/^sem_t mutex, w, wg; \/* All initially = 1 *\/$/;"	v
wg	conc/rw2.c	/^sem_t mutex, w, wg; \/* All initially = 1 *\/$/;"	v
writer	conc/rw2.c	/^void writer(void) $/;"	f
N	conc/rw3.c	/^#define N /;"	d	file:
reader	conc/rw3.c	/^void reader(void) $/;"	f
sem	conc/rw3.c	/^sem_t sem;    \/* Initially = N *\/$/;"	v
wmutex	conc/rw3.c	/^sem_t wmutex; \/* Initially = 1 *\/$/;"	v
writer	conc/rw3.c	/^void writer(void) $/;"	f
sbuf_deinit	conc/sbuf.c	/^void sbuf_deinit(sbuf_t *sp)$/;"	f
sbuf_init	conc/sbuf.c	/^void sbuf_init(sbuf_t *sp, int n)$/;"	f
sbuf_insert	conc/sbuf.c	/^void sbuf_insert(sbuf_t *sp, int item)$/;"	f
sbuf_remove	conc/sbuf.c	/^int sbuf_remove(sbuf_t *sp)$/;"	f
__SBUF_H__	conc/sbuf.h	/^#define __SBUF_H__$/;"	d
buf	conc/sbuf.h	/^    int *buf;          \/* Buffer array *\/         $/;"	m	struct:__anon15
front	conc/sbuf.h	/^    int front;         \/* buf[(front+1)%n] is first item *\/$/;"	m	struct:__anon15
items	conc/sbuf.h	/^    sem_t items;       \/* Counts available items *\/$/;"	m	struct:__anon15
mutex	conc/sbuf.h	/^    sem_t mutex;       \/* Protects accesses to buf *\/$/;"	m	struct:__anon15
n	conc/sbuf.h	/^    int n;             \/* Maximum number of slots *\/$/;"	m	struct:__anon15
rear	conc/sbuf.h	/^    int rear;          \/* buf[rear%n] is last item *\/$/;"	m	struct:__anon15
sbuf_t	conc/sbuf.h	/^} sbuf_t;$/;"	t	typeref:struct:__anon15
slots	conc/sbuf.h	/^    sem_t slots;       \/* Counts available slots *\/$/;"	m	struct:__anon15
command	conc/select.c	/^void command(void) {$/;"	f
main	conc/select.c	/^int main(int argc, char **argv) $/;"	f
N	conc/sharing.c	/^#define N /;"	d	file:
main	conc/sharing.c	/^int main() $/;"	f
ptr	conc/sharing.c	/^char **ptr;  \/* Global variable *\/ \/\/line:conc:sharing:ptrdec$/;"	v
thread	conc/sharing.c	/^void *thread(void *vargp) $/;"	f
main	conc/test.c	/^int main() $/;"	f
thread	conc/test.c	/^void *thread(void *vargp) \/* thread routine *\/$/;"	f
main	conc/tfgets-main.c	/^int main() $/;"	f
main	conc/threadunsafe.c	/^int main() {$/;"	f
MAXN	conc/vsum.c	/^#define MAXN /;"	d	file:
MAXTHREADS	conc/vsum.c	/^#define MAXTHREADS /;"	d	file:
main	conc/vsum.c	/^int main(int argc, char **argv) $/;"	f
nelems_per_thread	conc/vsum.c	/^long nelems_per_thread;  \/* Region size for each thread *\/$/;"	v
psum	conc/vsum.c	/^double psum[MAXTHREADS]; \/* Partial sum computed by each thread *\/$/;"	v
sum	conc/vsum.c	/^void *sum(void *vargp) $/;"	f
vector	conc/vsum.c	/^double vector[MAXN];          \/* Vector *\/$/;"	v
CC	data/Makefile	/^CC = gcc$/;"	m
CFLAGS	data/Makefile	/^CFLAGS = -I . -O1 $/;"	m
EXE	data/Makefile	/^EXE=$/;"	m
FLAG32	data/Makefile	/^FLAG32 = -m32$/;"	m
FLAG64	data/Makefile	/^FLAG64= -m64$/;"	m
FLAGC11	data/Makefile	/^FLAGC11 = -std=c11 -Wpedantic$/;"	m
FLAGC89	data/Makefile	/^FLAGC89 = -std=c89 -Wpedantic$/;"	m
FLAGC99	data/Makefile	/^FLAGC99 = -std=c99 -Wpedantic$/;"	m
PROGS	data/Makefile	/^PROGS = show-bytes\\$/;"	m
a	data/bad-sum.c	/^float a[5] = { 1.0, 2.0, 3.0, 4.0, 5.0};$/;"	v
main	data/bad-sum.c	/^int main(int argc, char *argv[]) {$/;"	f
sum_elements	data/bad-sum.c	/^float sum_elements(float a[], unsigned length) {$/;"	f
test	data/bad-sum.c	/^void test(unsigned limit) $/;"	f
bic	data/bisbic.c	/^int bic(int x, int m) {$/;"	f
bis	data/bisbic.c	/^int bis(int x, int m) {$/;"	f
bool_or	data/bisbic.c	/^int bool_or(int x, int y) {$/;"	f
bool_xor	data/bisbic.c	/^int bool_xor(int x, int y) {$/;"	f
main	data/bisbic.c	/^int main(int argc, char *argv[]) {$/;"	f
explicit_cast	data/casting.c	/^void explicit_cast() {$/;"	f
implicit_cast	data/casting.c	/^void implicit_cast() {$/;"	f
main	data/casting.c	/^int main(int argc, char *argv[]) {$/;"	f
mytrunc	data/casting.c	/^int mytrunc() {$/;"	f
t2u	data/casting.c	/^unsigned t2u() {$/;"	f
accum	data/code.c	/^int accum = 0;$/;"	v
main	data/code.c	/^int main() {$/;"	f
p	data/code.c	/^int p(int x)$/;"	f
sum	data/code.c	/^int sum(int x, int y)$/;"	f
hm1	data/constants-eg.c	/^void hm1() {$/;"	f
ll_t	data/constants-eg.c	/^typedef long long ll_t;$/;"	t	file:
main	data/constants-eg.c	/^int main(int argc, char *argv[]) {$/;"	f
new_defs32	data/constants-eg.c	/^void new_defs32() {$/;"	f
t32	data/constants-eg.c	/^void t32() {$/;"	f
t64	data/constants-eg.c	/^void t64() {$/;"	f
C11	data/constants.c	/^typedef enum { GCC, C89, C99, C11 } lang_t;$/;"	e	enum:__anon16	file:
C89	data/constants.c	/^typedef enum { GCC, C89, C99, C11 } lang_t;$/;"	e	enum:__anon16	file:
C99	data/constants.c	/^typedef enum { GCC, C89, C99, C11 } lang_t;$/;"	e	enum:__anon16	file:
COMP_TMIN	data/constants.c	/^#define COMP_TMIN(/;"	d	file:
COMP_ZERO	data/constants.c	/^#define COMP_ZERO(/;"	d	file:
GCC	data/constants.c	/^typedef enum { GCC, C89, C99, C11 } lang_t;$/;"	e	enum:__anon16	file:
LANG	data/constants.c	/^#define LANG /;"	d	file:
STMIN_DEC	data/constants.c	/^#define STMIN_DEC /;"	d	file:
STMIN_HEX	data/constants.c	/^#define STMIN_HEX /;"	d	file:
TMIN	data/constants.c	/^#define TMIN /;"	d	file:
TMIN_DEC	data/constants.c	/^#define TMIN_DEC /;"	d	file:
TMIN_HEX	data/constants.c	/^#define TMIN_HEX /;"	d	file:
TWICE	data/constants.c	/^#define TWICE(/;"	d	file:
comp_tmin	data/constants.c	/^char *comp_tmin(int x)$/;"	f
comp_zero	data/constants.c	/^char *comp_zero(int x)$/;"	f
lang_t	data/constants.c	/^typedef enum { GCC, C89, C99, C11 } lang_t;$/;"	t	typeref:enum:__anon16	file:
langs	data/constants.c	/^char *langs[4] = {"GCC", "C89", "C99", "C11"};$/;"	v
main	data/constants.c	/^int main(int argc, char *argv[])$/;"	f
div16	data/divconst.c	/^int div16(int x) {$/;"	f
div2k	data/divconst.c	/^int div2k(int x, int k)$/;"	f
div8	data/divconst.c	/^int div8(int x) {$/;"	f
main	data/divconst.c	/^int main(int argc, char *argv[]) {$/;"	f
main	data/eg-dis.c	/^int main()$/;"	f
proca	data/eg-dis.c	/^long int proca(long int *a, long int x, long int y)$/;"	f
byte_pointer	data/extend.c	/^typedef unsigned char *byte_pointer;$/;"	t	file:
main	data/extend.c	/^int main(int argc, char *argv[]) {$/;"	f
show_bytes	data/extend.c	/^void show_bytes(byte_pointer start, int len) {$/;"	f
test	data/extend.c	/^void test() {$/;"	f
test2	data/extend.c	/^void test2() {$/;"	f
float_ge	data/floatcomp-template.c	/^int float_ge(float x, float y) { $/;"	f
float_le	data/floatcomp-template.c	/^int float_le(float x, float y) { $/;"	f
NEG_INFINITY	data/ieee.c	/^#define NEG_INFINITY /;"	d	file:
NEG_ZERO	data/ieee.c	/^#define NEG_ZERO /;"	d	file:
POS_INFINITY	data/ieee.c	/^#define POS_INFINITY /;"	d	file:
_GNU_SOURCE	data/ieee.c	/^#define _GNU_SOURCE /;"	d	file:
main	data/ieee.c	/^int main()$/;"	f
fix_reverse_array	data/inplace-swap.c	/^void fix_reverse_array(int a[], int cnt) {$/;"	f
inplace_swap	data/inplace-swap.c	/^void inplace_swap(int *x, int *y) {$/;"	f
inplace_swap_b	data/inplace-swap.c	/^void inplace_swap_b(int *x, int *y) {$/;"	f
main	data/inplace-swap.c	/^int main(int argc, char *argv[]) {$/;"	f
reverse_array	data/inplace-swap.c	/^void reverse_array(int a[], int cnt) {$/;"	f
logic_eg	data/logic.c	/^void logic_eg(int x, int y)$/;"	f
main	data/logic.c	/^int main(int argc, char* argv[])$/;"	f
M	data/optarith.c	/^#define M /;"	d	file:
MB	data/optarith.c	/^#define MB /;"	d	file:
N	data/optarith.c	/^#define N /;"	d	file:
NB	data/optarith.c	/^#define NB /;"	d	file:
arith	data/optarith.c	/^int arith(int x, int y) {$/;"	f
arithb	data/optarith.c	/^int arithb(int x, int y) {$/;"	f
main	data/optarith.c	/^int main(int argc, char *argv[]) {$/;"	f
optarith	data/optarith.c	/^int optarith(int x, int y) {$/;"	f
optarithb	data/optarith.c	/^int optarithb(int x, int y) {$/;"	f
main	data/printf.c	/^int main ()$/;"	f
puzzle	data/puzzle.c	/^int puzzle()$/;"	f
replace_byte	data/rbyte-ans.c	/^unsigned replace_byte (unsigned x, int i, unsigned char b) {$/;"	f
sra	data/rshift-templates.c	/^int sra(int x, int k) { $/;"	f
srl	data/rshift-templates.c	/^unsigned srl(unsigned x, int k) { $/;"	f
main	data/shift.c	/^int main(int argc, char *argv[]) {$/;"	f
byte_pointer	data/show-bytes.c	/^typedef unsigned char *byte_pointer;$/;"	t	file:
float_eg	data/show-bytes.c	/^void float_eg() {$/;"	f
main	data/show-bytes.c	/^int main(int argc, char *argv[])$/;"	f
show_bytes	data/show-bytes.c	/^void show_bytes(byte_pointer start, size_t len) {$/;"	f
show_float	data/show-bytes.c	/^void show_float(float x) {$/;"	f
show_int	data/show-bytes.c	/^void show_int(int x) {$/;"	f
show_pointer	data/show-bytes.c	/^void show_pointer(void *x) {$/;"	f
show_twocomp	data/show-bytes.c	/^void show_twocomp() $/;"	f
simple_show_a	data/show-bytes.c	/^void simple_show_a() {$/;"	f
simple_show_b	data/show-bytes.c	/^void simple_show_b() {$/;"	f
string_leg	data/show-bytes.c	/^void string_leg() {$/;"	f
string_ueg	data/show-bytes.c	/^void string_ueg() {$/;"	f
test_show_bytes	data/show-bytes.c	/^void test_show_bytes(int val) {$/;"	f
fun1	data/sign-extend.c	/^int fun1(unsigned word) {$/;"	f
fun2	data/sign-extend.c	/^int fun2(unsigned word) {$/;"	f
main	data/sign-extend.c	/^int main(int argc, char *argv[])$/;"	f
main	data/sizes.c	/^int main() $/;"	f
main	data/strlonger.c	/^int main(int argc, char *argv[]) {$/;"	f
strlonger	data/strlonger.c	/^int strlonger(char *s, char *t) {$/;"	f
strlonger2	data/strlonger.c	/^int strlonger2(char *s, char *t) {$/;"	f
strshorter	data/strlonger.c	/^int strshorter(char *s, char *t) {$/;"	f
strshorter2	data/strlonger.c	/^int strshorter2(char *s, char *t) {$/;"	f
main	data/sum.c	/^int main(int argc, char *argv[]) $/;"	f
sum	data/sum.c	/^int sum(int x, int y) {$/;"	f
bad_cmult_ok	data/tmultcheck.c	/^int bad_cmult_ok(char x, char y) {$/;"	f
bad_tmult_ok	data/tmultcheck.c	/^int bad_tmult_ok(int x, int y) {$/;"	f
cmult_ok	data/tmultcheck.c	/^int cmult_ok(char x, char y) {$/;"	f
cmult_ok2	data/tmultcheck.c	/^int cmult_ok2(char x, char y) {$/;"	f
cmult_ok3	data/tmultcheck.c	/^int cmult_ok3(char x, char y) {$/;"	f
main	data/tmultcheck.c	/^int main() {$/;"	f
test_cmult_ok	data/tmultcheck.c	/^int test_cmult_ok(char x, char y) {$/;"	f
tmult_ok	data/tmultcheck.c	/^int tmult_ok(int x, int y) {$/;"	f
tmult_ok2	data/tmultcheck.c	/^int tmult_ok2(int x, int y) {$/;"	f
tmult_ovf	data/tmultcheck.c	/^int tmult_ovf(int x, int y) {$/;"	f
tmult_ovf2	data/tmultcheck.c	/^int tmult_ovf2(int x, int y) {$/;"	f
main	data/uaddcheck.c	/^int main(int argc, char *argv[]) {$/;"	f
test_uadd_ok	data/uaddcheck.c	/^int test_uadd_ok(unsigned x, unsigned y) {$/;"	f
test_uadd_ovf	data/uaddcheck.c	/^int test_uadd_ovf(unsigned x, unsigned y) {$/;"	f
uadd_ok	data/uaddcheck.c	/^int uadd_ok(unsigned x, unsigned y) {$/;"	f
uadd_ovf	data/uaddcheck.c	/^int uadd_ovf(unsigned x, unsigned y) {$/;"	f
unsigned_high_prod	data/uhp-ans.c	/^unsigned unsigned_high_prod(unsigned x, unsigned y) { $/;"	f
KSIZE	data/vulnerabilities.c	/^#define KSIZE /;"	d	file:
copy_elements	data/vulnerabilities.c	/^void* copy_elements(void *ele_src[], int ele_cnt, size_t ele_size) {$/;"	f
copy_from_kernel	data/vulnerabilities.c	/^int copy_from_kernel(void *user_dest, int maxlen) { \/\/line:data:copyproto$/;"	f
kbuf	data/vulnerabilities.c	/^char kbuf[KSIZE];$/;"	v
not_safe_copy_elements	data/vulnerabilities.c	/^void* not_safe_copy_elements(void *ele_src[], int ele_cnt, size_t ele_size) {$/;"	f
safe_copy_elements	data/vulnerabilities.c	/^void* safe_copy_elements(void *ele_src[], int ele_cnt, size_t ele_size) {$/;"	f
bad_int_size_is_32	data/wordsize.c	/^int bad_int_size_is_32() {$/;"	f
find_word_size	data/wordsize.c	/^int find_word_size() {$/;"	f
main	data/wordsize.c	/^int main(int argc, char *argv[]) {$/;"	f
main	data/xbyte.c	/^int main(int argc, char *argv[]) {$/;"	f
packed_t	data/xbyte.c	/^typedef unsigned packed_t;$/;"	t	file:
xbyte	data/xbyte.c	/^int xbyte(packed_t word, int bytenum) {$/;"	f
xbyte_bad	data/xbyte.c	/^int xbyte_bad(packed_t word, int bytenum)$/;"	f
CC	ecf/Makefile	/^CC = gcc-7$/;"	m
CFLAGS	ecf/Makefile	/^CFLAGS = -Wall -Og -I $(CSAPP_INC) -I . $/;"	m
CSAPP_INC	ecf/Makefile	/^CSAPP_INC = ..\/include$/;"	m
CSAPP_SRC	ecf/Makefile	/^CSAPP_SRC = ..\/src$/;"	m
LDLIBS	ecf/Makefile	/^LDLIBS = -lpthread$/;"	m
PROGS	ecf/Makefile	/^PROGS = fragments.o\\$/;"	m
handler	ecf/alarm.c	/^void handler(int sig) $/;"	f
main	ecf/alarm.c	/^int main() $/;"	f
main	ecf/blockone.c	/^int main(int argc, char **argv)$/;"	f
main	ecf/cmdline.c	/^int main(int argc, char *argv[], char *envp[])$/;"	f
counter	ecf/counterprob.c	/^int counter = 0;$/;"	v
handler	ecf/counterprob.c	/^void handler(int sig) $/;"	f
main	ecf/counterprob.c	/^int main() $/;"	f
main	ecf/fork.c	/^int main() $/;"	f
main	ecf/fork1.c	/^int main() $/;"	f
main	ecf/fork2.c	/^int main() $/;"	f
main	ecf/fork3.c	/^int main() $/;"	f
main	ecf/forkprob0.c	/^int main() $/;"	f
main	ecf/forkprob1.c	/^int main() $/;"	f
end	ecf/forkprob2.c	/^void end(void) $/;"	f
main	ecf/forkprob2.c	/^int main() $/;"	f
main	ecf/forkprob3.c	/^int main() $/;"	f
doit	ecf/forkprob4.c	/^void doit() $/;"	f
main	ecf/forkprob4.c	/^int main() $/;"	f
doit	ecf/forkprob5.c	/^void doit() $/;"	f
main	ecf/forkprob5.c	/^int main() $/;"	f
doit	ecf/forkprob6.c	/^void doit() $/;"	f
main	ecf/forkprob6.c	/^int main() $/;"	f
counter	ecf/forkprob7.c	/^int counter = 1;$/;"	v
main	ecf/forkprob7.c	/^int main() $/;"	f
foo	ecf/forkprob8.c	/^void foo(int n) $/;"	f
main	ecf/forkprob8.c	/^int main(int argc, char **argv)$/;"	f
fragments	ecf/fragments.c	/^void fragments()$/;"	f
insert	ecf/fragments.c	/^void insert(void *list, int item) $/;"	f
main	ecf/getpid.c	/^int main() $/;"	f
main	ecf/hello-asm32.s	/^main:$/;"	l
string	ecf/hello-asm32.s	/^string:$/;"	l
string_end	ecf/hello-asm32.s	/^string_end:$/;"	l
main	ecf/hello-asm64.s	/^main:$/;"	l
string	ecf/hello-asm64.s	/^string:$/;"	l
string_end	ecf/hello-asm64.s	/^string_end:$/;"	l
main	ecf/hello.c	/^int main()$/;"	f
main	ecf/jmpbuf.c	/^int main()$/;"	f
main	ecf/kill.c	/^int main() $/;"	f
main	ecf/myecho.c	/^int main(int argc, char *argv[], char *envp[]) $/;"	f
main	ecf/orphan.c	/^int main()$/;"	f
handler	ecf/pg.c	/^void handler(int sig) $/;"	f
main	ecf/pg.c	/^int main() $/;"	f
handler	ecf/pgchild.c	/^void handler(int sig) $/;"	f
main	ecf/pgchild.c	/^int main() $/;"	f
addjob	ecf/procmask.c	/^void addjob(int pid)$/;"	f
deletejob	ecf/procmask.c	/^void deletejob(int pid)$/;"	f
handler	ecf/procmask.c	/^void handler(int sig)$/;"	f
initjobs	ecf/procmask.c	/^void initjobs()$/;"	f
main	ecf/procmask.c	/^int main(int argc, char **argv)$/;"	f
addjob	ecf/procmask1.c	/^void addjob(int pid)$/;"	f
deletejob	ecf/procmask1.c	/^void deletejob(int pid)$/;"	f
handler	ecf/procmask1.c	/^void handler(int sig)$/;"	f
initjobs	ecf/procmask1.c	/^void initjobs()$/;"	f
main	ecf/procmask1.c	/^int main(int argc, char **argv)$/;"	f
addjob	ecf/procmask2.c	/^void addjob(int pid)$/;"	f
deletejob	ecf/procmask2.c	/^void deletejob(int pid)$/;"	f
handler	ecf/procmask2.c	/^void handler(int sig)$/;"	f
initjobs	ecf/procmask2.c	/^void initjobs()$/;"	f
main	ecf/procmask2.c	/^int main(int argc, char **argv)$/;"	f
main	ecf/psignal.c	/^int main() $/;"	f
buf	ecf/restart.c	/^sigjmp_buf buf;$/;"	v
handler	ecf/restart.c	/^void handler(int sig) $/;"	f
main	ecf/restart.c	/^int main() $/;"	f
ITERS	ecf/rfork-driver.c	/^#define ITERS /;"	d	file:
main	ecf/rfork-driver.c	/^int main()$/;"	f
CONVERT	ecf/rfork.c	/^#define CONVERT(/;"	d	file:
Fork	ecf/rfork.c	/^pid_t Fork(void)$/;"	f
MAX_SLEEP	ecf/rfork.c	/^#define MAX_SLEEP /;"	d	file:
bar	ecf/setjmp.c	/^void bar(void) $/;"	f
buf	ecf/setjmp.c	/^jmp_buf buf;$/;"	v
error1	ecf/setjmp.c	/^int error1 = 0; $/;"	v
error2	ecf/setjmp.c	/^int error2 = 1;$/;"	v
foo	ecf/setjmp.c	/^void foo(void) $/;"	f
main	ecf/setjmp.c	/^int main() $/;"	f
BG	ecf/shell.c	/^#define BG /;"	d	file:
FG	ecf/shell.c	/^#define FG /;"	d	file:
MAXARGS	ecf/shell.c	/^#define MAXARGS /;"	d	file:
MAXJOBS	ecf/shell.c	/^#define MAXJOBS /;"	d	file:
ST	ecf/shell.c	/^#define ST /;"	d	file:
UNDEF	ecf/shell.c	/^#define UNDEF /;"	d	file:
addjob	ecf/shell.c	/^int addjob(struct job_t *jobs, pid_t pid, int state, char *cmdline) $/;"	f
builtin_command	ecf/shell.c	/^int builtin_command(char **argv) {$/;"	f
clearjob	ecf/shell.c	/^void clearjob(struct job_t *job) {$/;"	f
cmdline	ecf/shell.c	/^    char cmdline[MAXLINE];  \/* command line *\/$/;"	m	struct:job_t	file:
deletejob	ecf/shell.c	/^int deletejob(struct job_t *jobs, pid_t pid) $/;"	f
eval	ecf/shell.c	/^void eval(char *cmdline) $/;"	f
fgpid	ecf/shell.c	/^pid_t fgpid(struct job_t *jobs) {$/;"	f
getjob	ecf/shell.c	/^struct job_t *getjob(struct job_t *jobs, pid_t pid) {$/;"	f
initjobs	ecf/shell.c	/^void initjobs(struct job_t *jobs) {$/;"	f
job_t	ecf/shell.c	/^struct job_t {$/;"	s	file:
jobs	ecf/shell.c	/^struct job_t jobs[MAXJOBS]; \/* job list *\/$/;"	v	typeref:struct:job_t
listjobs	ecf/shell.c	/^void listjobs(struct job_t *jobs) {$/;"	f
main	ecf/shell.c	/^int main(int argc, char **argv) $/;"	f
parseline	ecf/shell.c	/^int parseline(const char *cmdline, char **argv) $/;"	f
pid	ecf/shell.c	/^    pid_t pid;              \/* job PID *\/$/;"	m	struct:job_t	file:
prompt	ecf/shell.c	/^char prompt[] = "> ";       \/* command line prompt *\/$/;"	v
sbuf	ecf/shell.c	/^char sbuf[MAXLINE];         \/* for composing sprintf messages *\/$/;"	v
sigchld_handler	ecf/shell.c	/^void sigchld_handler(int sig) $/;"	f
sigint_handler	ecf/shell.c	/^void sigint_handler(int sig) $/;"	f
sigtstp_handler	ecf/shell.c	/^void sigtstp_handler(int sig) $/;"	f
state	ecf/shell.c	/^    int state;              \/* UNDEF, BG, FG, or ST *\/$/;"	m	struct:job_t	file:
updatejob	ecf/shell.c	/^int updatejob(struct job_t *jobs, pid_t pid, int state) $/;"	f
usage	ecf/shell.c	/^void usage() $/;"	f
verbose	ecf/shell.c	/^int verbose = 0;            \/* if true, print extra output *\/$/;"	v
waitfg	ecf/shell.c	/^void waitfg(pid_t pid)$/;"	f
MAXARGS	ecf/shellex.c	/^#define MAXARGS /;"	d	file:
builtin_command	ecf/shellex.c	/^int builtin_command(char **argv) $/;"	f
eval	ecf/shellex.c	/^void eval(char *cmdline) $/;"	f
main	ecf/shellex.c	/^int main() $/;"	f
parseline	ecf/shellex.c	/^int parseline(char *buf, char **argv) $/;"	f
END	ecf/sigbus.c	/^#define END /;"	d	file:
INCR	ecf/sigbus.c	/^#define INCR /;"	d	file:
START	ecf/sigbus.c	/^#define START /;"	d	file:
handler	ecf/sigbus.c	/^void handler(int sig) {$/;"	f
i	ecf/sigbus.c	/^long i;$/;"	v
main	ecf/sigbus.c	/^int main() {$/;"	f
main	ecf/sigfpe.c	/^int main() {$/;"	f
main	ecf/sigint.c	/^int main() $/;"	f
sigint_handler	ecf/sigint.c	/^void sigint_handler(int sig) \/* SIGINT handler *\/   \/\/line:ecf:sigint:beginhandler$/;"	f
main	ecf/sigintsafe.c	/^int main() $/;"	f
sigint_handler	ecf/sigintsafe.c	/^void sigint_handler(int sig) \/* Safe SIGINT handler *\/ $/;"	f
handler1	ecf/signal1.c	/^void handler1(int sig) $/;"	f
main	ecf/signal1.c	/^int main() $/;"	f
handler2	ecf/signal2.c	/^void handler2(int sig) $/;"	f
main	ecf/signal2.c	/^int main() $/;"	f
handler2	ecf/signal3.c	/^void handler2(int sig) $/;"	f
main	ecf/signal3.c	/^int main() {$/;"	f
handler2	ecf/signal4.c	/^void handler2(int sig) $/;"	f
main	ecf/signal4.c	/^int main() $/;"	f
counter	ecf/signalprob0.c	/^volatile long counter = 2;$/;"	v
handler1	ecf/signalprob0.c	/^void handler1(int sig) $/;"	f
main	ecf/signalprob0.c	/^int main() $/;"	f
main	ecf/sigsegv.c	/^int main() {$/;"	f
main	ecf/sigsuspend.c	/^int main(int argc, char **argv) $/;"	f
pid	ecf/sigsuspend.c	/^volatile sig_atomic_t pid;$/;"	v
sigchld_handler	ecf/sigsuspend.c	/^void sigchld_handler(int s)$/;"	f
sigint_handler	ecf/sigsuspend.c	/^void sigint_handler(int s)$/;"	f
handler	ecf/snooze.c	/^void handler(int sig) $/;"	f
main	ecf/snooze.c	/^int main(int argc, char **argv) {$/;"	f
snooze	ecf/snooze.c	/^unsigned int snooze(unsigned int secs) {$/;"	f
main	ecf/stack.c	/^int main(int argc, char **argv, char **envp) $/;"	f
main	ecf/test.c	/^int main(int argc, char **argv) {$/;"	f
main	ecf/waitforsignal.c	/^int main(int argc, char **argv) $/;"	f
pid	ecf/waitforsignal.c	/^volatile sig_atomic_t pid;$/;"	v
sigchld_handler	ecf/waitforsignal.c	/^void sigchld_handler(int s)$/;"	f
sigint_handler	ecf/waitforsignal.c	/^void sigint_handler(int s)$/;"	f
N	ecf/waitpid1.c	/^#define N /;"	d	file:
main	ecf/waitpid1.c	/^int main() $/;"	f
N	ecf/waitpid2.c	/^#define N /;"	d	file:
main	ecf/waitpid2.c	/^int main() $/;"	f
main	ecf/waitprob0.c	/^int main() $/;"	f
main	ecf/waitprob1.c	/^int main() $/;"	f
main	ecf/waitprob3.c	/^int main() $/;"	f
CC	error/Makefile	/^CC = gcc$/;"	m
CFLAGS	error/Makefile	/^CFLAGS = -Wall -O2 -I $(CSAPP_INC) -I .$/;"	m
CSAPP_INC	error/Makefile	/^CSAPP_INC = ..\/include$/;"	m
CSAPP_SRC	error/Makefile	/^CSAPP_SRC = ..\/src$/;"	m
LDLIBS	error/Makefile	/^LDLIBS = -lpthread$/;"	m
PROGS	error/Makefile	/^PROGS = fragments.o$/;"	m
fragments	error/fragments.c	/^void fragments()$/;"	f
thread	error/fragments.c	/^void *thread(void *vptr) $/;"	f
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
RAN_SAMPLE	include/cpe.h	/^typedef enum {UNI_SAMPLE, RAN_SAMPLE}$/;"	e	enum:__anon17
UNI_SAMPLE	include/cpe.h	/^typedef enum {UNI_SAMPLE, RAN_SAMPLE}$/;"	e	enum:__anon17
elem_fun_t	include/cpe.h	/^typedef void (*elem_fun_t)(long int);$/;"	t
sample_t	include/cpe.h	/^  sample_t;$/;"	t	typeref:enum:__anon17
DEF_MODE	include/csapp.h	/^#define DEF_MODE /;"	d
DEF_UMASK	include/csapp.h	/^#define DEF_UMASK /;"	d
LISTENQ	include/csapp.h	/^#define LISTENQ /;"	d
MAXBUF	include/csapp.h	/^#define MAXBUF /;"	d
MAXLINE	include/csapp.h	/^#define	MAXLINE	/;"	d
RIO_BUFSIZE	include/csapp.h	/^#define RIO_BUFSIZE /;"	d
SA	include/csapp.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
__CSAPP_H__	include/csapp.h	/^#define __CSAPP_H__$/;"	d
handler_t	include/csapp.h	/^typedef void handler_t(int);$/;"	t
rio_buf	include/csapp.h	/^    char rio_buf[RIO_BUFSIZE]; \/* Internal buffer *\/$/;"	m	struct:__anon18
rio_bufptr	include/csapp.h	/^    char *rio_bufptr;          \/* Next unread byte in internal buf *\/$/;"	m	struct:__anon18
rio_cnt	include/csapp.h	/^    int rio_cnt;               \/* Unread bytes in internal buf *\/$/;"	m	struct:__anon18
rio_fd	include/csapp.h	/^    int rio_fd;                \/* Descriptor for this internal buf *\/$/;"	m	struct:__anon18
rio_t	include/csapp.h	/^} rio_t;$/;"	t	typeref:struct:__anon18
test_funct	include/fcyc.h	/^typedef void (*test_funct)(long int *);$/;"	t
LS_AVG	include/lsquare.h	/^typedef enum {LS_AVG, LS_MAX} ls_err_t;$/;"	e	enum:__anon19
LS_MAX	include/lsquare.h	/^typedef enum {LS_AVG, LS_MAX} ls_err_t;$/;"	e	enum:__anon19
ls_err_t	include/lsquare.h	/^typedef enum {LS_AVG, LS_MAX} ls_err_t;$/;"	t	typeref:enum:__anon19
0cCC	intro/Makefile	/^0;269;0cCC = gcc$/;"	m
CFLAGS	intro/Makefile	/^CFLAGS = -Wall -Og -m64$/;"	m
ICS	intro/Makefile	/^ICS = ..$/;"	m
PROGS	intro/Makefile	/^PROGS = hello$/;"	m
main	intro/hello.c	/^int main() $/;"	f
main	intro/hello.s	/^main:$/;"	l
CC	io/Makefile	/^CC = gcc$/;"	m
CFLAGS	io/Makefile	/^CFLAGS = -Wall -O2 -I $(CSAPP_INC) -I .$/;"	m
CSAPP_INC	io/Makefile	/^CSAPP_INC = ..\/include$/;"	m
CSAPP_SRC	io/Makefile	/^CSAPP_SRC = ..\/src$/;"	m
LDLIBS	io/Makefile	/^LDLIBS = -lpthread$/;"	m
PROGS	io/Makefile	/^PROGS =	statcheck\\$/;"	m
main	io/cpfile.c	/^int main(int argc, char **argv) $/;"	f
main	io/cpstdin.c	/^int main(void) $/;"	f
main	io/fdprob1.c	/^int main()$/;"	f
main	io/fdprob2.c	/^int main()$/;"	f
fragments	io/iofragments.c	/^void fragments()$/;"	f
main	io/openexamples.c	/^int main()$/;"	f
main	io/readdir.c	/^int main(int argc, char **argv)$/;"	f
main	io/sharing1.c	/^int main()$/;"	f
main	io/sharing2.c	/^int main()$/;"	f
main	io/sharing3.c	/^int main()$/;"	f
main	io/statcheck.c	/^int main (int argc, char **argv) $/;"	f
CC	io/test-readlineb/Makefile	/^CC = gcc$/;"	m
CFLAGS	io/test-readlineb/Makefile	/^CFLAGS = -Wall -O2 -I $(CSAPP_INC) -I .$/;"	m
CSAPP_INC	io/test-readlineb/Makefile	/^CSAPP_INC = ..\/..\/include$/;"	m
CSAPP_SRC	io/test-readlineb/Makefile	/^CSAPP_SRC = ..\/..\/src$/;"	m
LDLIBS	io/test-readlineb/Makefile	/^LDLIBS = -lpthread$/;"	m
PROGS	io/test-readlineb/Makefile	/^PROGS =	cpfile\\$/;"	m
LEN	io/test-readlineb/cpfile.c	/^#define LEN /;"	d	file:
main	io/test-readlineb/cpfile.c	/^int main(int argc, char **argv) $/;"	f
CC	link/Makefile	/^CC = gcc$/;"	m
CFLAGS	link/Makefile	/^CFLAGS = -Wall -Og$/;"	m
PROGS	link/Makefile	/^PROGS = prog\\$/;"	m
addcnt	link/addvec.c	/^int addcnt = 0;$/;"	v
addvec	link/addvec.c	/^void addvec(int *x, int *y,$/;"	f
main	link/bar1.c	/^int main()  $/;"	f
f	link/bar2.c	/^void f()  $/;"	f
x	link/bar2.c	/^int x = 15213; $/;"	v
f	link/bar3.c	/^void f()  $/;"	f
x	link/bar3.c	/^int x; $/;"	v
f	link/bar4.c	/^void f()  $/;"	f
x	link/bar4.c	/^int x; $/;"	v
f	link/bar5.c	/^void f()  $/;"	f
x	link/bar5.c	/^double x; $/;"	v
main	link/bar6.c	/^char main;  $/;"	v
p2	link/bar6.c	/^void p2()  $/;"	f
main	link/dll.c	/^int main() $/;"	f
x	link/dll.c	/^int x[2] = {1, 2};$/;"	v
y	link/dll.c	/^int y[2] = {3, 4};$/;"	v
z	link/dll.c	/^int z[2];$/;"	v
Elf64_Rela	link/elfstructs.c	/^} Elf64_Rela; $/;"	t	typeref:struct:__anon21	file:
Elf64_Symbol	link/elfstructs.c	/^} Elf64_Symbol; $/;"	t	typeref:struct:__anon20	file:
addend	link/elfstructs.c	/^    long addend;    \/* Constant part of relocation expression *\/$/;"	m	struct:__anon21	file:
binding	link/elfstructs.c	/^	  binding:4; \/* Local or global (4 bits) *\/ $/;"	m	struct:__anon20	file:
name	link/elfstructs.c	/^    int   name;      \/* String table offset *\/ $/;"	m	struct:__anon20	file:
offset	link/elfstructs.c	/^    long offset;    \/* Offset of the reference to relocate *\/ $/;"	m	struct:__anon21	file:
reserved	link/elfstructs.c	/^    char  reserved;  \/* Unused *\/  $/;"	m	struct:__anon20	file:
section	link/elfstructs.c	/^    short section;   \/* Section header index *\/$/;"	m	struct:__anon20	file:
size	link/elfstructs.c	/^    long  size;      \/* Object size in bytes *\/ $/;"	m	struct:__anon20	file:
symbol	link/elfstructs.c	/^	 symbol:32; \/* Symbol table index *\/ $/;"	m	struct:__anon21	file:
type	link/elfstructs.c	/^    char  type:4,    \/* Function or data (4 bits) *\/ $/;"	m	struct:__anon20	file:
type	link/elfstructs.c	/^    long type:32,   \/* Relocation type *\/ $/;"	m	struct:__anon21	file:
value	link/elfstructs.c	/^    long  value;     \/* Section offset or absolute address *\/ $/;"	m	struct:__anon20	file:
main	link/foo1.c	/^int main()  $/;"	f
main	link/foo2.c	/^int main()  $/;"	f
x	link/foo2.c	/^int x = 15213; $/;"	v
main	link/foo3.c	/^int main()  $/;"	f
x	link/foo3.c	/^int x = 15213; $/;"	v
main	link/foo4.c	/^int main()  $/;"	f
x	link/foo4.c	/^int x; $/;"	v
main	link/foo5.c	/^int main()  $/;"	f
x	link/foo5.c	/^int x = 15213; $/;"	v
y	link/foo5.c	/^int y = 15212; $/;"	v
main	link/foo6.c	/^int main()  $/;"	f
main	link/hello.c	/^int main() {$/;"	f
CC	link/interpose/Makefile	/^CC = gcc$/;"	m
CFLAGS	link/interpose/Makefile	/^CFLAGS = -Wall$/;"	m
main	link/interpose/int.c	/^int main()$/;"	f
free	link/interpose/malloc.h	/^#define free(/;"	d
malloc	link/interpose/malloc.h	/^#define malloc(/;"	d
_GNU_SOURCE	link/interpose/mymalloc.c	/^#define _GNU_SOURCE$/;"	d	file:
__wrap_free	link/interpose/mymalloc.c	/^void __wrap_free(void *ptr)$/;"	f
__wrap_malloc	link/interpose/mymalloc.c	/^void *__wrap_malloc(size_t size)$/;"	f
free	link/interpose/mymalloc.c	/^void free(void *ptr)$/;"	f
malloc	link/interpose/mymalloc.c	/^void *malloc(size_t size)$/;"	f
myfree	link/interpose/mymalloc.c	/^void myfree(void *ptr)$/;"	f
mymalloc	link/interpose/mymalloc.c	/^void *mymalloc(size_t size)$/;"	f
main	link/linkerror.c	/^int main() {$/;"	f
buf	link/m.c	/^int buf[2] = {1, 2};$/;"	v
main	link/m.c	/^int main() $/;"	f
array	link/main.c	/^int array[2] = {1, 2};$/;"	v
main	link/main.c	/^int main() $/;"	f
array	link/main.s	/^array:$/;"	l
main	link/main.s	/^main:$/;"	l
main	link/main2.c	/^int main() $/;"	f
x	link/main2.c	/^int x[2] = {1, 2};$/;"	v
y	link/main2.c	/^int y[2] = {3, 4};$/;"	v
z	link/main2.c	/^int z[2];$/;"	v
bssvar	link/map.c	/^double bssvar;$/;"	v
datavar	link/map.c	/^char datavar[1024]={'a'};$/;"	v
main	link/map.c	/^int main(int argc, char **argv, char **envp) $/;"	f
multcnt	link/multvec.c	/^int multcnt = 0;$/;"	v
multvec	link/multvec.c	/^void multvec(int *x, int *y, $/;"	f
array	link/prog.s	/^array:$/;"	l
main	link/prog.s	/^main:$/;"	l
func	link/share.c	/^int func()$/;"	f
myglobal	link/share.c	/^int myglobal=128;$/;"	v
f	link/static.c	/^int f() $/;"	f
g	link/static.c	/^int g() $/;"	f
sum	link/sum.c	/^int sum(int *a, int n)$/;"	f
bufp0	link/swap.c	/^int *bufp0 = &buf[0];$/;"	v
bufp1	link/swap.c	/^int *bufp1;$/;"	v
swap	link/swap.c	/^void swap() $/;"	f
bufp0	link/swap2.c	/^int *bufp0 = &buf[0];$/;"	v
bufp1	link/swap2.c	/^static int *bufp1;$/;"	v	file:
incr	link/swap2.c	/^static void incr() $/;"	f	file:
swap	link/swap2.c	/^void swap() $/;"	f
main	link/t1.c	/^int main()$/;"	f
foo	link/t2.c	/^foo()$/;"	f
x	link/t2.c	/^int x;$/;"	v
CC	mem/Makefile	/^CC = gcc$/;"	m
CFLAGS	mem/Makefile	/^CFLAGS=-Wall -Og$/;"	m
ICS	mem/Makefile	/^ICS = ..$/;"	m
LDLIBS	mem/Makefile	/^LDLIBS=-lrt$/;"	m
PROGS	mem/Makefile	/^PROGS = sumvec\\$/;"	m
N	mem/cleararray.c	/^#define N /;"	d	file:
acc	mem/cleararray.c	/^    int acc[3];$/;"	m	struct:__anon22	file:
clear1	mem/cleararray.c	/^void clear1(point *p, int n) $/;"	f
clear2	mem/cleararray.c	/^void clear2(point *p, int n) $/;"	f
clear3	mem/cleararray.c	/^void clear3(point *p, int n) $/;"	f
main	mem/cleararray.c	/^int main() $/;"	f
p	mem/cleararray.c	/^point p[N];$/;"	v
point	mem/cleararray.c	/^} point;$/;"	t	typeref:struct:__anon22	file:
vel	mem/cleararray.c	/^    int vel[3];$/;"	m	struct:__anon22	file:
dotprod	mem/dotprod.c	/^float dotprod(float x[8], float y[8]) $/;"	f
main	mem/dotprod.c	/^int main()$/;"	f
x	mem/dotprod.c	/^float x[8], y[8];$/;"	v
y	mem/dotprod.c	/^float x[8], y[8];$/;"	v
a	mem/game.c	/^    char a;$/;"	m	struct:pixel	file:
b	mem/game.c	/^    char b;$/;"	m	struct:pixel	file:
buffer	mem/game.c	/^struct pixel buffer[480][640];$/;"	v	typeref:struct:pixel
cptr	mem/game.c	/^char *cptr;$/;"	v
g	mem/game.c	/^    char g;$/;"	m	struct:pixel	file:
i	mem/game.c	/^int i, j;$/;"	v
iptr	mem/game.c	/^int *iptr;$/;"	v
j	mem/game.c	/^int i, j;$/;"	v
loops	mem/game.c	/^void loops() $/;"	f
pixel	mem/game.c	/^struct pixel {$/;"	s	file:
r	mem/game.c	/^    char r;$/;"	m	struct:pixel	file:
CC	mem/matmult/Makefile	/^CC = gcc$/;"	m
CFLAGS	mem/matmult/Makefile	/^CFLAGS = -O4 -Wall -mavx2$/;"	m
CLEARCACHE	mem/matmult/bmm.c	/^#define CLEARCACHE /;"	d	file:
bijk	mem/matmult/bmm.c	/^void bijk(array A, array B, array C, int n, int bsize) $/;"	f
bikj	mem/matmult/bmm.c	/^void bikj(array A, array B, array C, int n, int bsize) $/;"	f
checkresult	mem/matmult/bmm.c	/^void checkresult(array c, int n)$/;"	f
ga	mem/matmult/bmm.c	/^array ga, gb, gc;$/;"	v
gb	mem/matmult/bmm.c	/^array ga, gb, gc;$/;"	v
gc	mem/matmult/bmm.c	/^array ga, gb, gc;$/;"	v
init	mem/matmult/bmm.c	/^void init(array a, array b, int n) $/;"	f
main	mem/matmult/bmm.c	/^int main(int argc, char **argv) $/;"	f
printarray	mem/matmult/bmm.c	/^void printarray(array a, int n)$/;"	f
reset	mem/matmult/bmm.c	/^void reset(array c, int n)$/;"	f
run	mem/matmult/bmm.c	/^double run(test_funct f, int n, int bsize)$/;"	f
NEVENT	mem/matmult/clock.c	/^#define NEVENT /;"	d	file:
RECORDTHRESH	mem/matmult/clock.c	/^#define RECORDTHRESH /;"	d	file:
THRESHOLD	mem/matmult/clock.c	/^#define THRESHOLD /;"	d	file:
access_counter	mem/matmult/clock.c	/^void access_counter(unsigned *hi, unsigned *lo)$/;"	f
callibrate	mem/matmult/clock.c	/^static void callibrate(int verbose)$/;"	f	file:
cyc_hi	mem/matmult/clock.c	/^static unsigned cyc_hi = 0;$/;"	v	file:
cyc_lo	mem/matmult/clock.c	/^static unsigned cyc_lo = 0;$/;"	v	file:
cyc_per_tick	mem/matmult/clock.c	/^static double cyc_per_tick = 0.0;$/;"	v	file:
get_comp_counter	mem/matmult/clock.c	/^double get_comp_counter() {$/;"	f
get_counter	mem/matmult/clock.c	/^double get_counter()$/;"	f
mhz	mem/matmult/clock.c	/^double mhz(int verbose)$/;"	f
mhz_full	mem/matmult/clock.c	/^double mhz_full(int verbose, int sleeptime)$/;"	f
ovhd	mem/matmult/clock.c	/^double ovhd()$/;"	f
start_comp_counter	mem/matmult/clock.c	/^void start_comp_counter() {$/;"	f
start_counter	mem/matmult/clock.c	/^void start_counter()$/;"	f
start_tick	mem/matmult/clock.c	/^static clock_t start_tick = 0;$/;"	v	file:
ASIZE	mem/matmult/fcycbmm.c	/^#define ASIZE /;"	d	file:
KEEP_SAMPLES	mem/matmult/fcycbmm.c	/^#define KEEP_SAMPLES /;"	d	file:
KEEP_VALS	mem/matmult/fcycbmm.c	/^#define KEEP_VALS /;"	d	file:
STRIDE	mem/matmult/fcycbmm.c	/^#define STRIDE /;"	d	file:
add_sample	mem/matmult/fcycbmm.c	/^void add_sample(double val, int k)$/;"	f
clear	mem/matmult/fcycbmm.c	/^static void clear()$/;"	f	file:
err	mem/matmult/fcycbmm.c	/^double err(int k)$/;"	f
fcyc	mem/matmult/fcycbmm.c	/^double fcyc(test_funct f, int n, int bsize, int clearcache)$/;"	f
fcyc_full	mem/matmult/fcycbmm.c	/^double fcyc_full(test_funct f, int n, int bsize, int clear_cache,$/;"	f
get_min	mem/matmult/fcycbmm.c	/^double get_min()$/;"	f
has_converged	mem/matmult/fcycbmm.c	/^int has_converged(int k_arg, double epsilon_arg, int maxsamples)$/;"	f
init_sampler	mem/matmult/fcycbmm.c	/^static void init_sampler(int k, int maxsamples)$/;"	f	file:
samplecount	mem/matmult/fcycbmm.c	/^int samplecount = 0;$/;"	v
samples	mem/matmult/fcycbmm.c	/^double *samples = NULL;$/;"	v
sink	mem/matmult/fcycbmm.c	/^static int sink;$/;"	v	file:
stuff	mem/matmult/fcycbmm.c	/^static int stuff[ASIZE];$/;"	v	file:
values	mem/matmult/fcycbmm.c	/^static double *values = NULL;$/;"	v	file:
test_funct	mem/matmult/fcycbmm.h	/^typedef void (*test_funct)(array, array, array, int, int); $/;"	t
ASIZE	mem/matmult/fcycmm.c	/^#define ASIZE /;"	d	file:
KEEP_SAMPLES	mem/matmult/fcycmm.c	/^#define KEEP_SAMPLES /;"	d	file:
KEEP_VALS	mem/matmult/fcycmm.c	/^#define KEEP_VALS /;"	d	file:
STRIDE	mem/matmult/fcycmm.c	/^#define STRIDE /;"	d	file:
add_sample	mem/matmult/fcycmm.c	/^void add_sample(double val, int k)$/;"	f
clear	mem/matmult/fcycmm.c	/^static void clear()$/;"	f	file:
err	mem/matmult/fcycmm.c	/^double err(int k)$/;"	f
fcyc	mem/matmult/fcycmm.c	/^double fcyc(test_funct f, int n, int clear_cache)$/;"	f
fcyc_full	mem/matmult/fcycmm.c	/^double fcyc_full(test_funct f, int n, int clear_cache,$/;"	f
get_min	mem/matmult/fcycmm.c	/^double get_min()$/;"	f
has_converged	mem/matmult/fcycmm.c	/^int has_converged(int k_arg, double epsilon_arg, int maxsamples)$/;"	f
init_sampler	mem/matmult/fcycmm.c	/^static void init_sampler(int k, int maxsamples)$/;"	f	file:
samplecount	mem/matmult/fcycmm.c	/^int samplecount = 0;$/;"	v
samples	mem/matmult/fcycmm.c	/^double *samples = NULL;$/;"	v
sink	mem/matmult/fcycmm.c	/^static int sink;$/;"	v	file:
stuff	mem/matmult/fcycmm.c	/^static int stuff[ASIZE];$/;"	v	file:
values	mem/matmult/fcycmm.c	/^static double *values = NULL;$/;"	v	file:
test_funct	mem/matmult/fcycmm.h	/^typedef void (*test_funct)(array, array, array, int); $/;"	t
CLEARCACHE	mem/matmult/mm.c	/^#define CLEARCACHE /;"	d	file:
checkresult	mem/matmult/mm.c	/^void checkresult(array c, int n)$/;"	f
ga	mem/matmult/mm.c	/^array ga, gb, gc;$/;"	v
gb	mem/matmult/mm.c	/^array ga, gb, gc;$/;"	v
gc	mem/matmult/mm.c	/^array ga, gb, gc;$/;"	v
ijk	mem/matmult/mm.c	/^void ijk(array A, array B, array C, int n) $/;"	f
ikj	mem/matmult/mm.c	/^void ikj(array A, array B, array C, int n) $/;"	f
init	mem/matmult/mm.c	/^void init(array a, array b, int n) $/;"	f
jik	mem/matmult/mm.c	/^void jik(array A, array B, array C, int n) $/;"	f
jki	mem/matmult/mm.c	/^void jki(array A, array B, array C, int n)$/;"	f
kij	mem/matmult/mm.c	/^void kij(array A, array B, array C, int n)$/;"	f
kji	mem/matmult/mm.c	/^void kji(array A, array B, array C, int n)$/;"	f
main	mem/matmult/mm.c	/^int main()$/;"	f
printarray	mem/matmult/mm.c	/^void printarray(array a, int n)$/;"	f
reset	mem/matmult/mm.c	/^void reset(array c, int n)$/;"	f
run	mem/matmult/mm.c	/^double run(test_funct f, int n)$/;"	f
INCN	mem/matmult/mm.h	/^#define INCN /;"	d
MAXN	mem/matmult/mm.h	/^#define MAXN /;"	d
MINN	mem/matmult/mm.h	/^#define MINN /;"	d
array	mem/matmult/mm.h	/^typedef double array[MAXN][MAXN+513];$/;"	t
min	mem/matmult/mm.h	/^#define min(/;"	d
CC	mem/memperf/Makefile	/^CC = gcc$/;"	m
DEFINES	mem/memperf/Makefile	/^alpha:		DEFINES = -DALPHACOUNTER -DHWCOUNTER$/;"	m
DEFINES	mem/memperf/Makefile	/^pentium:	DEFINES = -DPENTIUMCOUNTER -DHWCOUNTER$/;"	m
DEFINES	mem/memperf/Makefile	/^pentiumopt:	DEFINES = -DPENTIUMCOUNTER -DHWCOUNTER -DHAVEOPT$/;"	m
DEFINES	mem/memperf/Makefile	/^shmem:		DEFINES = -DSHAREDMEM$/;"	m
LIBRARIES	mem/memperf/Makefile	/^LIBRARIES = -lm$/;"	m
OBJECTS	mem/memperf/Makefile	/^OBJECTS = lcpy.o cpy.o par.o$/;"	m
OBJECTS	mem/memperf/Makefile	/^alpha:		OBJECTS = $(OBJECTS) rtclock.o$/;"	m
OBJECTS	mem/memperf/Makefile	/^pentiumopt:	OBJECTS = $(OBJECTS) cpy_p3opt.o$/;"	m
OPTIONS	mem/memperf/Makefile	/^OPTIONS = -O3 -m32 -static -W -Wall -fomit-frame-pointer $/;"	m
PROGNAME	mem/memperf/Makefile	/^PROGNAME = memperf$/;"	m
PROGNAME	mem/memperf/Makefile	/^shmem:		PROGNAME = $(PROGNAME)_shared$/;"	m
sys_bind_to_cpu	mem/memperf/bind_to_cpu.c	/^asmlinkage int sys_bind_to_cpu(unsigned long mask)$/;"	f
cpy_cs1	mem/memperf/cpy.c	/^int cpy_cs1(double* a,double* c,int l,int mx,int it)$/;"	f
cpy_cs2	mem/memperf/cpy.c	/^int cpy_cs2(double* a,double* c,int l,int mx,int it)        $/;"	f
cpy_cs4	mem/memperf/cpy.c	/^int cpy_cs4(double* a,double* c,int l,int mx,int it)        $/;"	f
cpy_cs8	mem/memperf/cpy.c	/^int cpy_cs8(double* a,double* c,int l,int mx,int it)        $/;"	f
cpy_lc1	mem/memperf/cpy.c	/^int cpy_lc1(double* a,double* c,int l,int mx,int it)        $/;"	f
cpy_lc2	mem/memperf/cpy.c	/^int cpy_lc2(double* a,double* c,int l,int mx,int it)        $/;"	f
cpy_lc4	mem/memperf/cpy.c	/^int cpy_lc4(double* a,double* c,int l,int mx,int it)        $/;"	f
cpy_lc8	mem/memperf/cpy.c	/^int cpy_lc8(double* a,double* c,int l,int mx,int it)        $/;"	f
cpy_ls1	mem/memperf/cpy.c	/^int cpy_ls1(double* a,int l,int mx,int it)$/;"	f
cpy_ls2	mem/memperf/cpy.c	/^int cpy_ls2(double* a,int l,int mx,int it){$/;"	f
cpy_ls4	mem/memperf/cpy.c	/^int cpy_ls4(double* a,int l,int mx,int it)$/;"	f
cpy_ls8	mem/memperf/cpy.c	/^int cpy_ls8(double *a,int l,int mx,int it)       $/;"	f
cpy_vs1	mem/memperf/cpy.c	/^int cpy_vs1(double* a,int l,int mx,int it)$/;"	f
cpy_vs2	mem/memperf/cpy.c	/^int cpy_vs2(double* a,int l,int mx,int it)$/;"	f
cpy_vs4	mem/memperf/cpy.c	/^int cpy_vs4(double* a,int l,int mx,int it)$/;"	f
cpy_vs8	mem/memperf/cpy.c	/^int cpy_vs8(double* a,int l,int mx,int it)$/;"	f
gettime	mem/memperf/cpy.c	/^#define gettime /;"	d	file:
u	mem/memperf/cpy.c	/^double u;$/;"	v
CPY_H	mem/memperf/cpy.h	/^#define CPY_H$/;"	d
CPY_OPT_H	mem/memperf/cpy_opt.h	/^#define CPY_OPT_H$/;"	d
cpy_csopt	mem/memperf/cpy_p3opt.c	/^int cpy_csopt(double* a,double* c,int l,int mx,int it)$/;"	f
cpy_lcopt	mem/memperf/cpy_p3opt.c	/^int cpy_lcopt(double* a,double* c,int l,int mx,int it)$/;"	f
cpy_lsopt	mem/memperf/cpy_p3opt.c	/^int cpy_lsopt(double* a,int l,int mx,int it)$/;"	f
cpy_vsopt	mem/memperf/cpy_p3opt.c	/^int cpy_vsopt(double* a,int l,int mx,int it)$/;"	f
gettime	mem/memperf/cpy_p3opt.c	/^#define gettime /;"	d	file:
u	mem/memperf/cpy_p3opt.c	/^double u;$/;"	v
cpy_cs_r	mem/memperf/cpyr.c	/^int cpy_cs_r(a,c,l,mx,it) \/* a,c changed !!!*\/ \/* remote (MAXREMOTE) *\/$/;"	f
cpy_lc_r	mem/memperf/cpyr.c	/^int cpy_lc_r(a,c,l,mx,it)  \/* remote (MAXREMOTE) *\/$/;"	f
cpy_ls_r	mem/memperf/cpyr.c	/^int cpy_ls_r(a,l,mx,it)$/;"	f
cpy_vs_r	mem/memperf/cpyr.c	/^int cpy_vs_r(a,l,mx,it) \/* remote (MAXREMOTE) *\/$/;"	f
u	mem/memperf/cpyr.c	/^double u;$/;"	v
MAXREMOTE	mem/memperf/cpyr.h	/^#define MAXREMOTE /;"	d
gettimeus	mem/memperf/gettime.h	/^gettimeus (uint32 *hi, uint32 *lo)$/;"	f
subtract64	mem/memperf/gettime.h	/^int subtract64(uint32 hi0, uint32 lo0, uint32 hi1, uint32 lo1 )$/;"	f
uint32	mem/memperf/gettime.h	/^typedef unsigned long uint32;$/;"	t
getclock	mem/memperf/gettimealpha.h	/^extern inline void getclock (uint32 *hi, uint32 *lo)$/;"	f
subtract64	mem/memperf/gettimealpha.h	/^extern inline int subtract64(uint32 hi0, uint32 lo0, uint32 hi1, uint32 lo1 )$/;"	f
uint32	mem/memperf/gettimealpha.h	/^typedef unsigned long uint32;$/;"	t
getcounter	mem/memperf/gettiment.h	/^getcounter (uint32 *hi, uint32 *lo)$/;"	f
subtract64	mem/memperf/gettiment.h	/^int subtract64(uint32 hi0, uint32 lo0, uint32 hi1, uint32 lo1 )$/;"	f
uint32	mem/memperf/gettiment.h	/^typedef unsigned long uint32;$/;"	t
CHART	mem/memperf/lcpy.c	/^#define CHART /;"	d	file:
CHARTOUT	mem/memperf/lcpy.c	/^#define CHARTOUT /;"	d	file:
CHARTREV	mem/memperf/lcpy.c	/^#define CHARTREV /;"	d	file:
DEBUG	mem/memperf/lcpy.c	/^#define DEBUG /;"	d	file:
DEBUGOUT	mem/memperf/lcpy.c	/^#define DEBUGOUT /;"	d	file:
DEBUGP	mem/memperf/lcpy.c	/^#define DEBUGP /;"	d	file:
DEBUGPRINT	mem/memperf/lcpy.c	/^#define DEBUGPRINT /;"	d	file:
DWORD	mem/memperf/lcpy.c	/^#define DWORD /;"	d	file:
KORR	mem/memperf/lcpy.c	/^#define KORR /;"	d	file:
MINRUNSZ	mem/memperf/lcpy.c	/^#define MINRUNSZ /;"	d	file:
MXBLSZ	mem/memperf/lcpy.c	/^#define MXBLSZ /;"	d	file:
MXIT	mem/memperf/lcpy.c	/^#define MXIT /;"	d	file:
MXPROC	mem/memperf/lcpy.c	/^#define MXPROC /;"	d	file:
MXREP	mem/memperf/lcpy.c	/^#define MXREP /;"	d	file:
MXRUNSZ	mem/memperf/lcpy.c	/^#define MXRUNSZ /;"	d	file:
MXSTRDS	mem/memperf/lcpy.c	/^#define MXSTRDS /;"	d	file:
NPES	mem/memperf/lcpy.c	/^#define NPES /;"	d	file:
NROFREP	mem/memperf/lcpy.c	/^#define NROFREP /;"	d	file:
OPTASM	mem/memperf/lcpy.c	/^#define OPTASM /;"	d	file:
OUTLIERLIMIT	mem/memperf/lcpy.c	/^#define OUTLIERLIMIT /;"	d	file:
TIC	mem/memperf/lcpy.c	/^#define TIC /;"	d	file:
VERSION	mem/memperf/lcpy.c	/^#define VERSION /;"	d	file:
WINAPI	mem/memperf/lcpy.c	/^#define WINAPI$/;"	d	file:
__cdecl	mem/memperf/lcpy.c	/^#define __cdecl$/;"	d	file:
analyze_rep	mem/memperf/lcpy.c	/^void analyze_rep(paramT *p) {$/;"	f
barrier	mem/memperf/lcpy.c	/^#define barrier(/;"	d	file:
begin_parallel	mem/memperf/lcpy.c	/^#define begin_parallel$/;"	d	file:
chartrev	mem/memperf/lcpy.c	/^int chartrev;$/;"	v
cpy_csopt	mem/memperf/lcpy.c	/^int cpy_csopt(double* a,double* c,int l,int mx,int it) { return (int) (*a+l+mx+it+*c); }$/;"	f
cpy_lcopt	mem/memperf/lcpy.c	/^int cpy_lcopt(double* a,double* c,int l,int mx,int it) { return (int) (*a+l+mx+it+*c); }$/;"	f
cpy_lsopt	mem/memperf/lcpy.c	/^int cpy_lsopt(double* a,int l,int mx,int it) { return (int) (*a+l+mx+it); }$/;"	f
cpy_vsopt	mem/memperf/lcpy.c	/^int cpy_vsopt(double* a,int l,int mx,int it) { return (int) (*a+l+mx+it); }$/;"	f
currentrep	mem/memperf/lcpy.c	/^	int currentrep;$/;"	m	struct:__anon23	file:
end_parallel	mem/memperf/lcpy.c	/^#define end_parallel(/;"	d	file:
getcpufrequency	mem/memperf/lcpy.c	/^double getcpufrequency()$/;"	f
gettime	mem/memperf/lcpy.c	/^#define gettime /;"	d	file:
main	mem/memperf/lcpy.c	/^int __cdecl main(int argc,char *argv[])$/;"	f
memop	mem/memperf/lcpy.c	/^DWORD WINAPI memop (paramT *p)$/;"	f
minsize	mem/memperf/lcpy.c	/^	int minsize;$/;"	m	struct:__anon23	file:
mode	mem/memperf/lcpy.c	/^	int mode;$/;"	m	struct:__anon23	file:
mxiters	mem/memperf/lcpy.c	/^	int mxiters;$/;"	m	struct:__anon23	file:
mxsize	mem/memperf/lcpy.c	/^	int mxsize;$/;"	m	struct:__anon23	file:
mxstrds	mem/memperf/lcpy.c	/^	int mxstrds;$/;"	m	struct:__anon23	file:
mytime	mem/memperf/lcpy.c	/^#define mytime /;"	d	file:
npes	mem/memperf/lcpy.c	/^	int npes;$/;"	m	struct:__anon23	file:
nrofrep	mem/memperf/lcpy.c	/^int nrofrep = NROFREP;$/;"	v
par_cid	mem/memperf/lcpy.c	/^	int par_cid;$/;"	m	struct:__anon23	file:
paramT	mem/memperf/lcpy.c	/^} paramT;$/;"	t	typeref:struct:__anon23	file:
sem_deinit	mem/memperf/lcpy.c	/^#define sem_deinit(/;"	d	file:
sem_init	mem/memperf/lcpy.c	/^#define sem_init(/;"	d	file:
shared	mem/memperf/lcpy.c	/^double *shared;$/;"	v
strdr	mem/memperf/lcpy.c	/^int strdr[]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,32,64,-1};$/;"	v
tic	mem/memperf/lcpy.c	/^double tic;$/;"	v
useoptasm	mem/memperf/lcpy.c	/^	int useoptasm;$/;"	m	struct:__anon23	file:
cltsc	mem/memperf/p5tsc.h	/^#define cltsc /;"	d
rdpmc	mem/memperf/p5tsc.h	/^rdpmc (uint32 *hi, uint32 *lo)$/;"	f
rdtsc	mem/memperf/p5tsc.h	/^rdtsc (uint32 *hi, uint32 *lo)$/;"	f
spmc	mem/memperf/p5tsc.h	/^spmc (uint32 ecx)$/;"	f
subtract64	mem/memperf/p5tsc.h	/^extern __inline__ int subtract64(uint32 hi0, uint32 lo0, uint32 hi1, uint32 lo1 )$/;"	f
uint32	mem/memperf/p5tsc.h	/^typedef unsigned long uint32;$/;"	t
wrmsr	mem/memperf/p5tsc.h	/^wrmsr (const uint32 msr, uint32 hi, uint32 lo)$/;"	f
barrier	mem/memperf/par.c	/^int barrier() $/;"	f
begin_parallel	mem/memperf/par.c	/^int begin_parallel(n) $/;"	f
end_parallel	mem/memperf/par.c	/^int end_parallel() {$/;"	f
par_cid	mem/memperf/par.c	/^int par_cid;$/;"	v
par_npes	mem/memperf/par.c	/^int par_npes;$/;"	v
par_semid	mem/memperf/par.c	/^int par_semid;$/;"	v
sem_deinit	mem/memperf/par.c	/^int sem_deinit() {$/;"	f
sem_init	mem/memperf/par.c	/^int sem_init() {$/;"	f
sem_p	mem/memperf/par.c	/^int sem_p(s) $/;"	f
sem_v	mem/memperf/par.c	/^int sem_v(s) $/;"	f
rtclock	mem/memperf/rtclock.s	/^rtclock:$/;"	l
wtclock	mem/memperf/rtclock.s	/^wtclock:$/;"	l
N	mem/missrate.c	/^#define N /;"	d	file:
array_t	mem/missrate.c	/^typedef int array_t[N][N];$/;"	t	file:
sumA	mem/missrate.c	/^int sumA(array_t a)$/;"	f
sumB	mem/missrate.c	/^int sumB(array_t a)$/;"	f
sumC	mem/missrate.c	/^int sumC(array_t a)$/;"	f
missrate	mem/missrate2.c	/^void missrate()$/;"	f
missrate	mem/missrate2b.c	/^void missrate()$/;"	f
CC	mem/mountain/Makefile	/^CC = gcc$/;"	m
CFLAGS	mem/mountain/Makefile	/^CFLAGS = -Wall -O3 -D__i386__$/;"	m
MAXBUF	mem/mountain/clock.c	/^#define MAXBUF /;"	d	file:
NEVENT	mem/mountain/clock.c	/^#define NEVENT /;"	d	file:
RECORDTHRESH	mem/mountain/clock.c	/^#define RECORDTHRESH /;"	d	file:
THRESHOLD	mem/mountain/clock.c	/^#define THRESHOLD /;"	d	file:
access_counter	mem/mountain/clock.c	/^void access_counter(unsigned *hi, unsigned *lo)$/;"	f
callibrate	mem/mountain/clock.c	/^static void callibrate(int verbose)$/;"	f	file:
core_mhz	mem/mountain/clock.c	/^double core_mhz(int verbose) {$/;"	f
cpu_ghz	mem/mountain/clock.c	/^double cpu_ghz = 0.0;$/;"	v
cyc_hi	mem/mountain/clock.c	/^static unsigned cyc_hi = 0;$/;"	v	file:
cyc_lo	mem/mountain/clock.c	/^static unsigned cyc_lo = 0;$/;"	v	file:
cyc_per_tick	mem/mountain/clock.c	/^static double cyc_per_tick = 0.0;$/;"	v	file:
get_comp_counter	mem/mountain/clock.c	/^double get_comp_counter() {$/;"	f
get_counter	mem/mountain/clock.c	/^double get_counter()$/;"	f
mhz	mem/mountain/clock.c	/^double mhz(int verbose) {$/;"	f
mhz_full	mem/mountain/clock.c	/^double mhz_full(int verbose, int sleeptime)$/;"	f
ovhd	mem/mountain/clock.c	/^double ovhd()$/;"	f
start_comp_counter	mem/mountain/clock.c	/^void start_comp_counter() {$/;"	f
start_counter	mem/mountain/clock.c	/^void start_counter()$/;"	f
start_tick	mem/mountain/clock.c	/^static clock_t start_tick = 0;$/;"	v	file:
ASIZE	mem/mountain/fcyc2.c	/^#define ASIZE /;"	d	file:
KEEP_SAMPLES	mem/mountain/fcyc2.c	/^#define KEEP_SAMPLES /;"	d	file:
KEEP_VALS	mem/mountain/fcyc2.c	/^#define KEEP_VALS /;"	d	file:
Mhz	mem/mountain/fcyc2.c	/^static double Mhz = 0.0;$/;"	v	file:
NEVENT	mem/mountain/fcyc2.c	/^#define NEVENT /;"	d	file:
RECORDTHRESH	mem/mountain/fcyc2.c	/^#define RECORDTHRESH /;"	d	file:
STRIDE	mem/mountain/fcyc2.c	/^#define STRIDE /;"	d	file:
THRESHOLD	mem/mountain/fcyc2.c	/^#define THRESHOLD /;"	d	file:
add_sample	mem/mountain/fcyc2.c	/^void add_sample(double val, int k)$/;"	f
callibrate	mem/mountain/fcyc2.c	/^static void callibrate(int verbose)$/;"	f	file:
clear	mem/mountain/fcyc2.c	/^static void clear()$/;"	f	file:
cyc_per_tick	mem/mountain/fcyc2.c	/^static double cyc_per_tick = 0.0;$/;"	v	file:
err	mem/mountain/fcyc2.c	/^double err(int k)$/;"	f
fcyc2	mem/mountain/fcyc2.c	/^double fcyc2(test_funct f, int param1, int param2, int clear_cache)$/;"	f
fcyc2_full	mem/mountain/fcyc2.c	/^double fcyc2_full(test_funct f, int param1, int param2, int clear_cache,$/;"	f
fcyc2_full_tod	mem/mountain/fcyc2.c	/^double fcyc2_full_tod(test_funct f, int param1, int param2, int clear_cache,$/;"	f
fcyc2_tod	mem/mountain/fcyc2.c	/^double fcyc2_tod(test_funct f, int param1, int param2, int clear_cache)$/;"	f
get_comp_counter_tod	mem/mountain/fcyc2.c	/^double get_comp_counter_tod() {$/;"	f
get_counter_tod	mem/mountain/fcyc2.c	/^double get_counter_tod()$/;"	f
get_min	mem/mountain/fcyc2.c	/^double get_min()$/;"	f
has_converged	mem/mountain/fcyc2.c	/^int has_converged(int k_arg, double epsilon_arg, int maxsamples)$/;"	f
init_sampler	mem/mountain/fcyc2.c	/^static void init_sampler(int k, int maxsamples)$/;"	f	file:
samplecount	mem/mountain/fcyc2.c	/^int samplecount = 0;$/;"	v
samples	mem/mountain/fcyc2.c	/^double *samples = NULL;$/;"	v
sink	mem/mountain/fcyc2.c	/^static int sink;$/;"	v	file:
start_comp_counter_tod	mem/mountain/fcyc2.c	/^void start_comp_counter_tod() {$/;"	f
start_counter_tod	mem/mountain/fcyc2.c	/^void start_counter_tod()$/;"	f
start_tick	mem/mountain/fcyc2.c	/^static clock_t start_tick = 0;$/;"	v	file:
stuff	mem/mountain/fcyc2.c	/^static int stuff[ASIZE];$/;"	v	file:
tstart	mem/mountain/fcyc2.c	/^static struct timeval tstart;$/;"	v	typeref:struct:timeval	file:
values	mem/mountain/fcyc2.c	/^static double *values = NULL;$/;"	v	file:
test_funct	mem/mountain/fcyc2.h	/^typedef int (*test_funct)(int, int); $/;"	t
MAXBYTES	mem/mountain/mountain.c	/^#define MAXBYTES /;"	d	file:
MAXELEMS	mem/mountain/mountain.c	/^#define MAXELEMS /;"	d	file:
MAXSTRIDE	mem/mountain/mountain.c	/^#define MAXSTRIDE /;"	d	file:
MINBYTES	mem/mountain/mountain.c	/^#define MINBYTES /;"	d	file:
data	mem/mountain/mountain.c	/^long data[MAXELEMS];      \/* The global array we'll be traversing *\/$/;"	v
init_data	mem/mountain/mountain.c	/^void init_data(long *data, int n)$/;"	f
main	mem/mountain/mountain.c	/^int main()$/;"	f
run	mem/mountain/mountain.c	/^double run(int size, int stride, double Mhz)$/;"	f
test	mem/mountain/mountain.c	/^int test(int elems, int stride)$/;"	f
CC	mem/mountain1x1/Makefile	/^CC = gcc$/;"	m
CFLAGS	mem/mountain1x1/Makefile	/^CFLAGS = -Wall -O3 -D__i386__$/;"	m
MAXBUF	mem/mountain1x1/clock.c	/^#define MAXBUF /;"	d	file:
NEVENT	mem/mountain1x1/clock.c	/^#define NEVENT /;"	d	file:
RECORDTHRESH	mem/mountain1x1/clock.c	/^#define RECORDTHRESH /;"	d	file:
THRESHOLD	mem/mountain1x1/clock.c	/^#define THRESHOLD /;"	d	file:
access_counter	mem/mountain1x1/clock.c	/^void access_counter(unsigned *hi, unsigned *lo)$/;"	f
callibrate	mem/mountain1x1/clock.c	/^static void callibrate(int verbose)$/;"	f	file:
core_mhz	mem/mountain1x1/clock.c	/^double core_mhz(int verbose) {$/;"	f
cpu_ghz	mem/mountain1x1/clock.c	/^double cpu_ghz = 0.0;$/;"	v
cyc_hi	mem/mountain1x1/clock.c	/^static unsigned cyc_hi = 0;$/;"	v	file:
cyc_lo	mem/mountain1x1/clock.c	/^static unsigned cyc_lo = 0;$/;"	v	file:
cyc_per_tick	mem/mountain1x1/clock.c	/^static double cyc_per_tick = 0.0;$/;"	v	file:
get_comp_counter	mem/mountain1x1/clock.c	/^double get_comp_counter() {$/;"	f
get_counter	mem/mountain1x1/clock.c	/^double get_counter()$/;"	f
mhz	mem/mountain1x1/clock.c	/^double mhz(int verbose) {$/;"	f
mhz_full	mem/mountain1x1/clock.c	/^double mhz_full(int verbose, int sleeptime)$/;"	f
ovhd	mem/mountain1x1/clock.c	/^double ovhd()$/;"	f
start_comp_counter	mem/mountain1x1/clock.c	/^void start_comp_counter() {$/;"	f
start_counter	mem/mountain1x1/clock.c	/^void start_counter()$/;"	f
start_tick	mem/mountain1x1/clock.c	/^static clock_t start_tick = 0;$/;"	v	file:
ASIZE	mem/mountain1x1/fcyc2.c	/^#define ASIZE /;"	d	file:
KEEP_SAMPLES	mem/mountain1x1/fcyc2.c	/^#define KEEP_SAMPLES /;"	d	file:
KEEP_VALS	mem/mountain1x1/fcyc2.c	/^#define KEEP_VALS /;"	d	file:
Mhz	mem/mountain1x1/fcyc2.c	/^static double Mhz = 0.0;$/;"	v	file:
NEVENT	mem/mountain1x1/fcyc2.c	/^#define NEVENT /;"	d	file:
RECORDTHRESH	mem/mountain1x1/fcyc2.c	/^#define RECORDTHRESH /;"	d	file:
STRIDE	mem/mountain1x1/fcyc2.c	/^#define STRIDE /;"	d	file:
THRESHOLD	mem/mountain1x1/fcyc2.c	/^#define THRESHOLD /;"	d	file:
add_sample	mem/mountain1x1/fcyc2.c	/^void add_sample(double val, int k)$/;"	f
callibrate	mem/mountain1x1/fcyc2.c	/^static void callibrate(int verbose)$/;"	f	file:
clear	mem/mountain1x1/fcyc2.c	/^static void clear()$/;"	f	file:
cyc_per_tick	mem/mountain1x1/fcyc2.c	/^static double cyc_per_tick = 0.0;$/;"	v	file:
err	mem/mountain1x1/fcyc2.c	/^double err(int k)$/;"	f
fcyc2	mem/mountain1x1/fcyc2.c	/^double fcyc2(test_funct f, int param1, int param2, int clear_cache)$/;"	f
fcyc2_full	mem/mountain1x1/fcyc2.c	/^double fcyc2_full(test_funct f, int param1, int param2, int clear_cache,$/;"	f
fcyc2_full_tod	mem/mountain1x1/fcyc2.c	/^double fcyc2_full_tod(test_funct f, int param1, int param2, int clear_cache,$/;"	f
fcyc2_tod	mem/mountain1x1/fcyc2.c	/^double fcyc2_tod(test_funct f, int param1, int param2, int clear_cache)$/;"	f
get_comp_counter_tod	mem/mountain1x1/fcyc2.c	/^double get_comp_counter_tod() {$/;"	f
get_counter_tod	mem/mountain1x1/fcyc2.c	/^double get_counter_tod()$/;"	f
get_min	mem/mountain1x1/fcyc2.c	/^double get_min()$/;"	f
has_converged	mem/mountain1x1/fcyc2.c	/^int has_converged(int k_arg, double epsilon_arg, int maxsamples)$/;"	f
init_sampler	mem/mountain1x1/fcyc2.c	/^static void init_sampler(int k, int maxsamples)$/;"	f	file:
samplecount	mem/mountain1x1/fcyc2.c	/^int samplecount = 0;$/;"	v
samples	mem/mountain1x1/fcyc2.c	/^double *samples = NULL;$/;"	v
sink	mem/mountain1x1/fcyc2.c	/^static int sink;$/;"	v	file:
start_comp_counter_tod	mem/mountain1x1/fcyc2.c	/^void start_comp_counter_tod() {$/;"	f
start_counter_tod	mem/mountain1x1/fcyc2.c	/^void start_counter_tod()$/;"	f
start_tick	mem/mountain1x1/fcyc2.c	/^static clock_t start_tick = 0;$/;"	v	file:
stuff	mem/mountain1x1/fcyc2.c	/^static int stuff[ASIZE];$/;"	v	file:
tstart	mem/mountain1x1/fcyc2.c	/^static struct timeval tstart;$/;"	v	typeref:struct:timeval	file:
values	mem/mountain1x1/fcyc2.c	/^static double *values = NULL;$/;"	v	file:
test_funct	mem/mountain1x1/fcyc2.h	/^typedef int (*test_funct)(int, int); $/;"	t
MAXBYTES	mem/mountain1x1/mountain.c	/^#define MAXBYTES /;"	d	file:
MAXELEMS	mem/mountain1x1/mountain.c	/^#define MAXELEMS /;"	d	file:
MAXSTRIDE	mem/mountain1x1/mountain.c	/^#define MAXSTRIDE /;"	d	file:
MINBYTES	mem/mountain1x1/mountain.c	/^#define MINBYTES /;"	d	file:
data	mem/mountain1x1/mountain.c	/^long data[MAXELEMS];      \/* The global array we'll be traversing *\/$/;"	v
init_data	mem/mountain1x1/mountain.c	/^void init_data(long *data, int n)$/;"	f
main	mem/mountain1x1/mountain.c	/^int main()$/;"	f
run	mem/mountain1x1/mountain.c	/^double run(int size, int stride, double Mhz)$/;"	f
test	mem/mountain1x1/mountain.c	/^int test(int elems, int stride) \/* The test function *\/$/;"	f
col_convert	mem/optlab.c	/^void col_convert(int *G, int dim) {$/;"	f
transpose	mem/optlab.c	/^void transpose(int *dst, int *src, int dim)$/;"	f
c	mem/postit.c	/^    int c;$/;"	m	struct:point_color	file:
i	mem/postit.c	/^int i, j;$/;"	v
j	mem/postit.c	/^int i, j;$/;"	v
k	mem/postit.c	/^    int k;$/;"	m	struct:point_color	file:
loops	mem/postit.c	/^void loops() $/;"	f
m	mem/postit.c	/^    int m;$/;"	m	struct:point_color	file:
point_color	mem/postit.c	/^struct point_color {$/;"	s	file:
square	mem/postit.c	/^struct point_color square[16][16];$/;"	v	typeref:struct:point_color
y	mem/postit.c	/^    int y;$/;"	m	struct:point_color	file:
algae_position	mem/simaquarium.c	/^struct algae_position {$/;"	s	file:
grid	mem/simaquarium.c	/^struct algae_position grid[16][16];$/;"	v	typeref:struct:algae_position
i	mem/simaquarium.c	/^int i, j;$/;"	v
j	mem/simaquarium.c	/^int i, j;$/;"	v
loops	mem/simaquarium.c	/^void loops() $/;"	f
total_x	mem/simaquarium.c	/^int total_x = 0, total_y = 0;$/;"	v
total_y	mem/simaquarium.c	/^int total_x = 0, total_y = 0;$/;"	v
x	mem/simaquarium.c	/^    int x;$/;"	m	struct:algae_position	file:
y	mem/simaquarium.c	/^    int y;$/;"	m	struct:algae_position	file:
N	mem/sumarray3d-ans.c	/^#define N /;"	d	file:
a	mem/sumarray3d-ans.c	/^int a[N][N][N];$/;"	v
main	mem/sumarray3d-ans.c	/^int main()$/;"	f
sumarray3d	mem/sumarray3d-ans.c	/^int sumarray3d(int a[N][N][N]) $/;"	f
N	mem/sumarray3d.c	/^#define N /;"	d	file:
a	mem/sumarray3d.c	/^int a[N][N][N];$/;"	v
main	mem/sumarray3d.c	/^int main()$/;"	f
sumarray3d	mem/sumarray3d.c	/^int sumarray3d(int a[N][N][N]) $/;"	f
M	mem/sumarraycols.c	/^#define M /;"	d	file:
N	mem/sumarraycols.c	/^#define N /;"	d	file:
a	mem/sumarraycols.c	/^int a[M][N];$/;"	v
main	mem/sumarraycols.c	/^int main()$/;"	f
sumarraycols	mem/sumarraycols.c	/^int sumarraycols(int a[M][N]) $/;"	f
M	mem/sumarrayrows.c	/^#define M /;"	d	file:
N	mem/sumarrayrows.c	/^#define N /;"	d	file:
a	mem/sumarrayrows.c	/^int a[M][N];$/;"	v
main	mem/sumarrayrows.c	/^int main()$/;"	f
sumarrayrows	mem/sumarrayrows.c	/^int sumarrayrows(int a[M][N]) $/;"	f
N	mem/sumvec.c	/^#define N /;"	d	file:
main	mem/sumvec.c	/^int main()$/;"	f
sumvec	mem/sumvec.c	/^int sumvec(int v[N]) $/;"	f
v	mem/sumvec.c	/^int v[N];$/;"	v
array	mem/trans.c	/^typedef int array[2][2];$/;"	t	file:
transpose	mem/trans.c	/^void transpose(array dst, array src) {$/;"	f
array	mem/transpose1.c	/^typedef int array[2][2];$/;"	t	file:
transpose1	mem/transpose1.c	/^void transpose1(array dst, array src) $/;"	f
array	mem/transpose2.c	/^typedef int array[4][4];$/;"	t	file:
transpose2	mem/transpose2.c	/^void transpose2(array dst, array src) $/;"	f
array	mem/transpose2b.c	/^typedef int array[4][4];$/;"	t	file:
transpose2	mem/transpose2b.c	/^void transpose2(array dst, array src) $/;"	f
CC	netp/Makefile	/^CC = gcc$/;"	m
CFLAGS	netp/Makefile	/^CFLAGS = -Wall -O2 -I $(CSAPP_INC) -I .$/;"	m
CSAPP_INC	netp/Makefile	/^CSAPP_INC = ..\/include$/;"	m
CSAPP_SRC	netp/Makefile	/^CSAPP_SRC = ..\/src$/;"	m
LDLIBS	netp/Makefile	/^LDLIBS = -lpthread$/;"	m
PROGS	netp/Makefile	/^PROGS =	echo.o\\$/;"	m
main	netp/dd2hex.c	/^int main(int argc, char **argv) $/;"	f
echo	netp/echo.c	/^void echo(int connfd) $/;"	f
main	netp/echoclient.c	/^int main(int argc, char **argv) $/;"	f
main	netp/echoserveri.c	/^int main(int argc, char **argv) $/;"	f
main	netp/hex2dd.c	/^int main(int argc, char **argv) $/;"	f
main	netp/hostinfo-ntop.c	/^int main(int argc, char **argv) $/;"	f
main	netp/hostinfo.c	/^int main(int argc, char **argv) $/;"	f
fragments	netp/netpfragments.c	/^void fragments()$/;"	f
CC	netp/tiny/Makefile	/^CC = gcc$/;"	m
CFLAGS	netp/tiny/Makefile	/^CFLAGS = -O2 -Wall -I .$/;"	m
LIB	netp/tiny/Makefile	/^LIB = -lpthread$/;"	m
CC	netp/tiny/cgi-bin/Makefile	/^CC = gcc$/;"	m
CFLAGS	netp/tiny/cgi-bin/Makefile	/^CFLAGS = -O2 -Wall -I ..$/;"	m
main	netp/tiny/cgi-bin/adder.c	/^int main(void) {$/;"	f
Accept	netp/tiny/csapp.c	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen) $/;"	f
Alarm	netp/tiny/csapp.c	/^unsigned int Alarm(unsigned int seconds) {$/;"	f
Bind	netp/tiny/csapp.c	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen) $/;"	f
Calloc	netp/tiny/csapp.c	/^void *Calloc(size_t nmemb, size_t size) $/;"	f
Close	netp/tiny/csapp.c	/^void Close(int fd) $/;"	f
Closedir	netp/tiny/csapp.c	/^int Closedir(DIR *dirp) $/;"	f
Connect	netp/tiny/csapp.c	/^void Connect(int sockfd, struct sockaddr *serv_addr, int addrlen) $/;"	f
Dup2	netp/tiny/csapp.c	/^int Dup2(int fd1, int fd2) $/;"	f
Execve	netp/tiny/csapp.c	/^void Execve(const char *filename, char *const argv[], char *const envp[]) $/;"	f
Fclose	netp/tiny/csapp.c	/^void Fclose(FILE *fp) $/;"	f
Fdopen	netp/tiny/csapp.c	/^FILE *Fdopen(int fd, const char *type) $/;"	f
Fgets	netp/tiny/csapp.c	/^char *Fgets(char *ptr, int n, FILE *stream) $/;"	f
Fopen	netp/tiny/csapp.c	/^FILE *Fopen(const char *filename, const char *mode) $/;"	f
Fork	netp/tiny/csapp.c	/^pid_t Fork(void) $/;"	f
Fputs	netp/tiny/csapp.c	/^void Fputs(const char *ptr, FILE *stream) $/;"	f
Fread	netp/tiny/csapp.c	/^size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Free	netp/tiny/csapp.c	/^void Free(void *ptr) $/;"	f
Freeaddrinfo	netp/tiny/csapp.c	/^void Freeaddrinfo(struct addrinfo *res)$/;"	f
Fstat	netp/tiny/csapp.c	/^void Fstat(int fd, struct stat *buf) $/;"	f
Fwrite	netp/tiny/csapp.c	/^void Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Getaddrinfo	netp/tiny/csapp.c	/^void Getaddrinfo(const char *node, const char *service, $/;"	f
Gethostbyaddr	netp/tiny/csapp.c	/^struct hostent *Gethostbyaddr(const char *addr, int len, int type) $/;"	f
Gethostbyname	netp/tiny/csapp.c	/^struct hostent *Gethostbyname(const char *name) $/;"	f
Getnameinfo	netp/tiny/csapp.c	/^void Getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, $/;"	f
Getpgrp	netp/tiny/csapp.c	/^pid_t Getpgrp(void) {$/;"	f
Inet_ntop	netp/tiny/csapp.c	/^void Inet_ntop(int af, const void *src, char *dst, socklen_t size)$/;"	f
Inet_pton	netp/tiny/csapp.c	/^void Inet_pton(int af, const char *src, void *dst) $/;"	f
Kill	netp/tiny/csapp.c	/^void Kill(pid_t pid, int signum) $/;"	f
Listen	netp/tiny/csapp.c	/^void Listen(int s, int backlog) $/;"	f
Lseek	netp/tiny/csapp.c	/^off_t Lseek(int fildes, off_t offset, int whence) $/;"	f
Malloc	netp/tiny/csapp.c	/^void *Malloc(size_t size) $/;"	f
Mmap	netp/tiny/csapp.c	/^void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset) $/;"	f
Munmap	netp/tiny/csapp.c	/^void Munmap(void *start, size_t length) $/;"	f
Open	netp/tiny/csapp.c	/^int Open(const char *pathname, int flags, mode_t mode) $/;"	f
Open_clientfd	netp/tiny/csapp.c	/^int Open_clientfd(char *hostname, char *port) $/;"	f
Open_listenfd	netp/tiny/csapp.c	/^int Open_listenfd(char *port) $/;"	f
Opendir	netp/tiny/csapp.c	/^DIR *Opendir(const char *name) $/;"	f
P	netp/tiny/csapp.c	/^void P(sem_t *sem) $/;"	f
Pause	netp/tiny/csapp.c	/^void Pause() $/;"	f
Pthread_cancel	netp/tiny/csapp.c	/^void Pthread_cancel(pthread_t tid) {$/;"	f
Pthread_create	netp/tiny/csapp.c	/^void Pthread_create(pthread_t *tidp, pthread_attr_t *attrp, $/;"	f
Pthread_detach	netp/tiny/csapp.c	/^void Pthread_detach(pthread_t tid) {$/;"	f
Pthread_exit	netp/tiny/csapp.c	/^void Pthread_exit(void *retval) {$/;"	f
Pthread_join	netp/tiny/csapp.c	/^void Pthread_join(pthread_t tid, void **thread_return) {$/;"	f
Pthread_once	netp/tiny/csapp.c	/^void Pthread_once(pthread_once_t *once_control, void (*init_function)()) {$/;"	f
Pthread_self	netp/tiny/csapp.c	/^pthread_t Pthread_self(void) {$/;"	f
Read	netp/tiny/csapp.c	/^ssize_t Read(int fd, void *buf, size_t count) $/;"	f
Readdir	netp/tiny/csapp.c	/^struct dirent *Readdir(DIR *dirp)$/;"	f
Realloc	netp/tiny/csapp.c	/^void *Realloc(void *ptr, size_t size) $/;"	f
Rio_readinitb	netp/tiny/csapp.c	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f
Rio_readlineb	netp/tiny/csapp.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
Rio_readn	netp/tiny/csapp.c	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes) $/;"	f
Rio_readnb	netp/tiny/csapp.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
Rio_writen	netp/tiny/csapp.c	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
Select	netp/tiny/csapp.c	/^int Select(int  n, fd_set *readfds, fd_set *writefds,$/;"	f
Sem_init	netp/tiny/csapp.c	/^void Sem_init(sem_t *sem, int pshared, unsigned int value) $/;"	f
Setpgid	netp/tiny/csapp.c	/^void Setpgid(pid_t pid, pid_t pgid) {$/;"	f
Setsockopt	netp/tiny/csapp.c	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen) $/;"	f
Sigaddset	netp/tiny/csapp.c	/^void Sigaddset(sigset_t *set, int signum)$/;"	f
Sigdelset	netp/tiny/csapp.c	/^void Sigdelset(sigset_t *set, int signum)$/;"	f
Sigemptyset	netp/tiny/csapp.c	/^void Sigemptyset(sigset_t *set)$/;"	f
Sigfillset	netp/tiny/csapp.c	/^void Sigfillset(sigset_t *set)$/;"	f
Sigismember	netp/tiny/csapp.c	/^int Sigismember(const sigset_t *set, int signum)$/;"	f
Signal	netp/tiny/csapp.c	/^handler_t *Signal(int signum, handler_t *handler) $/;"	f
Sigprocmask	netp/tiny/csapp.c	/^void Sigprocmask(int how, const sigset_t *set, sigset_t *oldset)$/;"	f
Sigsuspend	netp/tiny/csapp.c	/^int Sigsuspend(const sigset_t *set)$/;"	f
Sio_error	netp/tiny/csapp.c	/^void Sio_error(char s[])$/;"	f
Sio_putl	netp/tiny/csapp.c	/^ssize_t Sio_putl(long v)$/;"	f
Sio_puts	netp/tiny/csapp.c	/^ssize_t Sio_puts(char s[])$/;"	f
Sleep	netp/tiny/csapp.c	/^unsigned int Sleep(unsigned int secs) $/;"	f
Socket	netp/tiny/csapp.c	/^int Socket(int domain, int type, int protocol) $/;"	f
Stat	netp/tiny/csapp.c	/^void Stat(const char *filename, struct stat *buf) $/;"	f
V	netp/tiny/csapp.c	/^void V(sem_t *sem) $/;"	f
Wait	netp/tiny/csapp.c	/^pid_t Wait(int *status) $/;"	f
Waitpid	netp/tiny/csapp.c	/^pid_t Waitpid(pid_t pid, int *iptr, int options) $/;"	f
Write	netp/tiny/csapp.c	/^ssize_t Write(int fd, const void *buf, size_t count) $/;"	f
app_error	netp/tiny/csapp.c	/^void app_error(char *msg) \/* Application error *\/$/;"	f
dns_error	netp/tiny/csapp.c	/^void dns_error(char *msg)$/;"	f
gai_error	netp/tiny/csapp.c	/^void gai_error(int code, char *msg) \/* Getaddrinfo-style error *\/$/;"	f
open_clientfd	netp/tiny/csapp.c	/^int open_clientfd(char *hostname, char *port) {$/;"	f
open_listenfd	netp/tiny/csapp.c	/^int open_listenfd(char *port) $/;"	f
posix_error	netp/tiny/csapp.c	/^void posix_error(int code, char *msg) \/* Posix-style error *\/$/;"	f
rio_read	netp/tiny/csapp.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	file:
rio_readinitb	netp/tiny/csapp.c	/^void rio_readinitb(rio_t *rp, int fd) $/;"	f
rio_readlineb	netp/tiny/csapp.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
rio_readn	netp/tiny/csapp.c	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) $/;"	f
rio_readnb	netp/tiny/csapp.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
rio_writen	netp/tiny/csapp.c	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
sio_error	netp/tiny/csapp.c	/^void sio_error(char s[]) \/* Put error message and exit *\/$/;"	f
sio_ltoa	netp/tiny/csapp.c	/^static void sio_ltoa(long v, char s[], int b) $/;"	f	file:
sio_putl	netp/tiny/csapp.c	/^ssize_t sio_putl(long v) \/* Put long *\/$/;"	f
sio_puts	netp/tiny/csapp.c	/^ssize_t sio_puts(char s[]) \/* Put string *\/$/;"	f
sio_reverse	netp/tiny/csapp.c	/^static void sio_reverse(char s[])$/;"	f	file:
sio_strlen	netp/tiny/csapp.c	/^static size_t sio_strlen(char s[])$/;"	f	file:
unix_error	netp/tiny/csapp.c	/^void unix_error(char *msg) \/* Unix-style error *\/$/;"	f
DEF_MODE	netp/tiny/csapp.h	/^#define DEF_MODE /;"	d
DEF_UMASK	netp/tiny/csapp.h	/^#define DEF_UMASK /;"	d
LISTENQ	netp/tiny/csapp.h	/^#define LISTENQ /;"	d
MAXBUF	netp/tiny/csapp.h	/^#define MAXBUF /;"	d
MAXLINE	netp/tiny/csapp.h	/^#define	MAXLINE	/;"	d
RIO_BUFSIZE	netp/tiny/csapp.h	/^#define RIO_BUFSIZE /;"	d
SA	netp/tiny/csapp.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
__CSAPP_H__	netp/tiny/csapp.h	/^#define __CSAPP_H__$/;"	d
handler_t	netp/tiny/csapp.h	/^typedef void handler_t(int);$/;"	t
rio_buf	netp/tiny/csapp.h	/^    char rio_buf[RIO_BUFSIZE]; \/* Internal buffer *\/$/;"	m	struct:__anon24
rio_bufptr	netp/tiny/csapp.h	/^    char *rio_bufptr;          \/* Next unread byte in internal buf *\/$/;"	m	struct:__anon24
rio_cnt	netp/tiny/csapp.h	/^    int rio_cnt;               \/* Unread bytes in internal buf *\/$/;"	m	struct:__anon24
rio_fd	netp/tiny/csapp.h	/^    int rio_fd;                \/* Descriptor for this internal buf *\/$/;"	m	struct:__anon24
rio_t	netp/tiny/csapp.h	/^} rio_t;$/;"	t	typeref:struct:__anon24
clienterror	netp/tiny/tiny.c	/^void clienterror(int fd, char *cause, char *errnum, $/;"	f
doit	netp/tiny/tiny.c	/^void doit(int fd) $/;"	f
get_filetype	netp/tiny/tiny.c	/^void get_filetype(char *filename, char *filetype) $/;"	f
main	netp/tiny/tiny.c	/^int main(int argc, char **argv) $/;"	f
parse_uri	netp/tiny/tiny.c	/^int parse_uri(char *uri, char *filename, char *cgiargs) $/;"	f
read_requesthdrs	netp/tiny/tiny.c	/^void read_requesthdrs(rio_t *rp) $/;"	f
serve_dynamic	netp/tiny/tiny.c	/^void serve_dynamic(int fd, char *filename, char *cgiargs) $/;"	f
serve_static	netp/tiny/tiny.c	/^void serve_static(int fd, char *filename, int filesize) $/;"	f
BXTR	opt/Makefile	/^BXTR = .\/bxtr.pl$/;"	m
CC	opt/Makefile	/^CC = gcc$/;"	m
CFLAGS	opt/Makefile	/^CFLAGS = $(MCFLAGS) -m$(WSIZE)$/;"	m
F386	opt/Makefile	/^F386 = -march=i386$/;"	m
F686	opt/Makefile	/^F686 = -march=i686$/;"	m
GETASM	opt/Makefile	/^GETASM = ..\/getasmfun.pl$/;"	m
GFLAGS	opt/Makefile	/^GFLAGS = -pg $/;"	m
INC	opt/Makefile	/^INC = ..\/include$/;"	m
LIB	opt/Makefile	/^LIB = ..\/lib$/;"	m
LIBCSAPP	opt/Makefile	/^LIBCSAPP = $(LIB)\/libcsapp$(WSIZE).a -lrt$/;"	m
MACHINE	opt/Makefile	/^MACHINE=machine$/;"	m
MCFLAGS	opt/Makefile	/^MCFLAGS = -g -Wall -I. -I$(INC) -mavx2 -mfma$/;"	m
MULTIRUN	opt/Makefile	/^MULTIRUN = .\/multirun.pl -n $(RUNCNT) -p $(RUNPOS)$/;"	m
OPTLEVEL	opt/Makefile	/^OPTLEVEL = 1$/;"	m
PROGS	opt/Makefile	/^PROGS = isbench\\$/;"	m
RESULTS	opt/Makefile	/^RESULTS=results$/;"	m
RUNCNT	opt/Makefile	/^RUNCNT = 50$/;"	m
RUNPOS	opt/Makefile	/^RUNPOS = 0.8$/;"	m
TABULATE	opt/Makefile	/^TABULATE = .\/tabulate.pl$/;"	m
VXTR	opt/Makefile	/^VXTR = .\/vxtr.pl$/;"	m
WSIZE	opt/Makefile	/^WSIZE = 64$/;"	m
CNT	opt/benchmark-ncpe.c	/^#define CNT /;"	d	file:
MAX_BENCHMARKS	opt/benchmark-ncpe.c	/^#define MAX_BENCHMARKS /;"	d	file:
add_combiner	opt/benchmark-ncpe.c	/^void add_combiner(combiner f, combiner fc, char *description) {$/;"	f
benchmark_count	opt/benchmark-ncpe.c	/^static int benchmark_count = 0;$/;"	v	file:
benchmarks	opt/benchmark-ncpe.c	/^} benchmarks[MAX_BENCHMARKS];$/;"	v	typeref:struct:__anon25	file:
cfunct	opt/benchmark-ncpe.c	/^    combiner cfunct;$/;"	m	struct:__anon25	file:
checkfunct	opt/benchmark-ncpe.c	/^    combiner checkfunct;$/;"	m	struct:__anon25	file:
combine_result	opt/benchmark-ncpe.c	/^static data_t combine_result;$/;"	v	file:
current_benchmark	opt/benchmark-ncpe.c	/^static int current_benchmark = 0;$/;"	v	file:
data	opt/benchmark-ncpe.c	/^static vec_ptr data;$/;"	v	file:
description	opt/benchmark-ncpe.c	/^    char *description;$/;"	m	struct:__anon25	file:
main	opt/benchmark-ncpe.c	/^int main(int argc, char *argv[])$/;"	f
run	opt/benchmark-ncpe.c	/^void run(long *junk) {$/;"	f
run_test	opt/benchmark-ncpe.c	/^static void run_test(int bench_index, int cnt) {$/;"	f	file:
setup	opt/benchmark-ncpe.c	/^static void setup(int cnt)$/;"	f	file:
sink	opt/benchmark-ncpe.c	/^volatile data_t sink; $/;"	v
ASIZE	opt/benchmark.c	/^#define ASIZE /;"	d	file:
MAX_BENCHMARKS	opt/benchmark.c	/^#define MAX_BENCHMARKS /;"	d	file:
SHORT	opt/benchmark.c	/^#define SHORT /;"	d	file:
add_combiner	opt/benchmark.c	/^void add_combiner(combiner f, combiner fc, char *description) {$/;"	f
benchmark_count	opt/benchmark.c	/^static long benchmark_count = 0;$/;"	v	file:
benchmarks	opt/benchmark.c	/^} benchmarks[MAX_BENCHMARKS];$/;"	v	typeref:struct:__anon26	file:
cfunct	opt/benchmark.c	/^    combiner cfunct;$/;"	m	struct:__anon26	file:
checkfunct	opt/benchmark.c	/^    combiner checkfunct;$/;"	m	struct:__anon26	file:
combine_result	opt/benchmark.c	/^static data_t combine_result;$/;"	v	file:
cpe	opt/benchmark.c	/^    double cpe;$/;"	m	struct:__anon26	file:
current_benchmark	opt/benchmark.c	/^static long current_benchmark = 0;$/;"	v	file:
data	opt/benchmark.c	/^static vec_ptr data;$/;"	v	file:
description	opt/benchmark.c	/^    char *description;$/;"	m	struct:__anon26	file:
log_combiner	opt/benchmark.c	/^void log_combiner(combiner f, double fast_cpe, double slow_cpe) {$/;"	f
log_combiner_fun	opt/benchmark.c	/^combiner log_combiner_fun = NULL;$/;"	v
log_fast_cpe	opt/benchmark.c	/^double log_fast_cpe = 1000.0;$/;"	v
log_fast_name	opt/benchmark.c	/^char *log_fast_name = "benchmark-log-fast.txt";$/;"	v
log_name	opt/benchmark.c	/^char *log_name = "benchmark-log.txt";$/;"	v
log_slow_cpe	opt/benchmark.c	/^double log_slow_cpe = 0.0;$/;"	v
log_slow_name	opt/benchmark.c	/^char *log_slow_name = "benchmark-log-slow.txt";$/;"	v
main	opt/benchmark.c	/^int main()$/;"	f
run	opt/benchmark.c	/^void run(long cnt) {$/;"	f
run_test	opt/benchmark.c	/^static void run_test(long bench_index) {$/;"	f	file:
setup	opt/benchmark.c	/^static void setup()$/;"	f	file:
sink	opt/benchmark.c	/^volatile data_t sink; $/;"	v
LEN	opt/best.c	/^#define LEN /;"	d	file:
best1	opt/best.c	/^void best1(int *data, int n, int find_max, int *resultp)$/;"	f
best2	opt/best.c	/^void best2(int *data, int n, int find_max, int *resultp)$/;"	f
best3	opt/best.c	/^void best3(int *data, int n, int find_max, int *resultp)$/;"	f
best4	opt/best.c	/^void best4(int *data, int n, int find_max, int *resultp)$/;"	f
best5	opt/best.c	/^void best5(int *data, int n, int find_max, int *resultp)$/;"	f
best6	opt/best.c	/^void best6(int *data, int n, int find_max, int *resultp)$/;"	f
best7	opt/best.c	/^void best7(int *data, int n, int find_max, int *resultp)$/;"	f
init	opt/best.c	/^static void init() {$/;"	f	file:
random_data	opt/best.c	/^int random_data[LEN];$/;"	v
random_init	opt/best.c	/^static void random_init() {$/;"	f	file:
ranminmax_data	opt/best.c	/^int ranminmax_data[LEN];$/;"	v
ranminmax_init	opt/best.c	/^static void ranminmax_init() {$/;"	f	file:
LEN	opt/bubble.c	/^#define LEN /;"	d	file:
a0	opt/bubble.c	/^int a0[LEN], a1[LEN], a2[LEN];$/;"	v
a1	opt/bubble.c	/^int a0[LEN], a1[LEN], a2[LEN];$/;"	v
a2	opt/bubble.c	/^int a0[LEN], a1[LEN], a2[LEN];$/;"	v
bubble1	opt/bubble.c	/^void bubble1(int a[], int n) {$/;"	f
bubble2	opt/bubble.c	/^void bubble2(int a[], int n) {$/;"	f
bubcnt	opt/bubble.c	/^int bubcnt(int a[], int n) {$/;"	f
init	opt/bubble.c	/^void init(unsigned seed) {$/;"	f
main	opt/bubble.c	/^int main(int argc, char *argv[]) {$/;"	f
run	opt/bubble.c	/^void run(int len, int trials, unsigned seed) {$/;"	f
show	opt/bubble.c	/^void show(char *label, int a[], int n) {$/;"	f
combine5px8	opt/combine-ans.c	/^void combine5px8(vec_ptr v, data_t *dest)$/;"	f
combine5px8_descr	opt/combine-ans.c	/^char combine5px8_descr[] = "GNU pointer code, unrolled by 8";$/;"	v
register_combiners	opt/combine-ans.c	/^void register_combiners(void)$/;"	f
VBYTES	opt/combine.c	/^#define VBYTES /;"	d	file:
VSIZE	opt/combine.c	/^#define VSIZE /;"	d	file:
combine1	opt/combine.c	/^void combine1(vec_ptr v, data_t *dest)$/;"	f
combine1_descr	opt/combine.c	/^char combine1_descr[] = "combine1: Maximum use of data abstraction";$/;"	v
combine2	opt/combine.c	/^void combine2(vec_ptr v, data_t *dest)$/;"	f
combine2_descr	opt/combine.c	/^char combine2_descr[] = "combine2: Take vec_length() out of loop";$/;"	v
combine3	opt/combine.c	/^void combine3(vec_ptr v, data_t *dest)$/;"	f
combine3_descr	opt/combine.c	/^char combine3_descr[] = "combine3: Array reference to vector data";$/;"	v
combine3w	opt/combine.c	/^void combine3w(vec_ptr v, data_t *dest)$/;"	f
combine3w_descr	opt/combine.c	/^char combine3w_descr[] = "combine3w: Update *dest within loop only with write";$/;"	v
combine4	opt/combine.c	/^void combine4(vec_ptr v, data_t *dest)$/;"	f
combine4_descr	opt/combine.c	/^char combine4_descr[] = "combine4: Array reference, accumulate in temporary";$/;"	v
combine4b	opt/combine.c	/^void combine4b(vec_ptr v, data_t *dest)$/;"	f
combine4b_descr	opt/combine.c	/^char combine4b_descr[] = "combine4b: Include bonds check in loop";$/;"	v
combine4p	opt/combine.c	/^void combine4p(vec_ptr v, data_t *dest)$/;"	f
combine4p_descr	opt/combine.c	/^char combine4p_descr[] = "combine4p: Pointer reference, accumulate in temporary";$/;"	v
combine5	opt/combine.c	/^void combine5(vec_ptr v, data_t *dest)$/;"	f
combine5_descr	opt/combine.c	/^char combine5_descr[] = "combine5: Array code, unrolled by 2";$/;"	v
combine5p	opt/combine.c	/^void combine5p(vec_ptr v, data_t *dest)$/;"	f
combine5p_descr	opt/combine.c	/^char combine5p_descr[] = "combine5p: Pointer code, unrolled by 2, for loop";$/;"	v
combine6	opt/combine.c	/^void combine6(vec_ptr v, data_t *dest)$/;"	f
combine6_descr	opt/combine.c	/^char combine6_descr[] = "combine6: Array code, unrolled by 2, Superscalar x2";$/;"	v
combine7	opt/combine.c	/^void combine7(vec_ptr v, data_t *dest)$/;"	f
combine7_descr	opt/combine.c	/^char combine7_descr[] = "combine7: Array code, unrolled by 2, different associativity";$/;"	v
register_combiners	opt/combine.c	/^void register_combiners(void)$/;"	f
simd_v10_combine	opt/combine.c	/^void simd_v10_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v10_descr	opt/combine.c	/^char simd_v10_descr[] = "simd_v10: SSE code, 10*VSIZE-way parallelism";$/;"	v
simd_v12_combine	opt/combine.c	/^void simd_v12_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v12_descr	opt/combine.c	/^char simd_v12_descr[] = "simd_v12: SSE code, 12*VSIZE-way parallelism";$/;"	v
simd_v1_combine	opt/combine.c	/^void simd_v1_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v1_descr	opt/combine.c	/^char simd_v1_descr[] = "simd_v1: SSE code, 1*VSIZE-way parallelism";$/;"	v
simd_v2_combine	opt/combine.c	/^void simd_v2_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2_descr	opt/combine.c	/^char simd_v2_descr[] = "simd_v2: SSE code, 2*VSIZE-way parallelism";$/;"	v
simd_v2a_combine	opt/combine.c	/^void simd_v2a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2a_descr	opt/combine.c	/^char simd_v2a_descr[] = "simd_v2a: SSE code, 2*VSIZE-way parallelism, reassociate";$/;"	v
simd_v4_combine	opt/combine.c	/^void simd_v4_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4_descr	opt/combine.c	/^char simd_v4_descr[] = "simd_v4: SSE code, 4*VSIZE-way parallelism";$/;"	v
simd_v4a_combine	opt/combine.c	/^void simd_v4a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4a_descr	opt/combine.c	/^char simd_v4a_descr[] = "simd_v4a: SSE code, 4*VSIZE-way parallelism, reassociate";$/;"	v
simd_v8_combine	opt/combine.c	/^void simd_v8_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8_descr	opt/combine.c	/^char simd_v8_descr[] = "simd_v8: SSE code, 8*VSIZE-way parallelism";$/;"	v
simd_v8a_combine	opt/combine.c	/^void simd_v8a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8a_descr	opt/combine.c	/^char simd_v8a_descr[] = "simd_v8a: SSE code, 8*VSIZE-way parallelism, reassociate";$/;"	v
unroll10a_combine	opt/combine.c	/^void unroll10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10a_descr	opt/combine.c	/^char unroll10a_descr[] = "unroll10a: Array code, unrolled by 10";$/;"	v
unroll10aa_combine	opt/combine.c	/^void unroll10aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10aa_descr	opt/combine.c	/^char unroll10aa_descr[] = "unroll10aa: Array code, unrolled by 10, Different Associativity";$/;"	v
unroll10x10a_combine	opt/combine.c	/^void unroll10x10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10x10a_descr	opt/combine.c	/^char unroll10x10a_descr[] = "unroll10x10a: Array code, unrolled by 10, Superscalar x10";$/;"	v
unroll12aa_combine	opt/combine.c	/^void unroll12aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12aa_descr	opt/combine.c	/^char unroll12aa_descr[] = "unroll12aa: Array code, unrolled by 12, Different Associativity";$/;"	v
unroll12x12a_combine	opt/combine.c	/^void unroll12x12a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x12a_descr	opt/combine.c	/^char unroll12x12a_descr[] = "unroll12x12a: Array code, unrolled by 12, Superscalar x12";$/;"	v
unroll12x6a_combine	opt/combine.c	/^void unroll12x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x6a_descr	opt/combine.c	/^char unroll12x6a_descr[] = "unroll2x6a: Array code, unrolled by 12, Superscalar x6";$/;"	v
unroll16_combine	opt/combine.c	/^void unroll16_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16_descr	opt/combine.c	/^char unroll16_descr[] = "unroll16: Pointer code, unrolled by 16";$/;"	v
unroll16a_combine	opt/combine.c	/^void unroll16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16a_descr	opt/combine.c	/^char unroll16a_descr[] = "unroll16a: Array code, unrolled by 16";$/;"	v
unroll16x16a_combine	opt/combine.c	/^void unroll16x16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16x16a_descr	opt/combine.c	/^char unroll16x16a_descr[] = "unroll16x16a: Array code, unrolled by 16, Superscalar x16";$/;"	v
unroll20x20a_combine	opt/combine.c	/^void unroll20x20a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll20x20a_descr	opt/combine.c	/^char unroll20x20a_descr[] = "unroll20x20a: Array code, unrolled by 20, Superscalar x20";$/;"	v
unroll2_combine	opt/combine.c	/^void unroll2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2_descr	opt/combine.c	/^char unroll2_descr[] = "unroll2: Pointer code, unrolled by 2";$/;"	v
unroll2aw_combine	opt/combine.c	/^void unroll2aw_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2aw_descr	opt/combine.c	/^char unroll2aw_descr[] = "unroll2aw: Array code, unrolled by 2, while loop";$/;"	v
unroll3_combine	opt/combine.c	/^void unroll3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3_descr	opt/combine.c	/^char unroll3_descr[] = "unroll3: Pointer code, unrolled by 3";$/;"	v
unroll3a_combine	opt/combine.c	/^void unroll3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3a_descr	opt/combine.c	/^char unroll3a_descr[] = "unroll3a: Array code, unrolled by 3";$/;"	v
unroll3aa_combine	opt/combine.c	/^void unroll3aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3aa_descr	opt/combine.c	/^char unroll3aa_descr[] = "unroll3aa: Array code, unrolled by 3, Different Associativity";$/;"	v
unroll3x3a_combine	opt/combine.c	/^void unroll3x3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3x3a_descr	opt/combine.c	/^char unroll3x3a_descr[] = "unroll3x3a: Array code, unrolled by 3, Superscalar x3";$/;"	v
unroll4_combine	opt/combine.c	/^void unroll4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4_descr	opt/combine.c	/^char unroll4_descr[] = "unroll4: Pointer code, unrolled by 4";$/;"	v
unroll4a_combine	opt/combine.c	/^void unroll4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4a_descr	opt/combine.c	/^char unroll4a_descr[] = "unroll4a: Array code, unrolled by 4";$/;"	v
unroll4aa_combine	opt/combine.c	/^void unroll4aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4aa_descr	opt/combine.c	/^char unroll4aa_descr[] = "unroll4aa: Array code, unrolled by 4, Different Associativity";$/;"	v
unroll4x2a_combine	opt/combine.c	/^void unroll4x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2a_descr	opt/combine.c	/^char unroll4x2a_descr[] = "unroll4x2a: Array code, unrolled by 4, Superscalar x2";$/;"	v
unroll4x2as_combine	opt/combine.c	/^void unroll4x2as_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2as_descr	opt/combine.c	/^char unroll4x2as_descr[] = "unroll4x2as: Array code, Unroll x4, Superscalar x2, noninterleaved";$/;"	v
unroll4x4a_combine	opt/combine.c	/^void unroll4x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x4a_descr	opt/combine.c	/^char unroll4x4a_descr[] = "unroll4x4a: Array code, unrolled by 4, Superscalar x4";$/;"	v
unroll5a_combine	opt/combine.c	/^void unroll5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5a_descr	opt/combine.c	/^char unroll5a_descr[] = "unroll5a: Array code, unrolled by 5";$/;"	v
unroll5aa_combine	opt/combine.c	/^void unroll5aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5aa_descr	opt/combine.c	/^char unroll5aa_descr[] = "unroll5aa: Array code, unrolled by 5, Different Associativity";$/;"	v
unroll5x5a_combine	opt/combine.c	/^void unroll5x5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5x5a_descr	opt/combine.c	/^char unroll5x5a_descr[] = "unroll5x5a: Array code, unrolled by 5, Superscalar x5";$/;"	v
unroll6a_combine	opt/combine.c	/^void unroll6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6a_descr	opt/combine.c	/^char unroll6a_descr[] = "unroll6a: Array code, unrolled by 6";$/;"	v
unroll6aa_combine	opt/combine.c	/^void unroll6aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6aa_descr	opt/combine.c	/^char unroll6aa_descr[] = "unroll6aa: Array code, unrolled by 6, Different Associativity";$/;"	v
unroll6x6a_combine	opt/combine.c	/^void unroll6x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6x6a_descr	opt/combine.c	/^char unroll6x6a_descr[] = "unroll6x6a: Array code, unrolled by 6, Superscalar x6";$/;"	v
unroll7a_combine	opt/combine.c	/^void unroll7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7a_descr	opt/combine.c	/^char unroll7a_descr[] = "unroll7a: Array code, unrolled by 7";$/;"	v
unroll7aa_combine	opt/combine.c	/^void unroll7aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7aa_descr	opt/combine.c	/^char unroll7aa_descr[] = "unroll7aa: Array code, unrolled by 7, Different Associativity";$/;"	v
unroll7x7a_combine	opt/combine.c	/^void unroll7x7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7x7a_descr	opt/combine.c	/^char unroll7x7a_descr[] = "unroll7x7a: Array code, unrolled by 7, Superscalar x7";$/;"	v
unroll8_combine	opt/combine.c	/^void unroll8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8_descr	opt/combine.c	/^char unroll8_descr[] = "unroll8: Pointer code, unrolled by 8";$/;"	v
unroll8a_combine	opt/combine.c	/^void unroll8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8a_descr	opt/combine.c	/^char unroll8a_descr[] = "unroll8a: Array code, unrolled by 8";$/;"	v
unroll8aa_combine	opt/combine.c	/^void unroll8aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8aa_descr	opt/combine.c	/^char unroll8aa_descr[] = "unroll8aa: Array code, unrolled by 8, Different Associativity";$/;"	v
unroll8x2_combine	opt/combine.c	/^void unroll8x2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2_descr	opt/combine.c	/^char unroll8x2_descr[] = "unroll8x2: Pointer code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x2a_combine	opt/combine.c	/^void unroll8x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2a_descr	opt/combine.c	/^char unroll8x2a_descr[] = "unroll8x2a: Array code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x4_combine	opt/combine.c	/^void unroll8x4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4_descr	opt/combine.c	/^char unroll8x4_descr[] = "unroll8x4: Pointer code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x4a_combine	opt/combine.c	/^void unroll8x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4a_descr	opt/combine.c	/^char unroll8x4a_descr[] = "unroll8x4a: Array code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x8_combine	opt/combine.c	/^void unroll8x8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8_descr	opt/combine.c	/^char unroll8x8_descr[] = "unroll8x8: Pointer code, unrolled by 8, Superscalar x8";$/;"	v
unroll8x8a_combine	opt/combine.c	/^void unroll8x8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8a_descr	opt/combine.c	/^char unroll8x8a_descr[] = "unroll8x8a: Array code, unrolled by 8, Superscalar x8";$/;"	v
unroll9a_combine	opt/combine.c	/^void unroll9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9a_descr	opt/combine.c	/^char unroll9a_descr[] = "unroll9a: Array code, unrolled by 9";$/;"	v
unroll9aa_combine	opt/combine.c	/^void unroll9aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9aa_descr	opt/combine.c	/^char unroll9aa_descr[] = "unroll9aa: Array code, unrolled by 9, Different Associativity";$/;"	v
unroll9x3_combine	opt/combine.c	/^void unroll9x3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x3_descr	opt/combine.c	/^char unroll9x3_descr[] = "unroll9x3: Pointer code, unrolled by 9, Superscalar x3";$/;"	v
unroll9x9a_combine	opt/combine.c	/^void unroll9x9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x9a_descr	opt/combine.c	/^char unroll9x9a_descr[] = "unroll9x9a: Array code, unrolled by 9, Superscalar x9";$/;"	v
unrollx2as_combine	opt/combine.c	/^void unrollx2as_combine(vec_ptr v, data_t *dest)$/;"	f
unrollx2as_descr	opt/combine.c	/^char unrollx2as_descr[] = "unrollx2as: Array code, Unroll x2, Superscalar x2, noninterleaved";$/;"	v
vec_t	opt/combine.c	/^typedef data_t vec_t __attribute__ ((vector_size(VBYTES)));$/;"	t	file:
DATA_NAME	opt/combine.h	/^#define DATA_NAME /;"	d
IDENT	opt/combine.h	/^#define IDENT /;"	d
OP	opt/combine.h	/^#define OP /;"	d
OP_NAME	opt/combine.h	/^#define OP_NAME /;"	d
combiner	opt/combine.h	/^typedef void (*combiner)(vec_ptr, data_t *);$/;"	t
data_t	opt/combine.h	/^typedef char data_t;$/;"	t
data_t	opt/combine.h	/^typedef double data_t;$/;"	t
data_t	opt/combine.h	/^typedef float data_t;$/;"	t
data_t	opt/combine.h	/^typedef int data_t;$/;"	t
data_t	opt/combine.h	/^typedef long data_t;$/;"	t
data_t	opt/combine.h	/^typedef long double data_t;$/;"	t
MAXLEN	opt/cond-eg.c	/^#define MAXLEN /;"	d	file:
a1	opt/cond-eg.c	/^long a1[MAXLEN], b1[MAXLEN];$/;"	v
a2	opt/cond-eg.c	/^long a2[MAXLEN], b2[MAXLEN];$/;"	v
b1	opt/cond-eg.c	/^long a1[MAXLEN], b1[MAXLEN];$/;"	v
b2	opt/cond-eg.c	/^long a2[MAXLEN], b2[MAXLEN];$/;"	v
init	opt/cond-eg.c	/^void init(unsigned seed) {$/;"	f
main	opt/cond-eg.c	/^int main(int argc, char *argv[]) {$/;"	f
minmax1	opt/cond-eg.c	/^void minmax1(long a[], long b[], long n) {$/;"	f
minmax2	opt/cond-eg.c	/^void minmax2(long a[], long b[], long n) {$/;"	f
run	opt/cond-eg.c	/^void run(long len, long trials, unsigned seed) {$/;"	f
ASIZE	opt/copy.c	/^#define ASIZE /;"	d	file:
CASE_COUNT	opt/copy.c	/^#define CASE_COUNT /;"	d	file:
TEST_COUNT	opt/copy.c	/^#define TEST_COUNT /;"	d	file:
array_clear	opt/copy.c	/^void array_clear(long *src, long *dest, long n)$/;"	f
array_clear_2	opt/copy.c	/^static void array_clear_2(long *src, long *dest, long n)$/;"	f	file:
array_clear_3	opt/copy.c	/^static void array_clear_3(long *src, long *dest, long n)$/;"	f	file:
array_clear_4	opt/copy.c	/^static void array_clear_4(long *src, long *dest, long n)$/;"	f	file:
array_copy	opt/copy.c	/^void array_copy(long *src, long *dest, long n)$/;"	f
array_copy_2	opt/copy.c	/^static void array_copy_2(long *src, long *dest, long n)$/;"	f	file:
array_copy_4	opt/copy.c	/^static void array_copy_4(long *src, long *dest, long n)$/;"	f	file:
case_descr	opt/copy.c	/^static char *case_descr[CASE_COUNT] = $/;"	v	file:
case_fun	opt/copy.c	/^static test_fun case_fun[CASE_COUNT] =$/;"	v	file:
clear_array	opt/copy.c	/^void clear_array(long *dest, long n) {$/;"	f
clear_array_4	opt/copy.c	/^void clear_array_4(long *dest, long n) {$/;"	f
copier	opt/copy.c	/^static copy_fun copier[TEST_COUNT] = $/;"	v	file:
copy_array	opt/copy.c	/^void copy_array(long *src, long *dest, long n)$/;"	f
copy_fun	opt/copy.c	/^typedef void (*copy_fun)(long *, long *, long);$/;"	t	file:
data	opt/copy.c	/^long data[ASIZE+1];$/;"	v
data2	opt/copy.c	/^long data2[ASIZE+1];$/;"	v
idx	opt/copy.c	/^long idx = 0;$/;"	v
main	opt/copy.c	/^int main()$/;"	f
mem_clear	opt/copy.c	/^static void mem_clear(long *src, long *dest, long n)$/;"	f	file:
run_test	opt/copy.c	/^static void run_test(long i, long c) $/;"	f	file:
test2a	opt/copy.c	/^static void test2a(long n)$/;"	f	file:
test2b	opt/copy.c	/^static void test2b(long n)$/;"	f	file:
test2c	opt/copy.c	/^static void test2c(long n)$/;"	f	file:
test2d	opt/copy.c	/^static void test2d(long n)$/;"	f	file:
test_descr	opt/copy.c	/^static char *test_descr[TEST_COUNT] = $/;"	v	file:
test_fun	opt/copy.c	/^typedef void (*test_fun)(long);$/;"	t	file:
write_read	opt/copy.c	/^void write_read(long *src, long *dst, long n)$/;"	f
ASIZE	opt/copy2d.c	/^#define ASIZE /;"	d	file:
a	opt/copy2d.c	/^long int a[ASIZE][ASIZE];$/;"	v
b	opt/copy2d.c	/^long int b[ASIZE][ASIZE];$/;"	v
copyij	opt/copy2d.c	/^void copyij(long int src[ASIZE][ASIZE], long int dst[ASIZE][ASIZE])$/;"	f
copyji	opt/copy2d.c	/^void copyji(long int src[ASIZE][ASIZE], long int dst[ASIZE][ASIZE])$/;"	f
funij	opt/copy2d.c	/^void funij(long int n)$/;"	f
funji	opt/copy2d.c	/^void funji(long int n)$/;"	f
main	opt/copy2d.c	/^int main(int argc, char *argv[])$/;"	f
deref	opt/deref.c	/^long deref(long *xp)$/;"	f
BSIZE	opt/dictionary.c	/^#define BSIZE /;"	d	file:
FCNT	opt/dictionary.c	/^#define FCNT /;"	d	file:
HCNT	opt/dictionary.c	/^#define HCNT /;"	d	file:
HELE	opt/dictionary.c	/^typedef struct HELE {$/;"	s	file:
LCNT	opt/dictionary.c	/^#define LCNT /;"	d	file:
MAXNG	opt/dictionary.c	/^#define MAXNG /;"	d	file:
Strlen	opt/dictionary.c	/^size_t Strlen(const char *s)$/;"	f
USESTRLEN	opt/dictionary.c	/^#define USESTRLEN /;"	d	file:
buf	opt/dictionary.c	/^char buf[BSIZE];$/;"	v
bufvalid	opt/dictionary.c	/^int bufvalid = 0;$/;"	v
compare_ele	opt/dictionary.c	/^int compare_ele(const void *vele1, const void *vele2) {$/;"	f
find_ele_fun_names	opt/dictionary.c	/^char *find_ele_fun_names[FCNT] = $/;"	v
find_ele_fun_set	opt/dictionary.c	/^find_ele_fun_t find_ele_fun_set[FCNT] =$/;"	v
find_ele_fun_t	opt/dictionary.c	/^typedef h_ptr (*find_ele_fun_t)(h_ptr, char *);$/;"	t	file:
find_ele_iter_f	opt/dictionary.c	/^h_ptr find_ele_iter_f(h_ptr ls, char *s)$/;"	f
find_ele_iter_r	opt/dictionary.c	/^h_ptr find_ele_iter_r(h_ptr ls, char *s)$/;"	f
find_ele_rec	opt/dictionary.c	/^h_ptr find_ele_rec(h_ptr ls, char *s)$/;"	f
freq	opt/dictionary.c	/^    int freq;$/;"	m	struct:HELE	file:
get_token	opt/dictionary.c	/^char *get_token(int ngram)$/;"	f
get_word	opt/dictionary.c	/^char *get_word()$/;"	f
h_add	opt/dictionary.c	/^unsigned h_add(char *s)$/;"	f
h_mod	opt/dictionary.c	/^unsigned h_mod(char *s)$/;"	f
h_ptr	opt/dictionary.c	/^} h_rec, *h_ptr;$/;"	t	typeref:struct:HELE	file:
h_rec	opt/dictionary.c	/^} h_rec, *h_ptr;$/;"	t	typeref:struct:HELE	file:
h_xor	opt/dictionary.c	/^unsigned h_xor(char *s)$/;"	f
hash_fun_names	opt/dictionary.c	/^char *hash_fun_names[HCNT] = {"h_mod", "h_add", "h_xor"};$/;"	v
hash_fun_set	opt/dictionary.c	/^hash_fun_t hash_fun_set[HCNT] = {h_mod, h_add, h_xor};$/;"	v
hash_fun_t	opt/dictionary.c	/^typedef unsigned (*hash_fun_t)(char *s);$/;"	t	file:
htable	opt/dictionary.c	/^h_ptr *htable;$/;"	v
infile	opt/dictionary.c	/^FILE *infile;$/;"	v
init_token	opt/dictionary.c	/^void init_token(FILE *in) {$/;"	f
insert_string	opt/dictionary.c	/^void insert_string(char *s,$/;"	f
lcnt	opt/dictionary.c	/^int lcnt = 0; \/* Number of words having maximum length *\/$/;"	v
llen	opt/dictionary.c	/^int llen = 0; \/* Length of the longest word *\/$/;"	v
lower1	opt/dictionary.c	/^void lower1(char *s)$/;"	f
lower2	opt/dictionary.c	/^void lower2(char *s)$/;"	f
lower_fun_names	opt/dictionary.c	/^char *lower_fun_names[LCNT] = {"lower1", "lower2"};$/;"	v
lower_fun_set	opt/dictionary.c	/^lower_fun_t lower_fun_set[LCNT] = {lower1, lower2};$/;"	v
lower_fun_t	opt/dictionary.c	/^typedef void (*lower_fun_t)(char *s);$/;"	t	file:
lstring	opt/dictionary.c	/^char *lstring = ""; \/* A longest string *\/$/;"	v
main	opt/dictionary.c	/^int main(int argc, char *argv[])$/;"	f
mcnt	opt/dictionary.c	/^int mcnt = 0; \/* Count of Most frequent word *\/$/;"	v
mstring	opt/dictionary.c	/^char *mstring = ""; \/* Most frequent word *\/$/;"	v
new_ele	opt/dictionary.c	/^static h_ptr new_ele(char *s)$/;"	f	file:
new_table	opt/dictionary.c	/^static void new_table(int size)$/;"	f	file:
next	opt/dictionary.c	/^    struct HELE *next;$/;"	m	struct:HELE	typeref:struct:HELE::HELE	file:
save_string	opt/dictionary.c	/^char *save_string(char *s)$/;"	f
scnt	opt/dictionary.c	/^int scnt = 0; \/* Count of number of singletons *\/$/;"	v
skipchar	opt/dictionary.c	/^static char *skipchar = " \\t\\n\\r.,:;\/<>()[]{}?!\\"-'\\0xc2\\0xa0";$/;"	v	file:
sort_words	opt/dictionary.c	/^h_ptr sort_words(int quick)$/;"	f
tsize	opt/dictionary.c	/^int tsize;$/;"	v
ucnt	opt/dictionary.c	/^int ucnt = 0; \/* Number of unique words *\/$/;"	v
wcnt	opt/dictionary.c	/^int wcnt = 0; \/* Number of words *\/$/;"	v
word	opt/dictionary.c	/^    char *word;$/;"	m	struct:HELE	file:
word_freq	opt/dictionary.c	/^void word_freq(FILE *src, int verbose, int ngram, int size, int quick,$/;"	f
AMIX_VAL	opt/div.c	/^typedef enum { NEG_VAL, POS_VAL, AMIX_VAL, RMIX_VAL, SINK_VAL } val_t;$/;"	e	enum:__anon27	file:
NEG_VAL	opt/div.c	/^typedef enum { NEG_VAL, POS_VAL, AMIX_VAL, RMIX_VAL, SINK_VAL } val_t;$/;"	e	enum:__anon27	file:
NELE	opt/div.c	/^#define NELE /;"	d	file:
POS_VAL	opt/div.c	/^typedef enum { NEG_VAL, POS_VAL, AMIX_VAL, RMIX_VAL, SINK_VAL } val_t;$/;"	e	enum:__anon27	file:
RMIX_VAL	opt/div.c	/^typedef enum { NEG_VAL, POS_VAL, AMIX_VAL, RMIX_VAL, SINK_VAL } val_t;$/;"	e	enum:__anon27	file:
SINK_VAL	opt/div.c	/^typedef enum { NEG_VAL, POS_VAL, AMIX_VAL, RMIX_VAL, SINK_VAL } val_t;$/;"	e	enum:__anon27	file:
cpt	opt/div.c	/^double cpt(test_funct tf, val_t num_type, val_t den_type, int use_cond)$/;"	f
den_type	opt/div.c	/^val_t den_type = NEG_VAL;$/;"	v
dtest	opt/div.c	/^void dtest(int *argspec)$/;"	f
dval	opt/div.c	/^double dval[5][NELE];$/;"	v
ftest	opt/div.c	/^void ftest(int *argspec)$/;"	f
fval	opt/div.c	/^float fval[5][NELE];$/;"	v
init	opt/div.c	/^static void init()$/;"	f	file:
itest	opt/div.c	/^void itest(int *argspec)$/;"	f
ival	opt/div.c	/^int ival[5][NELE];$/;"	v
ltest	opt/div.c	/^void ltest(int *argspec)$/;"	f
lval	opt/div.c	/^long lval[5][NELE];$/;"	v
main	opt/div.c	/^int main()$/;"	f
num_type	opt/div.c	/^val_t num_type = NEG_VAL;$/;"	v
run_tests	opt/div.c	/^void run_tests(test_funct tf, char *descr)$/;"	f
use_cond	opt/div.c	/^int use_cond = 0;$/;"	v
val_t	opt/div.c	/^typedef enum { NEG_VAL, POS_VAL, AMIX_VAL, RMIX_VAL, SINK_VAL } val_t;$/;"	t	typeref:enum:__anon27	file:
ALIGN	opt/dmult.c	/^#define ALIGN /;"	d	file:
ALIGN_INIT	opt/dmult.c	/^#define ALIGN_INIT /;"	d	file:
ELE	opt/dmult.c	/^typedef struct ELE {$/;"	s	file:
TCNT	opt/dmult.c	/^#define TCNT /;"	d	file:
VSIZE	opt/dmult.c	/^#define VSIZE /;"	d	file:
answer	opt/dmult.c	/^double answer[TCNT];$/;"	v
array_data	opt/dmult.c	/^double *array_data[TCNT];$/;"	v
array_u1p1S_prod	opt/dmult.c	/^double array_u1p1S_prod(double *array, int cnt) {$/;"	f
array_u1p1S_prod_descr	opt/dmult.c	/^char array_u1p1S_prod_descr[] = "Array.  Unroll 1x.  Parallel 1x, Standard associativity";$/;"	v
array_u5p1A_prod	opt/dmult.c	/^double array_u5p1A_prod(double *array, int cnt) {$/;"	f
array_u5p1A_prod_descr	opt/dmult.c	/^char array_u5p1A_prod_descr[] = "Array.  Unroll 5x.  Parallel 1x, Modified associativity";$/;"	v
array_u5p1S_prod	opt/dmult.c	/^double array_u5p1S_prod(double *array, int cnt) {$/;"	f
array_u5p1S_prod_descr	opt/dmult.c	/^char array_u5p1S_prod_descr[] = "Array.  Unroll 5x.  Parallel 1x, Standard associativity";$/;"	v
array_u5p5S_prod	opt/dmult.c	/^double array_u5p5S_prod(double *array, int cnt) {$/;"	f
array_u5p5S_prod_descr	opt/dmult.c	/^char array_u5p5S_prod_descr[] = "Array.  Unroll 5x.  Parallel 5x, Standard associativity";$/;"	v
b_ele	opt/dmult.c	/^} b_ele;$/;"	t	typeref:struct:__anon29	file:
d	opt/dmult.c	/^    double d[VSIZE];$/;"	m	union:__anon28	file:
descr	opt/dmult.c	/^    char *descr;$/;"	m	struct:__anon29	file:
dfun	opt/dmult.c	/^typedef double (*dfun)(int);$/;"	t	file:
fun	opt/dmult.c	/^    dfun fun;$/;"	m	struct:__anon29	file:
global_cnt	opt/dmult.c	/^int global_cnt = 10000;$/;"	v
init	opt/dmult.c	/^void init(int cnt) {$/;"	f
list_data	opt/dmult.c	/^list_ptr list_data[TCNT];$/;"	v
list_ele	opt/dmult.c	/^} list_ele;$/;"	t	typeref:struct:ELE	file:
list_prod	opt/dmult.c	/^double list_prod(list_ptr ls)$/;"	f
list_prod_descr	opt/dmult.c	/^char list_prod_descr[] = "Traversing Singly-Linked List";$/;"	v
list_ptr	opt/dmult.c	/^typedef struct ELE *list_ptr;$/;"	t	typeref:struct:ELE	file:
main	opt/dmult.c	/^int main(int argc, char *argv[]) {$/;"	f
name	opt/dmult.c	/^    char *name;$/;"	m	struct:__anon29	file:
next	opt/dmult.c	/^    list_ptr next;$/;"	m	struct:ELE	file:
pack_t	opt/dmult.c	/^} pack_t;$/;"	t	typeref:union:__anon28	file:
run	opt/dmult.c	/^void run(int cnt) {$/;"	f
sse_u1p1_prod	opt/dmult.c	/^double sse_u1p1_prod(double *array, int cnt)$/;"	f
sse_u1p1_prod_descr	opt/dmult.c	/^char sse_u1p1_prod_descr[] = "2x SSE.  Unroll 1x.  Parallel 1x.";$/;"	v
sse_u5p5_prod	opt/dmult.c	/^double sse_u5p5_prod(double *array, int cnt)$/;"	f
sse_u5p5_prod_descr	opt/dmult.c	/^char sse_u5p5_prod_descr[] = "2x SSE.  Unroll 5x.  Parallel 5x.";$/;"	v
sse_u8p8_prod	opt/dmult.c	/^double sse_u8p8_prod(double *array, int cnt)$/;"	f
sse_u8p8_prod_descr	opt/dmult.c	/^char sse_u8p8_prod_descr[] = "2x SSE.  Unroll 8x.  Parallel 8x.";$/;"	v
tester	opt/dmult.c	/^void tester(dfun fun, char *name, char *descr) {$/;"	f
tests	opt/dmult.c	/^b_ele tests[] = {$/;"	v
v	opt/dmult.c	/^    vec_t v;$/;"	m	union:__anon28	file:
val	opt/dmult.c	/^    double val;$/;"	m	struct:ELE	file:
vec_t	opt/dmult.c	/^typedef double vec_t __attribute__ ((vector_size(16)));$/;"	t	file:
wrap_array_u1p1S_prod	opt/dmult.c	/^double wrap_array_u1p1S_prod(int t)$/;"	f
wrap_array_u5p1A_prod	opt/dmult.c	/^double wrap_array_u5p1A_prod(int t)$/;"	f
wrap_array_u5p1S_prod	opt/dmult.c	/^double wrap_array_u5p1S_prod(int t)$/;"	f
wrap_array_u5p5S_prod	opt/dmult.c	/^double wrap_array_u5p5S_prod(int t)$/;"	f
wrap_list_prod	opt/dmult.c	/^double wrap_list_prod(int t)$/;"	f
wrap_sse_u1p1_prod	opt/dmult.c	/^double wrap_sse_u1p1_prod(int t)$/;"	f
wrap_sse_u5p5_prod	opt/dmult.c	/^double wrap_sse_u5p5_prod(int t)$/;"	f
wrap_sse_u8p8_prod	opt/dmult.c	/^double wrap_sse_u8p8_prod(int t)$/;"	f
VBYTES	opt/dpb-O1.c	/^#define VBYTES /;"	d	file:
VSIZE	opt/dpb-O1.c	/^#define VSIZE /;"	d	file:
combine1	opt/dpb-O1.c	/^void combine1(vec_ptr v, data_t *dest)$/;"	f
combine1_descr	opt/dpb-O1.c	/^char combine1_descr[] = "combine1: Maximum use of data abstraction";$/;"	v
combine2	opt/dpb-O1.c	/^void combine2(vec_ptr v, data_t *dest)$/;"	f
combine2_descr	opt/dpb-O1.c	/^char combine2_descr[] = "combine2: Take vec_length() out of loop";$/;"	v
combine3	opt/dpb-O1.c	/^void combine3(vec_ptr v, data_t *dest)$/;"	f
combine3_descr	opt/dpb-O1.c	/^char combine3_descr[] = "combine3: Array reference to vector data";$/;"	v
combine3w	opt/dpb-O1.c	/^void combine3w(vec_ptr v, data_t *dest)$/;"	f
combine3w_descr	opt/dpb-O1.c	/^char combine3w_descr[] = "combine3w: Update *dest within loop only with write";$/;"	v
combine4	opt/dpb-O1.c	/^void combine4(vec_ptr v, data_t *dest)$/;"	f
combine4_descr	opt/dpb-O1.c	/^char combine4_descr[] = "combine4: Array reference, accumulate in temporary";$/;"	v
combine4b	opt/dpb-O1.c	/^void combine4b(vec_ptr v, data_t *dest)$/;"	f
combine4b_descr	opt/dpb-O1.c	/^char combine4b_descr[] = "combine4b: Include bonds check in loop";$/;"	v
combine4p	opt/dpb-O1.c	/^void combine4p(vec_ptr v, data_t *dest)$/;"	f
combine4p_descr	opt/dpb-O1.c	/^char combine4p_descr[] = "combine4p: Pointer reference, accumulate in temporary";$/;"	v
combine5	opt/dpb-O1.c	/^void combine5(vec_ptr v, data_t *dest)$/;"	f
combine5_descr	opt/dpb-O1.c	/^char combine5_descr[] = "combine5: Array code, unrolled by 2";$/;"	v
combine5p	opt/dpb-O1.c	/^void combine5p(vec_ptr v, data_t *dest)$/;"	f
combine5p_descr	opt/dpb-O1.c	/^char combine5p_descr[] = "combine5p: Pointer code, unrolled by 2, for loop";$/;"	v
combine6	opt/dpb-O1.c	/^void combine6(vec_ptr v, data_t *dest)$/;"	f
combine6_descr	opt/dpb-O1.c	/^char combine6_descr[] = "combine6: Array code, unrolled by 2, Superscalar x2";$/;"	v
combine7	opt/dpb-O1.c	/^void combine7(vec_ptr v, data_t *dest)$/;"	f
combine7_descr	opt/dpb-O1.c	/^char combine7_descr[] = "combine7: Array code, unrolled by 2, different associativity";$/;"	v
d	opt/dpb-O1.c	/^    data_t d[VSIZE];$/;"	m	union:__anon30	file:
pack_t	opt/dpb-O1.c	/^} pack_t;$/;"	t	typeref:union:__anon30	file:
register_combiners	opt/dpb-O1.c	/^void register_combiners(void)$/;"	f
simd_v10_combine	opt/dpb-O1.c	/^void simd_v10_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v10_descr	opt/dpb-O1.c	/^char simd_v10_descr[] = "simd_v10: SSE code, 10*VSIZE-way parallelism";$/;"	v
simd_v12_combine	opt/dpb-O1.c	/^void simd_v12_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v12_descr	opt/dpb-O1.c	/^char simd_v12_descr[] = "simd_v12: SSE code, 12*VSIZE-way parallelism";$/;"	v
simd_v1_combine	opt/dpb-O1.c	/^void simd_v1_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v1_descr	opt/dpb-O1.c	/^char simd_v1_descr[] = "simd_v1: SSE code, 1*VSIZE-way parallelism";$/;"	v
simd_v2_combine	opt/dpb-O1.c	/^void simd_v2_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2_descr	opt/dpb-O1.c	/^char simd_v2_descr[] = "simd_v2: SSE code, 2*VSIZE-way parallelism";$/;"	v
simd_v2a_combine	opt/dpb-O1.c	/^void simd_v2a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2a_descr	opt/dpb-O1.c	/^char simd_v2a_descr[] = "simd_v2a: SSE code, 2*VSIZE-way parallelism, reassociate";$/;"	v
simd_v4_combine	opt/dpb-O1.c	/^void simd_v4_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4_descr	opt/dpb-O1.c	/^char simd_v4_descr[] = "simd_v4: SSE code, 4*VSIZE-way parallelism";$/;"	v
simd_v4a_combine	opt/dpb-O1.c	/^void simd_v4a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4a_descr	opt/dpb-O1.c	/^char simd_v4a_descr[] = "simd_v4a: SSE code, 4*VSIZE-way parallelism, reassociate";$/;"	v
simd_v8_combine	opt/dpb-O1.c	/^void simd_v8_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8_descr	opt/dpb-O1.c	/^char simd_v8_descr[] = "simd_v8: SSE code, 8*VSIZE-way parallelism";$/;"	v
simd_v8a_combine	opt/dpb-O1.c	/^void simd_v8a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8a_descr	opt/dpb-O1.c	/^char simd_v8a_descr[] = "simd_v8a: SSE code, 8*VSIZE-way parallelism, reassociate";$/;"	v
unroll10a_combine	opt/dpb-O1.c	/^void unroll10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10a_descr	opt/dpb-O1.c	/^char unroll10a_descr[] = "unroll10a: Array code, unrolled by 10";$/;"	v
unroll10aa_combine	opt/dpb-O1.c	/^void unroll10aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10aa_descr	opt/dpb-O1.c	/^char unroll10aa_descr[] = "unroll10aa: Array code, unrolled by 10, Different Associativity";$/;"	v
unroll10x10a_combine	opt/dpb-O1.c	/^void unroll10x10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10x10a_descr	opt/dpb-O1.c	/^char unroll10x10a_descr[] = "unroll10x10a: Array code, unrolled by 10, Superscalar x10";$/;"	v
unroll12aa_combine	opt/dpb-O1.c	/^void unroll12aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12aa_descr	opt/dpb-O1.c	/^char unroll12aa_descr[] = "unroll12aa: Array code, unrolled by 12, Different Associativity";$/;"	v
unroll12x12a_combine	opt/dpb-O1.c	/^void unroll12x12a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x12a_descr	opt/dpb-O1.c	/^char unroll12x12a_descr[] = "unroll12x12a: Array code, unrolled by 12, Superscalar x12";$/;"	v
unroll12x6a_combine	opt/dpb-O1.c	/^void unroll12x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x6a_descr	opt/dpb-O1.c	/^char unroll12x6a_descr[] = "unroll2x6a: Array code, unrolled by 12, Superscalar x6";$/;"	v
unroll16_combine	opt/dpb-O1.c	/^void unroll16_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16_descr	opt/dpb-O1.c	/^char unroll16_descr[] = "unroll16: Pointer code, unrolled by 16";$/;"	v
unroll16a_combine	opt/dpb-O1.c	/^void unroll16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16a_descr	opt/dpb-O1.c	/^char unroll16a_descr[] = "unroll16a: Array code, unrolled by 16";$/;"	v
unroll16x16a_combine	opt/dpb-O1.c	/^void unroll16x16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16x16a_descr	opt/dpb-O1.c	/^char unroll16x16a_descr[] = "unroll16x16a: Array code, unrolled by 16, Superscalar x16";$/;"	v
unroll20x20a_combine	opt/dpb-O1.c	/^void unroll20x20a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll20x20a_descr	opt/dpb-O1.c	/^char unroll20x20a_descr[] = "unroll20x20a: Array code, unrolled by 20, Superscalar x20";$/;"	v
unroll2_combine	opt/dpb-O1.c	/^void unroll2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2_descr	opt/dpb-O1.c	/^char unroll2_descr[] = "unroll2: Pointer code, unrolled by 2";$/;"	v
unroll2aw_combine	opt/dpb-O1.c	/^void unroll2aw_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2aw_descr	opt/dpb-O1.c	/^char unroll2aw_descr[] = "unroll2aw: Array code, unrolled by 2, while loop";$/;"	v
unroll3_combine	opt/dpb-O1.c	/^void unroll3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3_descr	opt/dpb-O1.c	/^char unroll3_descr[] = "unroll3: Pointer code, unrolled by 3";$/;"	v
unroll3a_combine	opt/dpb-O1.c	/^void unroll3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3a_descr	opt/dpb-O1.c	/^char unroll3a_descr[] = "unroll3a: Array code, unrolled by 3";$/;"	v
unroll3aa_combine	opt/dpb-O1.c	/^void unroll3aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3aa_descr	opt/dpb-O1.c	/^char unroll3aa_descr[] = "unroll3aa: Array code, unrolled by 3, Different Associativity";$/;"	v
unroll3x3a_combine	opt/dpb-O1.c	/^void unroll3x3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3x3a_descr	opt/dpb-O1.c	/^char unroll3x3a_descr[] = "unroll3x3a: Array code, unrolled by 3, Superscalar x3";$/;"	v
unroll4_combine	opt/dpb-O1.c	/^void unroll4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4_descr	opt/dpb-O1.c	/^char unroll4_descr[] = "unroll4: Pointer code, unrolled by 4";$/;"	v
unroll4a_combine	opt/dpb-O1.c	/^void unroll4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4a_descr	opt/dpb-O1.c	/^char unroll4a_descr[] = "unroll4a: Array code, unrolled by 4";$/;"	v
unroll4aa_combine	opt/dpb-O1.c	/^void unroll4aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4aa_descr	opt/dpb-O1.c	/^char unroll4aa_descr[] = "unroll4aa: Array code, unrolled by 4, Different Associativity";$/;"	v
unroll4x2a_combine	opt/dpb-O1.c	/^void unroll4x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2a_descr	opt/dpb-O1.c	/^char unroll4x2a_descr[] = "unroll4x2a: Array code, unrolled by 4, Superscalar x2";$/;"	v
unroll4x2as_combine	opt/dpb-O1.c	/^void unroll4x2as_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2as_descr	opt/dpb-O1.c	/^char unroll4x2as_descr[] = "unroll4x2as: Array code, Unroll x4, Superscalar x2, noninterleaved";$/;"	v
unroll4x4a_combine	opt/dpb-O1.c	/^void unroll4x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x4a_descr	opt/dpb-O1.c	/^char unroll4x4a_descr[] = "unroll4x4a: Array code, unrolled by 4, Superscalar x4";$/;"	v
unroll5a_combine	opt/dpb-O1.c	/^void unroll5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5a_descr	opt/dpb-O1.c	/^char unroll5a_descr[] = "unroll5a: Array code, unrolled by 5";$/;"	v
unroll5aa_combine	opt/dpb-O1.c	/^void unroll5aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5aa_descr	opt/dpb-O1.c	/^char unroll5aa_descr[] = "unroll5aa: Array code, unrolled by 5, Different Associativity";$/;"	v
unroll5x5a_combine	opt/dpb-O1.c	/^void unroll5x5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5x5a_descr	opt/dpb-O1.c	/^char unroll5x5a_descr[] = "unroll5x5a: Array code, unrolled by 5, Superscalar x5";$/;"	v
unroll6a_combine	opt/dpb-O1.c	/^void unroll6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6a_descr	opt/dpb-O1.c	/^char unroll6a_descr[] = "unroll6a: Array code, unrolled by 6";$/;"	v
unroll6aa_combine	opt/dpb-O1.c	/^void unroll6aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6aa_descr	opt/dpb-O1.c	/^char unroll6aa_descr[] = "unroll6aa: Array code, unrolled by 6, Different Associativity";$/;"	v
unroll6x6a_combine	opt/dpb-O1.c	/^void unroll6x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6x6a_descr	opt/dpb-O1.c	/^char unroll6x6a_descr[] = "unroll6x6a: Array code, unrolled by 6, Superscalar x6";$/;"	v
unroll7a_combine	opt/dpb-O1.c	/^void unroll7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7a_descr	opt/dpb-O1.c	/^char unroll7a_descr[] = "unroll7a: Array code, unrolled by 7";$/;"	v
unroll7aa_combine	opt/dpb-O1.c	/^void unroll7aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7aa_descr	opt/dpb-O1.c	/^char unroll7aa_descr[] = "unroll7aa: Array code, unrolled by 7, Different Associativity";$/;"	v
unroll7x7a_combine	opt/dpb-O1.c	/^void unroll7x7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7x7a_descr	opt/dpb-O1.c	/^char unroll7x7a_descr[] = "unroll7x7a: Array code, unrolled by 7, Superscalar x7";$/;"	v
unroll8_combine	opt/dpb-O1.c	/^void unroll8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8_descr	opt/dpb-O1.c	/^char unroll8_descr[] = "unroll8: Pointer code, unrolled by 8";$/;"	v
unroll8a_combine	opt/dpb-O1.c	/^void unroll8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8a_descr	opt/dpb-O1.c	/^char unroll8a_descr[] = "unroll8a: Array code, unrolled by 8";$/;"	v
unroll8aa_combine	opt/dpb-O1.c	/^void unroll8aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8aa_descr	opt/dpb-O1.c	/^char unroll8aa_descr[] = "unroll8aa: Array code, unrolled by 8, Different Associativity";$/;"	v
unroll8x2_combine	opt/dpb-O1.c	/^void unroll8x2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2_descr	opt/dpb-O1.c	/^char unroll8x2_descr[] = "unroll8x2: Pointer code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x2a_combine	opt/dpb-O1.c	/^void unroll8x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2a_descr	opt/dpb-O1.c	/^char unroll8x2a_descr[] = "unroll8x2a: Array code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x4_combine	opt/dpb-O1.c	/^void unroll8x4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4_descr	opt/dpb-O1.c	/^char unroll8x4_descr[] = "unroll8x4: Pointer code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x4a_combine	opt/dpb-O1.c	/^void unroll8x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4a_descr	opt/dpb-O1.c	/^char unroll8x4a_descr[] = "unroll8x4a: Array code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x8_combine	opt/dpb-O1.c	/^void unroll8x8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8_descr	opt/dpb-O1.c	/^char unroll8x8_descr[] = "unroll8x8: Pointer code, unrolled by 8, Superscalar x8";$/;"	v
unroll8x8a_combine	opt/dpb-O1.c	/^void unroll8x8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8a_descr	opt/dpb-O1.c	/^char unroll8x8a_descr[] = "unroll8x8a: Array code, unrolled by 8, Superscalar x8";$/;"	v
unroll9a_combine	opt/dpb-O1.c	/^void unroll9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9a_descr	opt/dpb-O1.c	/^char unroll9a_descr[] = "unroll9a: Array code, unrolled by 9";$/;"	v
unroll9aa_combine	opt/dpb-O1.c	/^void unroll9aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9aa_descr	opt/dpb-O1.c	/^char unroll9aa_descr[] = "unroll9aa: Array code, unrolled by 9, Different Associativity";$/;"	v
unroll9x3_combine	opt/dpb-O1.c	/^void unroll9x3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x3_descr	opt/dpb-O1.c	/^char unroll9x3_descr[] = "unroll9x3: Pointer code, unrolled by 9, Superscalar x3";$/;"	v
unroll9x9a_combine	opt/dpb-O1.c	/^void unroll9x9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x9a_descr	opt/dpb-O1.c	/^char unroll9x9a_descr[] = "unroll9x9a: Array code, unrolled by 9, Superscalar x9";$/;"	v
unrollx2as_combine	opt/dpb-O1.c	/^void unrollx2as_combine(vec_ptr v, data_t *dest)$/;"	f
unrollx2as_descr	opt/dpb-O1.c	/^char unrollx2as_descr[] = "unrollx2as: Array code, Unroll x2, Superscalar x2, noninterleaved";$/;"	v
v	opt/dpb-O1.c	/^    vec_t v;$/;"	m	union:__anon30	file:
vec_t	opt/dpb-O1.c	/^typedef data_t vec_t __attribute__ ((vector_size(VBYTES)));$/;"	t	file:
VBYTES	opt/dpb-O2.c	/^#define VBYTES /;"	d	file:
VSIZE	opt/dpb-O2.c	/^#define VSIZE /;"	d	file:
combine1	opt/dpb-O2.c	/^void combine1(vec_ptr v, data_t *dest)$/;"	f
combine1_descr	opt/dpb-O2.c	/^char combine1_descr[] = "combine1: Maximum use of data abstraction";$/;"	v
combine2	opt/dpb-O2.c	/^void combine2(vec_ptr v, data_t *dest)$/;"	f
combine2_descr	opt/dpb-O2.c	/^char combine2_descr[] = "combine2: Take vec_length() out of loop";$/;"	v
combine3	opt/dpb-O2.c	/^void combine3(vec_ptr v, data_t *dest)$/;"	f
combine3_descr	opt/dpb-O2.c	/^char combine3_descr[] = "combine3: Array reference to vector data";$/;"	v
combine3w	opt/dpb-O2.c	/^void combine3w(vec_ptr v, data_t *dest)$/;"	f
combine3w_descr	opt/dpb-O2.c	/^char combine3w_descr[] = "combine3w: Update *dest within loop only with write";$/;"	v
combine4	opt/dpb-O2.c	/^void combine4(vec_ptr v, data_t *dest)$/;"	f
combine4_descr	opt/dpb-O2.c	/^char combine4_descr[] = "combine4: Array reference, accumulate in temporary";$/;"	v
combine4b	opt/dpb-O2.c	/^void combine4b(vec_ptr v, data_t *dest)$/;"	f
combine4b_descr	opt/dpb-O2.c	/^char combine4b_descr[] = "combine4b: Include bonds check in loop";$/;"	v
combine4p	opt/dpb-O2.c	/^void combine4p(vec_ptr v, data_t *dest)$/;"	f
combine4p_descr	opt/dpb-O2.c	/^char combine4p_descr[] = "combine4p: Pointer reference, accumulate in temporary";$/;"	v
combine5	opt/dpb-O2.c	/^void combine5(vec_ptr v, data_t *dest)$/;"	f
combine5_descr	opt/dpb-O2.c	/^char combine5_descr[] = "combine5: Array code, unrolled by 2";$/;"	v
combine5p	opt/dpb-O2.c	/^void combine5p(vec_ptr v, data_t *dest)$/;"	f
combine5p_descr	opt/dpb-O2.c	/^char combine5p_descr[] = "combine5p: Pointer code, unrolled by 2, for loop";$/;"	v
combine6	opt/dpb-O2.c	/^void combine6(vec_ptr v, data_t *dest)$/;"	f
combine6_descr	opt/dpb-O2.c	/^char combine6_descr[] = "combine6: Array code, unrolled by 2, Superscalar x2";$/;"	v
combine7	opt/dpb-O2.c	/^void combine7(vec_ptr v, data_t *dest)$/;"	f
combine7_descr	opt/dpb-O2.c	/^char combine7_descr[] = "combine7: Array code, unrolled by 2, different associativity";$/;"	v
d	opt/dpb-O2.c	/^    data_t d[VSIZE];$/;"	m	union:__anon31	file:
pack_t	opt/dpb-O2.c	/^} pack_t;$/;"	t	typeref:union:__anon31	file:
register_combiners	opt/dpb-O2.c	/^void register_combiners(void)$/;"	f
simd_v10_combine	opt/dpb-O2.c	/^void simd_v10_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v10_descr	opt/dpb-O2.c	/^char simd_v10_descr[] = "simd_v10: SSE code, 10*VSIZE-way parallelism";$/;"	v
simd_v12_combine	opt/dpb-O2.c	/^void simd_v12_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v12_descr	opt/dpb-O2.c	/^char simd_v12_descr[] = "simd_v12: SSE code, 12*VSIZE-way parallelism";$/;"	v
simd_v1_combine	opt/dpb-O2.c	/^void simd_v1_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v1_descr	opt/dpb-O2.c	/^char simd_v1_descr[] = "simd_v1: SSE code, 1*VSIZE-way parallelism";$/;"	v
simd_v2_combine	opt/dpb-O2.c	/^void simd_v2_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2_descr	opt/dpb-O2.c	/^char simd_v2_descr[] = "simd_v2: SSE code, 2*VSIZE-way parallelism";$/;"	v
simd_v2a_combine	opt/dpb-O2.c	/^void simd_v2a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2a_descr	opt/dpb-O2.c	/^char simd_v2a_descr[] = "simd_v2a: SSE code, 2*VSIZE-way parallelism, reassociate";$/;"	v
simd_v4_combine	opt/dpb-O2.c	/^void simd_v4_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4_descr	opt/dpb-O2.c	/^char simd_v4_descr[] = "simd_v4: SSE code, 4*VSIZE-way parallelism";$/;"	v
simd_v4a_combine	opt/dpb-O2.c	/^void simd_v4a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4a_descr	opt/dpb-O2.c	/^char simd_v4a_descr[] = "simd_v4a: SSE code, 4*VSIZE-way parallelism, reassociate";$/;"	v
simd_v8_combine	opt/dpb-O2.c	/^void simd_v8_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8_descr	opt/dpb-O2.c	/^char simd_v8_descr[] = "simd_v8: SSE code, 8*VSIZE-way parallelism";$/;"	v
simd_v8a_combine	opt/dpb-O2.c	/^void simd_v8a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8a_descr	opt/dpb-O2.c	/^char simd_v8a_descr[] = "simd_v8a: SSE code, 8*VSIZE-way parallelism, reassociate";$/;"	v
unroll10a_combine	opt/dpb-O2.c	/^void unroll10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10a_descr	opt/dpb-O2.c	/^char unroll10a_descr[] = "unroll10a: Array code, unrolled by 10";$/;"	v
unroll10aa_combine	opt/dpb-O2.c	/^void unroll10aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10aa_descr	opt/dpb-O2.c	/^char unroll10aa_descr[] = "unroll10aa: Array code, unrolled by 10, Different Associativity";$/;"	v
unroll10x10a_combine	opt/dpb-O2.c	/^void unroll10x10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10x10a_descr	opt/dpb-O2.c	/^char unroll10x10a_descr[] = "unroll10x10a: Array code, unrolled by 10, Superscalar x10";$/;"	v
unroll12aa_combine	opt/dpb-O2.c	/^void unroll12aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12aa_descr	opt/dpb-O2.c	/^char unroll12aa_descr[] = "unroll12aa: Array code, unrolled by 12, Different Associativity";$/;"	v
unroll12x12a_combine	opt/dpb-O2.c	/^void unroll12x12a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x12a_descr	opt/dpb-O2.c	/^char unroll12x12a_descr[] = "unroll12x12a: Array code, unrolled by 12, Superscalar x12";$/;"	v
unroll12x6a_combine	opt/dpb-O2.c	/^void unroll12x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x6a_descr	opt/dpb-O2.c	/^char unroll12x6a_descr[] = "unroll2x6a: Array code, unrolled by 12, Superscalar x6";$/;"	v
unroll16_combine	opt/dpb-O2.c	/^void unroll16_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16_descr	opt/dpb-O2.c	/^char unroll16_descr[] = "unroll16: Pointer code, unrolled by 16";$/;"	v
unroll16a_combine	opt/dpb-O2.c	/^void unroll16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16a_descr	opt/dpb-O2.c	/^char unroll16a_descr[] = "unroll16a: Array code, unrolled by 16";$/;"	v
unroll16x16a_combine	opt/dpb-O2.c	/^void unroll16x16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16x16a_descr	opt/dpb-O2.c	/^char unroll16x16a_descr[] = "unroll16x16a: Array code, unrolled by 16, Superscalar x16";$/;"	v
unroll20x20a_combine	opt/dpb-O2.c	/^void unroll20x20a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll20x20a_descr	opt/dpb-O2.c	/^char unroll20x20a_descr[] = "unroll20x20a: Array code, unrolled by 20, Superscalar x20";$/;"	v
unroll2_combine	opt/dpb-O2.c	/^void unroll2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2_descr	opt/dpb-O2.c	/^char unroll2_descr[] = "unroll2: Pointer code, unrolled by 2";$/;"	v
unroll2aw_combine	opt/dpb-O2.c	/^void unroll2aw_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2aw_descr	opt/dpb-O2.c	/^char unroll2aw_descr[] = "unroll2aw: Array code, unrolled by 2, while loop";$/;"	v
unroll3_combine	opt/dpb-O2.c	/^void unroll3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3_descr	opt/dpb-O2.c	/^char unroll3_descr[] = "unroll3: Pointer code, unrolled by 3";$/;"	v
unroll3a_combine	opt/dpb-O2.c	/^void unroll3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3a_descr	opt/dpb-O2.c	/^char unroll3a_descr[] = "unroll3a: Array code, unrolled by 3";$/;"	v
unroll3aa_combine	opt/dpb-O2.c	/^void unroll3aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3aa_descr	opt/dpb-O2.c	/^char unroll3aa_descr[] = "unroll3aa: Array code, unrolled by 3, Different Associativity";$/;"	v
unroll3x3a_combine	opt/dpb-O2.c	/^void unroll3x3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3x3a_descr	opt/dpb-O2.c	/^char unroll3x3a_descr[] = "unroll3x3a: Array code, unrolled by 3, Superscalar x3";$/;"	v
unroll4_combine	opt/dpb-O2.c	/^void unroll4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4_descr	opt/dpb-O2.c	/^char unroll4_descr[] = "unroll4: Pointer code, unrolled by 4";$/;"	v
unroll4a_combine	opt/dpb-O2.c	/^void unroll4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4a_descr	opt/dpb-O2.c	/^char unroll4a_descr[] = "unroll4a: Array code, unrolled by 4";$/;"	v
unroll4aa_combine	opt/dpb-O2.c	/^void unroll4aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4aa_descr	opt/dpb-O2.c	/^char unroll4aa_descr[] = "unroll4aa: Array code, unrolled by 4, Different Associativity";$/;"	v
unroll4x2a_combine	opt/dpb-O2.c	/^void unroll4x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2a_descr	opt/dpb-O2.c	/^char unroll4x2a_descr[] = "unroll4x2a: Array code, unrolled by 4, Superscalar x2";$/;"	v
unroll4x2as_combine	opt/dpb-O2.c	/^void unroll4x2as_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2as_descr	opt/dpb-O2.c	/^char unroll4x2as_descr[] = "unroll4x2as: Array code, Unroll x4, Superscalar x2, noninterleaved";$/;"	v
unroll4x4a_combine	opt/dpb-O2.c	/^void unroll4x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x4a_descr	opt/dpb-O2.c	/^char unroll4x4a_descr[] = "unroll4x4a: Array code, unrolled by 4, Superscalar x4";$/;"	v
unroll5a_combine	opt/dpb-O2.c	/^void unroll5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5a_descr	opt/dpb-O2.c	/^char unroll5a_descr[] = "unroll5a: Array code, unrolled by 5";$/;"	v
unroll5aa_combine	opt/dpb-O2.c	/^void unroll5aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5aa_descr	opt/dpb-O2.c	/^char unroll5aa_descr[] = "unroll5aa: Array code, unrolled by 5, Different Associativity";$/;"	v
unroll5x5a_combine	opt/dpb-O2.c	/^void unroll5x5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5x5a_descr	opt/dpb-O2.c	/^char unroll5x5a_descr[] = "unroll5x5a: Array code, unrolled by 5, Superscalar x5";$/;"	v
unroll6a_combine	opt/dpb-O2.c	/^void unroll6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6a_descr	opt/dpb-O2.c	/^char unroll6a_descr[] = "unroll6a: Array code, unrolled by 6";$/;"	v
unroll6aa_combine	opt/dpb-O2.c	/^void unroll6aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6aa_descr	opt/dpb-O2.c	/^char unroll6aa_descr[] = "unroll6aa: Array code, unrolled by 6, Different Associativity";$/;"	v
unroll6x6a_combine	opt/dpb-O2.c	/^void unroll6x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6x6a_descr	opt/dpb-O2.c	/^char unroll6x6a_descr[] = "unroll6x6a: Array code, unrolled by 6, Superscalar x6";$/;"	v
unroll7a_combine	opt/dpb-O2.c	/^void unroll7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7a_descr	opt/dpb-O2.c	/^char unroll7a_descr[] = "unroll7a: Array code, unrolled by 7";$/;"	v
unroll7aa_combine	opt/dpb-O2.c	/^void unroll7aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7aa_descr	opt/dpb-O2.c	/^char unroll7aa_descr[] = "unroll7aa: Array code, unrolled by 7, Different Associativity";$/;"	v
unroll7x7a_combine	opt/dpb-O2.c	/^void unroll7x7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7x7a_descr	opt/dpb-O2.c	/^char unroll7x7a_descr[] = "unroll7x7a: Array code, unrolled by 7, Superscalar x7";$/;"	v
unroll8_combine	opt/dpb-O2.c	/^void unroll8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8_descr	opt/dpb-O2.c	/^char unroll8_descr[] = "unroll8: Pointer code, unrolled by 8";$/;"	v
unroll8a_combine	opt/dpb-O2.c	/^void unroll8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8a_descr	opt/dpb-O2.c	/^char unroll8a_descr[] = "unroll8a: Array code, unrolled by 8";$/;"	v
unroll8aa_combine	opt/dpb-O2.c	/^void unroll8aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8aa_descr	opt/dpb-O2.c	/^char unroll8aa_descr[] = "unroll8aa: Array code, unrolled by 8, Different Associativity";$/;"	v
unroll8x2_combine	opt/dpb-O2.c	/^void unroll8x2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2_descr	opt/dpb-O2.c	/^char unroll8x2_descr[] = "unroll8x2: Pointer code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x2a_combine	opt/dpb-O2.c	/^void unroll8x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2a_descr	opt/dpb-O2.c	/^char unroll8x2a_descr[] = "unroll8x2a: Array code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x4_combine	opt/dpb-O2.c	/^void unroll8x4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4_descr	opt/dpb-O2.c	/^char unroll8x4_descr[] = "unroll8x4: Pointer code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x4a_combine	opt/dpb-O2.c	/^void unroll8x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4a_descr	opt/dpb-O2.c	/^char unroll8x4a_descr[] = "unroll8x4a: Array code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x8_combine	opt/dpb-O2.c	/^void unroll8x8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8_descr	opt/dpb-O2.c	/^char unroll8x8_descr[] = "unroll8x8: Pointer code, unrolled by 8, Superscalar x8";$/;"	v
unroll8x8a_combine	opt/dpb-O2.c	/^void unroll8x8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8a_descr	opt/dpb-O2.c	/^char unroll8x8a_descr[] = "unroll8x8a: Array code, unrolled by 8, Superscalar x8";$/;"	v
unroll9a_combine	opt/dpb-O2.c	/^void unroll9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9a_descr	opt/dpb-O2.c	/^char unroll9a_descr[] = "unroll9a: Array code, unrolled by 9";$/;"	v
unroll9aa_combine	opt/dpb-O2.c	/^void unroll9aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9aa_descr	opt/dpb-O2.c	/^char unroll9aa_descr[] = "unroll9aa: Array code, unrolled by 9, Different Associativity";$/;"	v
unroll9x3_combine	opt/dpb-O2.c	/^void unroll9x3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x3_descr	opt/dpb-O2.c	/^char unroll9x3_descr[] = "unroll9x3: Pointer code, unrolled by 9, Superscalar x3";$/;"	v
unroll9x9a_combine	opt/dpb-O2.c	/^void unroll9x9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x9a_descr	opt/dpb-O2.c	/^char unroll9x9a_descr[] = "unroll9x9a: Array code, unrolled by 9, Superscalar x9";$/;"	v
unrollx2as_combine	opt/dpb-O2.c	/^void unrollx2as_combine(vec_ptr v, data_t *dest)$/;"	f
unrollx2as_descr	opt/dpb-O2.c	/^char unrollx2as_descr[] = "unrollx2as: Array code, Unroll x2, Superscalar x2, noninterleaved";$/;"	v
v	opt/dpb-O2.c	/^    vec_t v;$/;"	m	union:__anon31	file:
vec_t	opt/dpb-O2.c	/^typedef data_t vec_t __attribute__ ((vector_size(VBYTES)));$/;"	t	file:
VBYTES	opt/dpb.c	/^#define VBYTES /;"	d	file:
VSIZE	opt/dpb.c	/^#define VSIZE /;"	d	file:
combine1	opt/dpb.c	/^void combine1(vec_ptr v, data_t *dest)$/;"	f
combine1_descr	opt/dpb.c	/^char combine1_descr[] = "combine1: Maximum use of data abstraction";$/;"	v
combine2	opt/dpb.c	/^void combine2(vec_ptr v, data_t *dest)$/;"	f
combine2_descr	opt/dpb.c	/^char combine2_descr[] = "combine2: Take vec_length() out of loop";$/;"	v
combine3	opt/dpb.c	/^void combine3(vec_ptr v, data_t *dest)$/;"	f
combine3_descr	opt/dpb.c	/^char combine3_descr[] = "combine3: Array reference to vector data";$/;"	v
combine3w	opt/dpb.c	/^void combine3w(vec_ptr v, data_t *dest)$/;"	f
combine3w_descr	opt/dpb.c	/^char combine3w_descr[] = "combine3w: Update *dest within loop only with write";$/;"	v
combine4	opt/dpb.c	/^void combine4(vec_ptr v, data_t *dest)$/;"	f
combine4_descr	opt/dpb.c	/^char combine4_descr[] = "combine4: Array reference, accumulate in temporary";$/;"	v
combine4b	opt/dpb.c	/^void combine4b(vec_ptr v, data_t *dest)$/;"	f
combine4b_descr	opt/dpb.c	/^char combine4b_descr[] = "combine4b: Include bonds check in loop";$/;"	v
combine4p	opt/dpb.c	/^void combine4p(vec_ptr v, data_t *dest)$/;"	f
combine4p_descr	opt/dpb.c	/^char combine4p_descr[] = "combine4p: Pointer reference, accumulate in temporary";$/;"	v
combine5	opt/dpb.c	/^void combine5(vec_ptr v, data_t *dest)$/;"	f
combine5_descr	opt/dpb.c	/^char combine5_descr[] = "combine5: Array code, unrolled by 2";$/;"	v
combine5p	opt/dpb.c	/^void combine5p(vec_ptr v, data_t *dest)$/;"	f
combine5p_descr	opt/dpb.c	/^char combine5p_descr[] = "combine5p: Pointer code, unrolled by 2, for loop";$/;"	v
combine6	opt/dpb.c	/^void combine6(vec_ptr v, data_t *dest)$/;"	f
combine6_descr	opt/dpb.c	/^char combine6_descr[] = "combine6: Array code, unrolled by 2, Superscalar x2";$/;"	v
combine7	opt/dpb.c	/^void combine7(vec_ptr v, data_t *dest)$/;"	f
combine7_descr	opt/dpb.c	/^char combine7_descr[] = "combine7: Array code, unrolled by 2, different associativity";$/;"	v
d	opt/dpb.c	/^    data_t d[VSIZE];$/;"	m	union:__anon32	file:
pack_t	opt/dpb.c	/^} pack_t;$/;"	t	typeref:union:__anon32	file:
register_combiners	opt/dpb.c	/^void register_combiners(void)$/;"	f
simd_v12_combine	opt/dpb.c	/^void simd_v12_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v12_descr	opt/dpb.c	/^char simd_v12_descr[] = "simd_v12: SSE code, 12*VSIZE-way parallelism";$/;"	v
simd_v1_combine	opt/dpb.c	/^void simd_v1_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v1_descr	opt/dpb.c	/^char simd_v1_descr[] = "simd_v1: SSE code, 1*VSIZE-way parallelism";$/;"	v
simd_v2_combine	opt/dpb.c	/^void simd_v2_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2_descr	opt/dpb.c	/^char simd_v2_descr[] = "simd_v2: SSE code, 2*VSIZE-way parallelism";$/;"	v
simd_v2a_combine	opt/dpb.c	/^void simd_v2a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2a_descr	opt/dpb.c	/^char simd_v2a_descr[] = "simd_v2a: SSE code, 2*VSIZE-way parallelism, reassociate";$/;"	v
simd_v4_combine	opt/dpb.c	/^void simd_v4_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4_descr	opt/dpb.c	/^char simd_v4_descr[] = "simd_v4: SSE code, 4*VSIZE-way parallelism";$/;"	v
simd_v4a_combine	opt/dpb.c	/^void simd_v4a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4a_descr	opt/dpb.c	/^char simd_v4a_descr[] = "simd_v4a: SSE code, 4*VSIZE-way parallelism, reassociate";$/;"	v
simd_v8_combine	opt/dpb.c	/^void simd_v8_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8_descr	opt/dpb.c	/^char simd_v8_descr[] = "simd_v8: SSE code, 8*VSIZE-way parallelism";$/;"	v
simd_v8a_combine	opt/dpb.c	/^void simd_v8a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8a_descr	opt/dpb.c	/^char simd_v8a_descr[] = "simd_v8a: SSE code, 8*VSIZE-way parallelism, reassociate";$/;"	v
unroll10a_combine	opt/dpb.c	/^void unroll10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10a_descr	opt/dpb.c	/^char unroll10a_descr[] = "unroll10a: Array code, unrolled by 10";$/;"	v
unroll10aa_combine	opt/dpb.c	/^void unroll10aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10aa_descr	opt/dpb.c	/^char unroll10aa_descr[] = "unroll10aa: Array code, unrolled by 10, Different Associativity";$/;"	v
unroll10x10a_combine	opt/dpb.c	/^void unroll10x10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10x10a_descr	opt/dpb.c	/^char unroll10x10a_descr[] = "unroll10x10a: Array code, unrolled by 10, Superscalar x10";$/;"	v
unroll12aa_combine	opt/dpb.c	/^void unroll12aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12aa_descr	opt/dpb.c	/^char unroll12aa_descr[] = "unroll12aa: Array code, unrolled by 12, Different Associativity";$/;"	v
unroll12x12a_combine	opt/dpb.c	/^void unroll12x12a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x12a_descr	opt/dpb.c	/^char unroll12x12a_descr[] = "unroll12x12a: Array code, unrolled by 12, Superscalar x12";$/;"	v
unroll12x6a_combine	opt/dpb.c	/^void unroll12x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x6a_descr	opt/dpb.c	/^char unroll12x6a_descr[] = "unroll2x6a: Array code, unrolled by 12, Superscalar x6";$/;"	v
unroll16_combine	opt/dpb.c	/^void unroll16_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16_descr	opt/dpb.c	/^char unroll16_descr[] = "unroll16: Pointer code, unrolled by 16";$/;"	v
unroll16a_combine	opt/dpb.c	/^void unroll16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16a_descr	opt/dpb.c	/^char unroll16a_descr[] = "unroll16a: Array code, unrolled by 16";$/;"	v
unroll2_combine	opt/dpb.c	/^void unroll2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2_descr	opt/dpb.c	/^char unroll2_descr[] = "unroll2: Pointer code, unrolled by 2";$/;"	v
unroll2aw_combine	opt/dpb.c	/^void unroll2aw_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2aw_descr	opt/dpb.c	/^char unroll2aw_descr[] = "unroll2aw: Array code, unrolled by 2, while loop";$/;"	v
unroll3_combine	opt/dpb.c	/^void unroll3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3_descr	opt/dpb.c	/^char unroll3_descr[] = "unroll3: Pointer code, unrolled by 3";$/;"	v
unroll3a_combine	opt/dpb.c	/^void unroll3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3a_descr	opt/dpb.c	/^char unroll3a_descr[] = "unroll3a: Array code, unrolled by 3";$/;"	v
unroll3aa_combine	opt/dpb.c	/^void unroll3aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3aa_descr	opt/dpb.c	/^char unroll3aa_descr[] = "unroll3aa: Array code, unrolled by 3, Different Associativity";$/;"	v
unroll3x3a_combine	opt/dpb.c	/^void unroll3x3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3x3a_descr	opt/dpb.c	/^char unroll3x3a_descr[] = "unroll3x3a: Array code, unrolled by 3, Superscalar x3";$/;"	v
unroll4_combine	opt/dpb.c	/^void unroll4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4_descr	opt/dpb.c	/^char unroll4_descr[] = "unroll4: Pointer code, unrolled by 4";$/;"	v
unroll4a_combine	opt/dpb.c	/^void unroll4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4a_descr	opt/dpb.c	/^char unroll4a_descr[] = "unroll4a: Array code, unrolled by 4";$/;"	v
unroll4aa_combine	opt/dpb.c	/^void unroll4aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4aa_descr	opt/dpb.c	/^char unroll4aa_descr[] = "unroll4aa: Array code, unrolled by 4, Different Associativity";$/;"	v
unroll4x2a_combine	opt/dpb.c	/^void unroll4x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2a_descr	opt/dpb.c	/^char unroll4x2a_descr[] = "unroll4x2a: Array code, unrolled by 4, Superscalar x2";$/;"	v
unroll4x2as_combine	opt/dpb.c	/^void unroll4x2as_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2as_descr	opt/dpb.c	/^char unroll4x2as_descr[] = "unroll4x2as: Array code, Unroll x4, Superscalar x2, noninterleaved";$/;"	v
unroll4x4a_combine	opt/dpb.c	/^void unroll4x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x4a_descr	opt/dpb.c	/^char unroll4x4a_descr[] = "unroll4x4a: Array code, unrolled by 4, Superscalar x4";$/;"	v
unroll5a_combine	opt/dpb.c	/^void unroll5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5a_descr	opt/dpb.c	/^char unroll5a_descr[] = "unroll5a: Array code, unrolled by 5";$/;"	v
unroll5aa_combine	opt/dpb.c	/^void unroll5aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5aa_descr	opt/dpb.c	/^char unroll5aa_descr[] = "unroll5aa: Array code, unrolled by 5, Different Associativity";$/;"	v
unroll5x5a_combine	opt/dpb.c	/^void unroll5x5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5x5a_descr	opt/dpb.c	/^char unroll5x5a_descr[] = "unroll5x5a: Array code, unrolled by 5, Superscalar x5";$/;"	v
unroll6a_combine	opt/dpb.c	/^void unroll6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6a_descr	opt/dpb.c	/^char unroll6a_descr[] = "unroll6a: Array code, unrolled by 6";$/;"	v
unroll6aa_combine	opt/dpb.c	/^void unroll6aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6aa_descr	opt/dpb.c	/^char unroll6aa_descr[] = "unroll6aa: Array code, unrolled by 6, Different Associativity";$/;"	v
unroll6x6a_combine	opt/dpb.c	/^void unroll6x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6x6a_descr	opt/dpb.c	/^char unroll6x6a_descr[] = "unroll6x6a: Array code, unrolled by 6, Superscalar x6";$/;"	v
unroll7a_combine	opt/dpb.c	/^void unroll7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7a_descr	opt/dpb.c	/^char unroll7a_descr[] = "unroll7a: Array code, unrolled by 7";$/;"	v
unroll7aa_combine	opt/dpb.c	/^void unroll7aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7aa_descr	opt/dpb.c	/^char unroll7aa_descr[] = "unroll7aa: Array code, unrolled by 7, Different Associativity";$/;"	v
unroll7x7a_combine	opt/dpb.c	/^void unroll7x7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7x7a_descr	opt/dpb.c	/^char unroll7x7a_descr[] = "unroll7x7a: Array code, unrolled by 7, Superscalar x7";$/;"	v
unroll8_combine	opt/dpb.c	/^void unroll8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8_descr	opt/dpb.c	/^char unroll8_descr[] = "unroll8: Pointer code, unrolled by 8";$/;"	v
unroll8a_combine	opt/dpb.c	/^void unroll8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8a_descr	opt/dpb.c	/^char unroll8a_descr[] = "unroll8a: Array code, unrolled by 8";$/;"	v
unroll8aa_combine	opt/dpb.c	/^void unroll8aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8aa_descr	opt/dpb.c	/^char unroll8aa_descr[] = "unroll8aa: Array code, unrolled by 8, Different Associativity";$/;"	v
unroll8x2_combine	opt/dpb.c	/^void unroll8x2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2_descr	opt/dpb.c	/^char unroll8x2_descr[] = "unroll8x2: Pointer code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x2a_combine	opt/dpb.c	/^void unroll8x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2a_descr	opt/dpb.c	/^char unroll8x2a_descr[] = "unroll8x2a: Array code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x4_combine	opt/dpb.c	/^void unroll8x4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4_descr	opt/dpb.c	/^char unroll8x4_descr[] = "unroll8x4: Pointer code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x4a_combine	opt/dpb.c	/^void unroll8x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4a_descr	opt/dpb.c	/^char unroll8x4a_descr[] = "unroll8x4a: Array code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x8_combine	opt/dpb.c	/^void unroll8x8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8_descr	opt/dpb.c	/^char unroll8x8_descr[] = "unroll8x8: Pointer code, unrolled by 8, Superscalar x8";$/;"	v
unroll8x8a_combine	opt/dpb.c	/^void unroll8x8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8a_descr	opt/dpb.c	/^char unroll8x8a_descr[] = "unroll8x8a: Array code, unrolled by 8, Superscalar x8";$/;"	v
unroll9a_combine	opt/dpb.c	/^void unroll9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9a_descr	opt/dpb.c	/^char unroll9a_descr[] = "unroll9a: Array code, unrolled by 9";$/;"	v
unroll9aa_combine	opt/dpb.c	/^void unroll9aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9aa_descr	opt/dpb.c	/^char unroll9aa_descr[] = "unroll9aa: Array code, unrolled by 9, Different Associativity";$/;"	v
unroll9x3_combine	opt/dpb.c	/^void unroll9x3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x3_descr	opt/dpb.c	/^char unroll9x3_descr[] = "unroll9x3: Pointer code, unrolled by 9, Superscalar x3";$/;"	v
unroll9x9a_combine	opt/dpb.c	/^void unroll9x9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x9a_descr	opt/dpb.c	/^char unroll9x9a_descr[] = "unroll9x9a: Array code, unrolled by 9, Superscalar x9";$/;"	v
unrollx2as_combine	opt/dpb.c	/^void unrollx2as_combine(vec_ptr v, data_t *dest)$/;"	f
unrollx2as_descr	opt/dpb.c	/^char unrollx2as_descr[] = "unrollx2as: Array code, Unroll x2, Superscalar x2, noninterleaved";$/;"	v
v	opt/dpb.c	/^    vec_t v;$/;"	m	union:__anon32	file:
vec_t	opt/dpb.c	/^typedef data_t vec_t __attribute__ ((vector_size(VBYTES)));$/;"	t	file:
ASIZE	opt/fact.c	/^#define ASIZE /;"	d	file:
TEST_COUNT	opt/fact.c	/^#define TEST_COUNT /;"	d	file:
fact	opt/fact.c	/^long fact(long n)$/;"	f
fact_fun	opt/fact.c	/^typedef long (*fact_fun)(long);$/;"	t	file:
fact_u2a	opt/fact.c	/^long fact_u2a(long n)$/;"	f
fact_u2b	opt/fact.c	/^long fact_u2b(long n)$/;"	f
fact_u2c	opt/fact.c	/^long fact_u2c(long n)$/;"	f
fact_u3a	opt/fact.c	/^long fact_u3a(long n)$/;"	f
fact_u3b	opt/fact.c	/^long fact_u3b(long n)$/;"	f
fact_u3c	opt/fact.c	/^long fact_u3c(long n)$/;"	f
ftest	opt/fact.c	/^static void ftest(long i)$/;"	f	file:
funs	opt/fact.c	/^static fact_fun funs[TEST_COUNT] =$/;"	v	file:
idx	opt/fact.c	/^long idx = 0;$/;"	v
main	opt/fact.c	/^int main()$/;"	f
rfact	opt/fact.c	/^long rfact(long n)$/;"	f
rfact_a	opt/fact.c	/^long rfact_a(long n)$/;"	f
run_test	opt/fact.c	/^static void run_test(long i) $/;"	f	file:
test	opt/fact.c	/^static void test(long n)$/;"	f	file:
test_descr	opt/fact.c	/^static char *test_descr[TEST_COUNT] =$/;"	v	file:
VBYTES	opt/fpb-O1.c	/^#define VBYTES /;"	d	file:
VSIZE	opt/fpb-O1.c	/^#define VSIZE /;"	d	file:
combine1	opt/fpb-O1.c	/^void combine1(vec_ptr v, data_t *dest)$/;"	f
combine1_descr	opt/fpb-O1.c	/^char combine1_descr[] = "combine1: Maximum use of data abstraction";$/;"	v
combine2	opt/fpb-O1.c	/^void combine2(vec_ptr v, data_t *dest)$/;"	f
combine2_descr	opt/fpb-O1.c	/^char combine2_descr[] = "combine2: Take vec_length() out of loop";$/;"	v
combine3	opt/fpb-O1.c	/^void combine3(vec_ptr v, data_t *dest)$/;"	f
combine3_descr	opt/fpb-O1.c	/^char combine3_descr[] = "combine3: Array reference to vector data";$/;"	v
combine3w	opt/fpb-O1.c	/^void combine3w(vec_ptr v, data_t *dest)$/;"	f
combine3w_descr	opt/fpb-O1.c	/^char combine3w_descr[] = "combine3w: Update *dest within loop only with write";$/;"	v
combine4	opt/fpb-O1.c	/^void combine4(vec_ptr v, data_t *dest)$/;"	f
combine4_descr	opt/fpb-O1.c	/^char combine4_descr[] = "combine4: Array reference, accumulate in temporary";$/;"	v
combine4b	opt/fpb-O1.c	/^void combine4b(vec_ptr v, data_t *dest)$/;"	f
combine4b_descr	opt/fpb-O1.c	/^char combine4b_descr[] = "combine4b: Include bonds check in loop";$/;"	v
combine4p	opt/fpb-O1.c	/^void combine4p(vec_ptr v, data_t *dest)$/;"	f
combine4p_descr	opt/fpb-O1.c	/^char combine4p_descr[] = "combine4p: Pointer reference, accumulate in temporary";$/;"	v
combine5	opt/fpb-O1.c	/^void combine5(vec_ptr v, data_t *dest)$/;"	f
combine5_descr	opt/fpb-O1.c	/^char combine5_descr[] = "combine5: Array code, unrolled by 2";$/;"	v
combine5p	opt/fpb-O1.c	/^void combine5p(vec_ptr v, data_t *dest)$/;"	f
combine5p_descr	opt/fpb-O1.c	/^char combine5p_descr[] = "combine5p: Pointer code, unrolled by 2, for loop";$/;"	v
combine6	opt/fpb-O1.c	/^void combine6(vec_ptr v, data_t *dest)$/;"	f
combine6_descr	opt/fpb-O1.c	/^char combine6_descr[] = "combine6: Array code, unrolled by 2, Superscalar x2";$/;"	v
combine7	opt/fpb-O1.c	/^void combine7(vec_ptr v, data_t *dest)$/;"	f
combine7_descr	opt/fpb-O1.c	/^char combine7_descr[] = "combine7: Array code, unrolled by 2, different associativity";$/;"	v
d	opt/fpb-O1.c	/^    data_t d[VSIZE];$/;"	m	union:__anon33	file:
pack_t	opt/fpb-O1.c	/^} pack_t;$/;"	t	typeref:union:__anon33	file:
register_combiners	opt/fpb-O1.c	/^void register_combiners(void)$/;"	f
simd_v10_combine	opt/fpb-O1.c	/^void simd_v10_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v10_descr	opt/fpb-O1.c	/^char simd_v10_descr[] = "simd_v10: SSE code, 10*VSIZE-way parallelism";$/;"	v
simd_v12_combine	opt/fpb-O1.c	/^void simd_v12_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v12_descr	opt/fpb-O1.c	/^char simd_v12_descr[] = "simd_v12: SSE code, 12*VSIZE-way parallelism";$/;"	v
simd_v1_combine	opt/fpb-O1.c	/^void simd_v1_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v1_descr	opt/fpb-O1.c	/^char simd_v1_descr[] = "simd_v1: SSE code, 1*VSIZE-way parallelism";$/;"	v
simd_v2_combine	opt/fpb-O1.c	/^void simd_v2_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2_descr	opt/fpb-O1.c	/^char simd_v2_descr[] = "simd_v2: SSE code, 2*VSIZE-way parallelism";$/;"	v
simd_v2a_combine	opt/fpb-O1.c	/^void simd_v2a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2a_descr	opt/fpb-O1.c	/^char simd_v2a_descr[] = "simd_v2a: SSE code, 2*VSIZE-way parallelism, reassociate";$/;"	v
simd_v4_combine	opt/fpb-O1.c	/^void simd_v4_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4_descr	opt/fpb-O1.c	/^char simd_v4_descr[] = "simd_v4: SSE code, 4*VSIZE-way parallelism";$/;"	v
simd_v4a_combine	opt/fpb-O1.c	/^void simd_v4a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4a_descr	opt/fpb-O1.c	/^char simd_v4a_descr[] = "simd_v4a: SSE code, 4*VSIZE-way parallelism, reassociate";$/;"	v
simd_v8_combine	opt/fpb-O1.c	/^void simd_v8_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8_descr	opt/fpb-O1.c	/^char simd_v8_descr[] = "simd_v8: SSE code, 8*VSIZE-way parallelism";$/;"	v
simd_v8a_combine	opt/fpb-O1.c	/^void simd_v8a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8a_descr	opt/fpb-O1.c	/^char simd_v8a_descr[] = "simd_v8a: SSE code, 8*VSIZE-way parallelism, reassociate";$/;"	v
unroll10a_combine	opt/fpb-O1.c	/^void unroll10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10a_descr	opt/fpb-O1.c	/^char unroll10a_descr[] = "unroll10a: Array code, unrolled by 10";$/;"	v
unroll10aa_combine	opt/fpb-O1.c	/^void unroll10aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10aa_descr	opt/fpb-O1.c	/^char unroll10aa_descr[] = "unroll10aa: Array code, unrolled by 10, Different Associativity";$/;"	v
unroll10x10a_combine	opt/fpb-O1.c	/^void unroll10x10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10x10a_descr	opt/fpb-O1.c	/^char unroll10x10a_descr[] = "unroll10x10a: Array code, unrolled by 10, Superscalar x10";$/;"	v
unroll12aa_combine	opt/fpb-O1.c	/^void unroll12aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12aa_descr	opt/fpb-O1.c	/^char unroll12aa_descr[] = "unroll12aa: Array code, unrolled by 12, Different Associativity";$/;"	v
unroll12x12a_combine	opt/fpb-O1.c	/^void unroll12x12a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x12a_descr	opt/fpb-O1.c	/^char unroll12x12a_descr[] = "unroll12x12a: Array code, unrolled by 12, Superscalar x12";$/;"	v
unroll12x6a_combine	opt/fpb-O1.c	/^void unroll12x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x6a_descr	opt/fpb-O1.c	/^char unroll12x6a_descr[] = "unroll2x6a: Array code, unrolled by 12, Superscalar x6";$/;"	v
unroll16_combine	opt/fpb-O1.c	/^void unroll16_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16_descr	opt/fpb-O1.c	/^char unroll16_descr[] = "unroll16: Pointer code, unrolled by 16";$/;"	v
unroll16a_combine	opt/fpb-O1.c	/^void unroll16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16a_descr	opt/fpb-O1.c	/^char unroll16a_descr[] = "unroll16a: Array code, unrolled by 16";$/;"	v
unroll16x16a_combine	opt/fpb-O1.c	/^void unroll16x16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16x16a_descr	opt/fpb-O1.c	/^char unroll16x16a_descr[] = "unroll16x16a: Array code, unrolled by 16, Superscalar x16";$/;"	v
unroll20x20a_combine	opt/fpb-O1.c	/^void unroll20x20a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll20x20a_descr	opt/fpb-O1.c	/^char unroll20x20a_descr[] = "unroll20x20a: Array code, unrolled by 20, Superscalar x20";$/;"	v
unroll2_combine	opt/fpb-O1.c	/^void unroll2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2_descr	opt/fpb-O1.c	/^char unroll2_descr[] = "unroll2: Pointer code, unrolled by 2";$/;"	v
unroll2aw_combine	opt/fpb-O1.c	/^void unroll2aw_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2aw_descr	opt/fpb-O1.c	/^char unroll2aw_descr[] = "unroll2aw: Array code, unrolled by 2, while loop";$/;"	v
unroll3_combine	opt/fpb-O1.c	/^void unroll3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3_descr	opt/fpb-O1.c	/^char unroll3_descr[] = "unroll3: Pointer code, unrolled by 3";$/;"	v
unroll3a_combine	opt/fpb-O1.c	/^void unroll3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3a_descr	opt/fpb-O1.c	/^char unroll3a_descr[] = "unroll3a: Array code, unrolled by 3";$/;"	v
unroll3aa_combine	opt/fpb-O1.c	/^void unroll3aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3aa_descr	opt/fpb-O1.c	/^char unroll3aa_descr[] = "unroll3aa: Array code, unrolled by 3, Different Associativity";$/;"	v
unroll3x3a_combine	opt/fpb-O1.c	/^void unroll3x3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3x3a_descr	opt/fpb-O1.c	/^char unroll3x3a_descr[] = "unroll3x3a: Array code, unrolled by 3, Superscalar x3";$/;"	v
unroll4_combine	opt/fpb-O1.c	/^void unroll4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4_descr	opt/fpb-O1.c	/^char unroll4_descr[] = "unroll4: Pointer code, unrolled by 4";$/;"	v
unroll4a_combine	opt/fpb-O1.c	/^void unroll4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4a_descr	opt/fpb-O1.c	/^char unroll4a_descr[] = "unroll4a: Array code, unrolled by 4";$/;"	v
unroll4aa_combine	opt/fpb-O1.c	/^void unroll4aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4aa_descr	opt/fpb-O1.c	/^char unroll4aa_descr[] = "unroll4aa: Array code, unrolled by 4, Different Associativity";$/;"	v
unroll4x2a_combine	opt/fpb-O1.c	/^void unroll4x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2a_descr	opt/fpb-O1.c	/^char unroll4x2a_descr[] = "unroll4x2a: Array code, unrolled by 4, Superscalar x2";$/;"	v
unroll4x2as_combine	opt/fpb-O1.c	/^void unroll4x2as_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2as_descr	opt/fpb-O1.c	/^char unroll4x2as_descr[] = "unroll4x2as: Array code, Unroll x4, Superscalar x2, noninterleaved";$/;"	v
unroll4x4a_combine	opt/fpb-O1.c	/^void unroll4x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x4a_descr	opt/fpb-O1.c	/^char unroll4x4a_descr[] = "unroll4x4a: Array code, unrolled by 4, Superscalar x4";$/;"	v
unroll5a_combine	opt/fpb-O1.c	/^void unroll5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5a_descr	opt/fpb-O1.c	/^char unroll5a_descr[] = "unroll5a: Array code, unrolled by 5";$/;"	v
unroll5aa_combine	opt/fpb-O1.c	/^void unroll5aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5aa_descr	opt/fpb-O1.c	/^char unroll5aa_descr[] = "unroll5aa: Array code, unrolled by 5, Different Associativity";$/;"	v
unroll5x5a_combine	opt/fpb-O1.c	/^void unroll5x5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5x5a_descr	opt/fpb-O1.c	/^char unroll5x5a_descr[] = "unroll5x5a: Array code, unrolled by 5, Superscalar x5";$/;"	v
unroll6a_combine	opt/fpb-O1.c	/^void unroll6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6a_descr	opt/fpb-O1.c	/^char unroll6a_descr[] = "unroll6a: Array code, unrolled by 6";$/;"	v
unroll6aa_combine	opt/fpb-O1.c	/^void unroll6aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6aa_descr	opt/fpb-O1.c	/^char unroll6aa_descr[] = "unroll6aa: Array code, unrolled by 6, Different Associativity";$/;"	v
unroll6x6a_combine	opt/fpb-O1.c	/^void unroll6x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6x6a_descr	opt/fpb-O1.c	/^char unroll6x6a_descr[] = "unroll6x6a: Array code, unrolled by 6, Superscalar x6";$/;"	v
unroll7a_combine	opt/fpb-O1.c	/^void unroll7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7a_descr	opt/fpb-O1.c	/^char unroll7a_descr[] = "unroll7a: Array code, unrolled by 7";$/;"	v
unroll7aa_combine	opt/fpb-O1.c	/^void unroll7aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7aa_descr	opt/fpb-O1.c	/^char unroll7aa_descr[] = "unroll7aa: Array code, unrolled by 7, Different Associativity";$/;"	v
unroll7x7a_combine	opt/fpb-O1.c	/^void unroll7x7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7x7a_descr	opt/fpb-O1.c	/^char unroll7x7a_descr[] = "unroll7x7a: Array code, unrolled by 7, Superscalar x7";$/;"	v
unroll8_combine	opt/fpb-O1.c	/^void unroll8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8_descr	opt/fpb-O1.c	/^char unroll8_descr[] = "unroll8: Pointer code, unrolled by 8";$/;"	v
unroll8a_combine	opt/fpb-O1.c	/^void unroll8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8a_descr	opt/fpb-O1.c	/^char unroll8a_descr[] = "unroll8a: Array code, unrolled by 8";$/;"	v
unroll8aa_combine	opt/fpb-O1.c	/^void unroll8aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8aa_descr	opt/fpb-O1.c	/^char unroll8aa_descr[] = "unroll8aa: Array code, unrolled by 8, Different Associativity";$/;"	v
unroll8x2_combine	opt/fpb-O1.c	/^void unroll8x2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2_descr	opt/fpb-O1.c	/^char unroll8x2_descr[] = "unroll8x2: Pointer code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x2a_combine	opt/fpb-O1.c	/^void unroll8x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2a_descr	opt/fpb-O1.c	/^char unroll8x2a_descr[] = "unroll8x2a: Array code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x4_combine	opt/fpb-O1.c	/^void unroll8x4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4_descr	opt/fpb-O1.c	/^char unroll8x4_descr[] = "unroll8x4: Pointer code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x4a_combine	opt/fpb-O1.c	/^void unroll8x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4a_descr	opt/fpb-O1.c	/^char unroll8x4a_descr[] = "unroll8x4a: Array code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x8_combine	opt/fpb-O1.c	/^void unroll8x8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8_descr	opt/fpb-O1.c	/^char unroll8x8_descr[] = "unroll8x8: Pointer code, unrolled by 8, Superscalar x8";$/;"	v
unroll8x8a_combine	opt/fpb-O1.c	/^void unroll8x8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8a_descr	opt/fpb-O1.c	/^char unroll8x8a_descr[] = "unroll8x8a: Array code, unrolled by 8, Superscalar x8";$/;"	v
unroll9a_combine	opt/fpb-O1.c	/^void unroll9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9a_descr	opt/fpb-O1.c	/^char unroll9a_descr[] = "unroll9a: Array code, unrolled by 9";$/;"	v
unroll9aa_combine	opt/fpb-O1.c	/^void unroll9aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9aa_descr	opt/fpb-O1.c	/^char unroll9aa_descr[] = "unroll9aa: Array code, unrolled by 9, Different Associativity";$/;"	v
unroll9x3_combine	opt/fpb-O1.c	/^void unroll9x3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x3_descr	opt/fpb-O1.c	/^char unroll9x3_descr[] = "unroll9x3: Pointer code, unrolled by 9, Superscalar x3";$/;"	v
unroll9x9a_combine	opt/fpb-O1.c	/^void unroll9x9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x9a_descr	opt/fpb-O1.c	/^char unroll9x9a_descr[] = "unroll9x9a: Array code, unrolled by 9, Superscalar x9";$/;"	v
unrollx2as_combine	opt/fpb-O1.c	/^void unrollx2as_combine(vec_ptr v, data_t *dest)$/;"	f
unrollx2as_descr	opt/fpb-O1.c	/^char unrollx2as_descr[] = "unrollx2as: Array code, Unroll x2, Superscalar x2, noninterleaved";$/;"	v
v	opt/fpb-O1.c	/^    vec_t v;$/;"	m	union:__anon33	file:
vec_t	opt/fpb-O1.c	/^typedef data_t vec_t __attribute__ ((vector_size(VBYTES)));$/;"	t	file:
VBYTES	opt/fpb-O2.c	/^#define VBYTES /;"	d	file:
VSIZE	opt/fpb-O2.c	/^#define VSIZE /;"	d	file:
combine1	opt/fpb-O2.c	/^void combine1(vec_ptr v, data_t *dest)$/;"	f
combine1_descr	opt/fpb-O2.c	/^char combine1_descr[] = "combine1: Maximum use of data abstraction";$/;"	v
combine2	opt/fpb-O2.c	/^void combine2(vec_ptr v, data_t *dest)$/;"	f
combine2_descr	opt/fpb-O2.c	/^char combine2_descr[] = "combine2: Take vec_length() out of loop";$/;"	v
combine3	opt/fpb-O2.c	/^void combine3(vec_ptr v, data_t *dest)$/;"	f
combine3_descr	opt/fpb-O2.c	/^char combine3_descr[] = "combine3: Array reference to vector data";$/;"	v
combine3w	opt/fpb-O2.c	/^void combine3w(vec_ptr v, data_t *dest)$/;"	f
combine3w_descr	opt/fpb-O2.c	/^char combine3w_descr[] = "combine3w: Update *dest within loop only with write";$/;"	v
combine4	opt/fpb-O2.c	/^void combine4(vec_ptr v, data_t *dest)$/;"	f
combine4_descr	opt/fpb-O2.c	/^char combine4_descr[] = "combine4: Array reference, accumulate in temporary";$/;"	v
combine4b	opt/fpb-O2.c	/^void combine4b(vec_ptr v, data_t *dest)$/;"	f
combine4b_descr	opt/fpb-O2.c	/^char combine4b_descr[] = "combine4b: Include bonds check in loop";$/;"	v
combine4p	opt/fpb-O2.c	/^void combine4p(vec_ptr v, data_t *dest)$/;"	f
combine4p_descr	opt/fpb-O2.c	/^char combine4p_descr[] = "combine4p: Pointer reference, accumulate in temporary";$/;"	v
combine5	opt/fpb-O2.c	/^void combine5(vec_ptr v, data_t *dest)$/;"	f
combine5_descr	opt/fpb-O2.c	/^char combine5_descr[] = "combine5: Array code, unrolled by 2";$/;"	v
combine5p	opt/fpb-O2.c	/^void combine5p(vec_ptr v, data_t *dest)$/;"	f
combine5p_descr	opt/fpb-O2.c	/^char combine5p_descr[] = "combine5p: Pointer code, unrolled by 2, for loop";$/;"	v
combine6	opt/fpb-O2.c	/^void combine6(vec_ptr v, data_t *dest)$/;"	f
combine6_descr	opt/fpb-O2.c	/^char combine6_descr[] = "combine6: Array code, unrolled by 2, Superscalar x2";$/;"	v
combine7	opt/fpb-O2.c	/^void combine7(vec_ptr v, data_t *dest)$/;"	f
combine7_descr	opt/fpb-O2.c	/^char combine7_descr[] = "combine7: Array code, unrolled by 2, different associativity";$/;"	v
d	opt/fpb-O2.c	/^    data_t d[VSIZE];$/;"	m	union:__anon34	file:
pack_t	opt/fpb-O2.c	/^} pack_t;$/;"	t	typeref:union:__anon34	file:
register_combiners	opt/fpb-O2.c	/^void register_combiners(void)$/;"	f
simd_v10_combine	opt/fpb-O2.c	/^void simd_v10_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v10_descr	opt/fpb-O2.c	/^char simd_v10_descr[] = "simd_v10: SSE code, 10*VSIZE-way parallelism";$/;"	v
simd_v12_combine	opt/fpb-O2.c	/^void simd_v12_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v12_descr	opt/fpb-O2.c	/^char simd_v12_descr[] = "simd_v12: SSE code, 12*VSIZE-way parallelism";$/;"	v
simd_v1_combine	opt/fpb-O2.c	/^void simd_v1_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v1_descr	opt/fpb-O2.c	/^char simd_v1_descr[] = "simd_v1: SSE code, 1*VSIZE-way parallelism";$/;"	v
simd_v2_combine	opt/fpb-O2.c	/^void simd_v2_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2_descr	opt/fpb-O2.c	/^char simd_v2_descr[] = "simd_v2: SSE code, 2*VSIZE-way parallelism";$/;"	v
simd_v2a_combine	opt/fpb-O2.c	/^void simd_v2a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2a_descr	opt/fpb-O2.c	/^char simd_v2a_descr[] = "simd_v2a: SSE code, 2*VSIZE-way parallelism, reassociate";$/;"	v
simd_v4_combine	opt/fpb-O2.c	/^void simd_v4_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4_descr	opt/fpb-O2.c	/^char simd_v4_descr[] = "simd_v4: SSE code, 4*VSIZE-way parallelism";$/;"	v
simd_v4a_combine	opt/fpb-O2.c	/^void simd_v4a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4a_descr	opt/fpb-O2.c	/^char simd_v4a_descr[] = "simd_v4a: SSE code, 4*VSIZE-way parallelism, reassociate";$/;"	v
simd_v8_combine	opt/fpb-O2.c	/^void simd_v8_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8_descr	opt/fpb-O2.c	/^char simd_v8_descr[] = "simd_v8: SSE code, 8*VSIZE-way parallelism";$/;"	v
simd_v8a_combine	opt/fpb-O2.c	/^void simd_v8a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8a_descr	opt/fpb-O2.c	/^char simd_v8a_descr[] = "simd_v8a: SSE code, 8*VSIZE-way parallelism, reassociate";$/;"	v
unroll10a_combine	opt/fpb-O2.c	/^void unroll10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10a_descr	opt/fpb-O2.c	/^char unroll10a_descr[] = "unroll10a: Array code, unrolled by 10";$/;"	v
unroll10aa_combine	opt/fpb-O2.c	/^void unroll10aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10aa_descr	opt/fpb-O2.c	/^char unroll10aa_descr[] = "unroll10aa: Array code, unrolled by 10, Different Associativity";$/;"	v
unroll10x10a_combine	opt/fpb-O2.c	/^void unroll10x10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10x10a_descr	opt/fpb-O2.c	/^char unroll10x10a_descr[] = "unroll10x10a: Array code, unrolled by 10, Superscalar x10";$/;"	v
unroll12aa_combine	opt/fpb-O2.c	/^void unroll12aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12aa_descr	opt/fpb-O2.c	/^char unroll12aa_descr[] = "unroll12aa: Array code, unrolled by 12, Different Associativity";$/;"	v
unroll12x12a_combine	opt/fpb-O2.c	/^void unroll12x12a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x12a_descr	opt/fpb-O2.c	/^char unroll12x12a_descr[] = "unroll12x12a: Array code, unrolled by 12, Superscalar x12";$/;"	v
unroll12x6a_combine	opt/fpb-O2.c	/^void unroll12x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x6a_descr	opt/fpb-O2.c	/^char unroll12x6a_descr[] = "unroll2x6a: Array code, unrolled by 12, Superscalar x6";$/;"	v
unroll16_combine	opt/fpb-O2.c	/^void unroll16_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16_descr	opt/fpb-O2.c	/^char unroll16_descr[] = "unroll16: Pointer code, unrolled by 16";$/;"	v
unroll16a_combine	opt/fpb-O2.c	/^void unroll16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16a_descr	opt/fpb-O2.c	/^char unroll16a_descr[] = "unroll16a: Array code, unrolled by 16";$/;"	v
unroll16x16a_combine	opt/fpb-O2.c	/^void unroll16x16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16x16a_descr	opt/fpb-O2.c	/^char unroll16x16a_descr[] = "unroll16x16a: Array code, unrolled by 16, Superscalar x16";$/;"	v
unroll20x20a_combine	opt/fpb-O2.c	/^void unroll20x20a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll20x20a_descr	opt/fpb-O2.c	/^char unroll20x20a_descr[] = "unroll20x20a: Array code, unrolled by 20, Superscalar x20";$/;"	v
unroll2_combine	opt/fpb-O2.c	/^void unroll2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2_descr	opt/fpb-O2.c	/^char unroll2_descr[] = "unroll2: Pointer code, unrolled by 2";$/;"	v
unroll2aw_combine	opt/fpb-O2.c	/^void unroll2aw_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2aw_descr	opt/fpb-O2.c	/^char unroll2aw_descr[] = "unroll2aw: Array code, unrolled by 2, while loop";$/;"	v
unroll3_combine	opt/fpb-O2.c	/^void unroll3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3_descr	opt/fpb-O2.c	/^char unroll3_descr[] = "unroll3: Pointer code, unrolled by 3";$/;"	v
unroll3a_combine	opt/fpb-O2.c	/^void unroll3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3a_descr	opt/fpb-O2.c	/^char unroll3a_descr[] = "unroll3a: Array code, unrolled by 3";$/;"	v
unroll3aa_combine	opt/fpb-O2.c	/^void unroll3aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3aa_descr	opt/fpb-O2.c	/^char unroll3aa_descr[] = "unroll3aa: Array code, unrolled by 3, Different Associativity";$/;"	v
unroll3x3a_combine	opt/fpb-O2.c	/^void unroll3x3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3x3a_descr	opt/fpb-O2.c	/^char unroll3x3a_descr[] = "unroll3x3a: Array code, unrolled by 3, Superscalar x3";$/;"	v
unroll4_combine	opt/fpb-O2.c	/^void unroll4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4_descr	opt/fpb-O2.c	/^char unroll4_descr[] = "unroll4: Pointer code, unrolled by 4";$/;"	v
unroll4a_combine	opt/fpb-O2.c	/^void unroll4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4a_descr	opt/fpb-O2.c	/^char unroll4a_descr[] = "unroll4a: Array code, unrolled by 4";$/;"	v
unroll4aa_combine	opt/fpb-O2.c	/^void unroll4aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4aa_descr	opt/fpb-O2.c	/^char unroll4aa_descr[] = "unroll4aa: Array code, unrolled by 4, Different Associativity";$/;"	v
unroll4x2a_combine	opt/fpb-O2.c	/^void unroll4x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2a_descr	opt/fpb-O2.c	/^char unroll4x2a_descr[] = "unroll4x2a: Array code, unrolled by 4, Superscalar x2";$/;"	v
unroll4x2as_combine	opt/fpb-O2.c	/^void unroll4x2as_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2as_descr	opt/fpb-O2.c	/^char unroll4x2as_descr[] = "unroll4x2as: Array code, Unroll x4, Superscalar x2, noninterleaved";$/;"	v
unroll4x4a_combine	opt/fpb-O2.c	/^void unroll4x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x4a_descr	opt/fpb-O2.c	/^char unroll4x4a_descr[] = "unroll4x4a: Array code, unrolled by 4, Superscalar x4";$/;"	v
unroll5a_combine	opt/fpb-O2.c	/^void unroll5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5a_descr	opt/fpb-O2.c	/^char unroll5a_descr[] = "unroll5a: Array code, unrolled by 5";$/;"	v
unroll5aa_combine	opt/fpb-O2.c	/^void unroll5aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5aa_descr	opt/fpb-O2.c	/^char unroll5aa_descr[] = "unroll5aa: Array code, unrolled by 5, Different Associativity";$/;"	v
unroll5x5a_combine	opt/fpb-O2.c	/^void unroll5x5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5x5a_descr	opt/fpb-O2.c	/^char unroll5x5a_descr[] = "unroll5x5a: Array code, unrolled by 5, Superscalar x5";$/;"	v
unroll6a_combine	opt/fpb-O2.c	/^void unroll6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6a_descr	opt/fpb-O2.c	/^char unroll6a_descr[] = "unroll6a: Array code, unrolled by 6";$/;"	v
unroll6aa_combine	opt/fpb-O2.c	/^void unroll6aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6aa_descr	opt/fpb-O2.c	/^char unroll6aa_descr[] = "unroll6aa: Array code, unrolled by 6, Different Associativity";$/;"	v
unroll6x6a_combine	opt/fpb-O2.c	/^void unroll6x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6x6a_descr	opt/fpb-O2.c	/^char unroll6x6a_descr[] = "unroll6x6a: Array code, unrolled by 6, Superscalar x6";$/;"	v
unroll7a_combine	opt/fpb-O2.c	/^void unroll7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7a_descr	opt/fpb-O2.c	/^char unroll7a_descr[] = "unroll7a: Array code, unrolled by 7";$/;"	v
unroll7aa_combine	opt/fpb-O2.c	/^void unroll7aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7aa_descr	opt/fpb-O2.c	/^char unroll7aa_descr[] = "unroll7aa: Array code, unrolled by 7, Different Associativity";$/;"	v
unroll7x7a_combine	opt/fpb-O2.c	/^void unroll7x7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7x7a_descr	opt/fpb-O2.c	/^char unroll7x7a_descr[] = "unroll7x7a: Array code, unrolled by 7, Superscalar x7";$/;"	v
unroll8_combine	opt/fpb-O2.c	/^void unroll8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8_descr	opt/fpb-O2.c	/^char unroll8_descr[] = "unroll8: Pointer code, unrolled by 8";$/;"	v
unroll8a_combine	opt/fpb-O2.c	/^void unroll8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8a_descr	opt/fpb-O2.c	/^char unroll8a_descr[] = "unroll8a: Array code, unrolled by 8";$/;"	v
unroll8aa_combine	opt/fpb-O2.c	/^void unroll8aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8aa_descr	opt/fpb-O2.c	/^char unroll8aa_descr[] = "unroll8aa: Array code, unrolled by 8, Different Associativity";$/;"	v
unroll8x2_combine	opt/fpb-O2.c	/^void unroll8x2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2_descr	opt/fpb-O2.c	/^char unroll8x2_descr[] = "unroll8x2: Pointer code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x2a_combine	opt/fpb-O2.c	/^void unroll8x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2a_descr	opt/fpb-O2.c	/^char unroll8x2a_descr[] = "unroll8x2a: Array code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x4_combine	opt/fpb-O2.c	/^void unroll8x4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4_descr	opt/fpb-O2.c	/^char unroll8x4_descr[] = "unroll8x4: Pointer code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x4a_combine	opt/fpb-O2.c	/^void unroll8x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4a_descr	opt/fpb-O2.c	/^char unroll8x4a_descr[] = "unroll8x4a: Array code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x8_combine	opt/fpb-O2.c	/^void unroll8x8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8_descr	opt/fpb-O2.c	/^char unroll8x8_descr[] = "unroll8x8: Pointer code, unrolled by 8, Superscalar x8";$/;"	v
unroll8x8a_combine	opt/fpb-O2.c	/^void unroll8x8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8a_descr	opt/fpb-O2.c	/^char unroll8x8a_descr[] = "unroll8x8a: Array code, unrolled by 8, Superscalar x8";$/;"	v
unroll9a_combine	opt/fpb-O2.c	/^void unroll9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9a_descr	opt/fpb-O2.c	/^char unroll9a_descr[] = "unroll9a: Array code, unrolled by 9";$/;"	v
unroll9aa_combine	opt/fpb-O2.c	/^void unroll9aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9aa_descr	opt/fpb-O2.c	/^char unroll9aa_descr[] = "unroll9aa: Array code, unrolled by 9, Different Associativity";$/;"	v
unroll9x3_combine	opt/fpb-O2.c	/^void unroll9x3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x3_descr	opt/fpb-O2.c	/^char unroll9x3_descr[] = "unroll9x3: Pointer code, unrolled by 9, Superscalar x3";$/;"	v
unroll9x9a_combine	opt/fpb-O2.c	/^void unroll9x9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x9a_descr	opt/fpb-O2.c	/^char unroll9x9a_descr[] = "unroll9x9a: Array code, unrolled by 9, Superscalar x9";$/;"	v
unrollx2as_combine	opt/fpb-O2.c	/^void unrollx2as_combine(vec_ptr v, data_t *dest)$/;"	f
unrollx2as_descr	opt/fpb-O2.c	/^char unrollx2as_descr[] = "unrollx2as: Array code, Unroll x2, Superscalar x2, noninterleaved";$/;"	v
v	opt/fpb-O2.c	/^    vec_t v;$/;"	m	union:__anon34	file:
vec_t	opt/fpb-O2.c	/^typedef data_t vec_t __attribute__ ((vector_size(VBYTES)));$/;"	t	file:
fragments	opt/fragments.c	/^void fragments() $/;"	f
incr	opt/fragments.c	/^void incr(long *xp, long v) { *xp += v; }$/;"	f
max	opt/fragments.c	/^long max(long x, long y) { return x < y ? y : x; }  $/;"	f
min	opt/fragments.c	/^long min(long x, long y) { return x < y ? x : y; }$/;"	f
square	opt/fragments.c	/^long square(long x) { return x*x; }$/;"	f
counter	opt/func.c	/^long counter = 0;$/;"	v
f	opt/func.c	/^long f() {$/;"	f
func1	opt/func.c	/^long func1() {$/;"	f
func1in	opt/func.c	/^long func1in() {$/;"	f
func1opt	opt/func.c	/^long func1opt() {$/;"	f
func2	opt/func.c	/^long func2() {$/;"	f
main	opt/func.c	/^int main(int argc, char *argv[]) {$/;"	f
VBYTES	opt/ipb-O1.c	/^#define VBYTES /;"	d	file:
VSIZE	opt/ipb-O1.c	/^#define VSIZE /;"	d	file:
combine1	opt/ipb-O1.c	/^void combine1(vec_ptr v, data_t *dest)$/;"	f
combine1_descr	opt/ipb-O1.c	/^char combine1_descr[] = "combine1: Maximum use of data abstraction";$/;"	v
combine2	opt/ipb-O1.c	/^void combine2(vec_ptr v, data_t *dest)$/;"	f
combine2_descr	opt/ipb-O1.c	/^char combine2_descr[] = "combine2: Take vec_length() out of loop";$/;"	v
combine3	opt/ipb-O1.c	/^void combine3(vec_ptr v, data_t *dest)$/;"	f
combine3_descr	opt/ipb-O1.c	/^char combine3_descr[] = "combine3: Array reference to vector data";$/;"	v
combine3w	opt/ipb-O1.c	/^void combine3w(vec_ptr v, data_t *dest)$/;"	f
combine3w_descr	opt/ipb-O1.c	/^char combine3w_descr[] = "combine3w: Update *dest within loop only with write";$/;"	v
combine4	opt/ipb-O1.c	/^void combine4(vec_ptr v, data_t *dest)$/;"	f
combine4_descr	opt/ipb-O1.c	/^char combine4_descr[] = "combine4: Array reference, accumulate in temporary";$/;"	v
combine4b	opt/ipb-O1.c	/^void combine4b(vec_ptr v, data_t *dest)$/;"	f
combine4b_descr	opt/ipb-O1.c	/^char combine4b_descr[] = "combine4b: Include bonds check in loop";$/;"	v
combine4p	opt/ipb-O1.c	/^void combine4p(vec_ptr v, data_t *dest)$/;"	f
combine4p_descr	opt/ipb-O1.c	/^char combine4p_descr[] = "combine4p: Pointer reference, accumulate in temporary";$/;"	v
combine5	opt/ipb-O1.c	/^void combine5(vec_ptr v, data_t *dest)$/;"	f
combine5_descr	opt/ipb-O1.c	/^char combine5_descr[] = "combine5: Array code, unrolled by 2";$/;"	v
combine5p	opt/ipb-O1.c	/^void combine5p(vec_ptr v, data_t *dest)$/;"	f
combine5p_descr	opt/ipb-O1.c	/^char combine5p_descr[] = "combine5p: Pointer code, unrolled by 2, for loop";$/;"	v
combine6	opt/ipb-O1.c	/^void combine6(vec_ptr v, data_t *dest)$/;"	f
combine6_descr	opt/ipb-O1.c	/^char combine6_descr[] = "combine6: Array code, unrolled by 2, Superscalar x2";$/;"	v
combine7	opt/ipb-O1.c	/^void combine7(vec_ptr v, data_t *dest)$/;"	f
combine7_descr	opt/ipb-O1.c	/^char combine7_descr[] = "combine7: Array code, unrolled by 2, different associativity";$/;"	v
d	opt/ipb-O1.c	/^    data_t d[VSIZE];$/;"	m	union:__anon35	file:
pack_t	opt/ipb-O1.c	/^} pack_t;$/;"	t	typeref:union:__anon35	file:
register_combiners	opt/ipb-O1.c	/^void register_combiners(void)$/;"	f
simd_v12_combine	opt/ipb-O1.c	/^void simd_v12_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v12_descr	opt/ipb-O1.c	/^char simd_v12_descr[] = "simd_v12: SSE code, 12*VSIZE-way parallelism";$/;"	v
simd_v1_combine	opt/ipb-O1.c	/^void simd_v1_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v1_descr	opt/ipb-O1.c	/^char simd_v1_descr[] = "simd_v1: SSE code, 1*VSIZE-way parallelism";$/;"	v
simd_v2_combine	opt/ipb-O1.c	/^void simd_v2_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2_descr	opt/ipb-O1.c	/^char simd_v2_descr[] = "simd_v2: SSE code, 2*VSIZE-way parallelism";$/;"	v
simd_v2a_combine	opt/ipb-O1.c	/^void simd_v2a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2a_descr	opt/ipb-O1.c	/^char simd_v2a_descr[] = "simd_v2a: SSE code, 2*VSIZE-way parallelism, reassociate";$/;"	v
simd_v4_combine	opt/ipb-O1.c	/^void simd_v4_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4_descr	opt/ipb-O1.c	/^char simd_v4_descr[] = "simd_v4: SSE code, 4*VSIZE-way parallelism";$/;"	v
simd_v4a_combine	opt/ipb-O1.c	/^void simd_v4a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4a_descr	opt/ipb-O1.c	/^char simd_v4a_descr[] = "simd_v4a: SSE code, 4*VSIZE-way parallelism, reassociate";$/;"	v
simd_v8_combine	opt/ipb-O1.c	/^void simd_v8_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8_descr	opt/ipb-O1.c	/^char simd_v8_descr[] = "simd_v8: SSE code, 8*VSIZE-way parallelism";$/;"	v
simd_v8a_combine	opt/ipb-O1.c	/^void simd_v8a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8a_descr	opt/ipb-O1.c	/^char simd_v8a_descr[] = "simd_v8a: SSE code, 8*VSIZE-way parallelism, reassociate";$/;"	v
unroll10a_combine	opt/ipb-O1.c	/^void unroll10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10a_descr	opt/ipb-O1.c	/^char unroll10a_descr[] = "unroll10a: Array code, unrolled by 10";$/;"	v
unroll10aa_combine	opt/ipb-O1.c	/^void unroll10aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10aa_descr	opt/ipb-O1.c	/^char unroll10aa_descr[] = "unroll10aa: Array code, unrolled by 10, Different Associativity";$/;"	v
unroll10x10a_combine	opt/ipb-O1.c	/^void unroll10x10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10x10a_descr	opt/ipb-O1.c	/^char unroll10x10a_descr[] = "unroll10x10a: Array code, unrolled by 10, Superscalar x10";$/;"	v
unroll12aa_combine	opt/ipb-O1.c	/^void unroll12aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12aa_descr	opt/ipb-O1.c	/^char unroll12aa_descr[] = "unroll12aa: Array code, unrolled by 12, Different Associativity";$/;"	v
unroll12x12a_combine	opt/ipb-O1.c	/^void unroll12x12a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x12a_descr	opt/ipb-O1.c	/^char unroll12x12a_descr[] = "unroll12x12a: Array code, unrolled by 12, Superscalar x12";$/;"	v
unroll12x6a_combine	opt/ipb-O1.c	/^void unroll12x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x6a_descr	opt/ipb-O1.c	/^char unroll12x6a_descr[] = "unroll2x6a: Array code, unrolled by 12, Superscalar x6";$/;"	v
unroll16_combine	opt/ipb-O1.c	/^void unroll16_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16_descr	opt/ipb-O1.c	/^char unroll16_descr[] = "unroll16: Pointer code, unrolled by 16";$/;"	v
unroll16a_combine	opt/ipb-O1.c	/^void unroll16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16a_descr	opt/ipb-O1.c	/^char unroll16a_descr[] = "unroll16a: Array code, unrolled by 16";$/;"	v
unroll2_combine	opt/ipb-O1.c	/^void unroll2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2_descr	opt/ipb-O1.c	/^char unroll2_descr[] = "unroll2: Pointer code, unrolled by 2";$/;"	v
unroll2aw_combine	opt/ipb-O1.c	/^void unroll2aw_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2aw_descr	opt/ipb-O1.c	/^char unroll2aw_descr[] = "unroll2aw: Array code, unrolled by 2, while loop";$/;"	v
unroll3_combine	opt/ipb-O1.c	/^void unroll3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3_descr	opt/ipb-O1.c	/^char unroll3_descr[] = "unroll3: Pointer code, unrolled by 3";$/;"	v
unroll3a_combine	opt/ipb-O1.c	/^void unroll3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3a_descr	opt/ipb-O1.c	/^char unroll3a_descr[] = "unroll3a: Array code, unrolled by 3";$/;"	v
unroll3aa_combine	opt/ipb-O1.c	/^void unroll3aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3aa_descr	opt/ipb-O1.c	/^char unroll3aa_descr[] = "unroll3aa: Array code, unrolled by 3, Different Associativity";$/;"	v
unroll3x3a_combine	opt/ipb-O1.c	/^void unroll3x3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3x3a_descr	opt/ipb-O1.c	/^char unroll3x3a_descr[] = "unroll3x3a: Array code, unrolled by 3, Superscalar x3";$/;"	v
unroll4_combine	opt/ipb-O1.c	/^void unroll4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4_descr	opt/ipb-O1.c	/^char unroll4_descr[] = "unroll4: Pointer code, unrolled by 4";$/;"	v
unroll4a_combine	opt/ipb-O1.c	/^void unroll4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4a_descr	opt/ipb-O1.c	/^char unroll4a_descr[] = "unroll4a: Array code, unrolled by 4";$/;"	v
unroll4aa_combine	opt/ipb-O1.c	/^void unroll4aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4aa_descr	opt/ipb-O1.c	/^char unroll4aa_descr[] = "unroll4aa: Array code, unrolled by 4, Different Associativity";$/;"	v
unroll4x2a_combine	opt/ipb-O1.c	/^void unroll4x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2a_descr	opt/ipb-O1.c	/^char unroll4x2a_descr[] = "unroll4x2a: Array code, unrolled by 4, Superscalar x2";$/;"	v
unroll4x2as_combine	opt/ipb-O1.c	/^void unroll4x2as_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2as_descr	opt/ipb-O1.c	/^char unroll4x2as_descr[] = "unroll4x2as: Array code, Unroll x4, Superscalar x2, noninterleaved";$/;"	v
unroll4x4a_combine	opt/ipb-O1.c	/^void unroll4x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x4a_descr	opt/ipb-O1.c	/^char unroll4x4a_descr[] = "unroll4x4a: Array code, unrolled by 4, Superscalar x4";$/;"	v
unroll5a_combine	opt/ipb-O1.c	/^void unroll5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5a_descr	opt/ipb-O1.c	/^char unroll5a_descr[] = "unroll5a: Array code, unrolled by 5";$/;"	v
unroll5aa_combine	opt/ipb-O1.c	/^void unroll5aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5aa_descr	opt/ipb-O1.c	/^char unroll5aa_descr[] = "unroll5aa: Array code, unrolled by 5, Different Associativity";$/;"	v
unroll5x5a_combine	opt/ipb-O1.c	/^void unroll5x5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5x5a_descr	opt/ipb-O1.c	/^char unroll5x5a_descr[] = "unroll5x5a: Array code, unrolled by 5, Superscalar x5";$/;"	v
unroll6a_combine	opt/ipb-O1.c	/^void unroll6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6a_descr	opt/ipb-O1.c	/^char unroll6a_descr[] = "unroll6a: Array code, unrolled by 6";$/;"	v
unroll6aa_combine	opt/ipb-O1.c	/^void unroll6aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6aa_descr	opt/ipb-O1.c	/^char unroll6aa_descr[] = "unroll6aa: Array code, unrolled by 6, Different Associativity";$/;"	v
unroll6x6a_combine	opt/ipb-O1.c	/^void unroll6x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6x6a_descr	opt/ipb-O1.c	/^char unroll6x6a_descr[] = "unroll6x6a: Array code, unrolled by 6, Superscalar x6";$/;"	v
unroll7a_combine	opt/ipb-O1.c	/^void unroll7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7a_descr	opt/ipb-O1.c	/^char unroll7a_descr[] = "unroll7a: Array code, unrolled by 7";$/;"	v
unroll7aa_combine	opt/ipb-O1.c	/^void unroll7aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7aa_descr	opt/ipb-O1.c	/^char unroll7aa_descr[] = "unroll7aa: Array code, unrolled by 7, Different Associativity";$/;"	v
unroll7x7a_combine	opt/ipb-O1.c	/^void unroll7x7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7x7a_descr	opt/ipb-O1.c	/^char unroll7x7a_descr[] = "unroll7x7a: Array code, unrolled by 7, Superscalar x7";$/;"	v
unroll8_combine	opt/ipb-O1.c	/^void unroll8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8_descr	opt/ipb-O1.c	/^char unroll8_descr[] = "unroll8: Pointer code, unrolled by 8";$/;"	v
unroll8a_combine	opt/ipb-O1.c	/^void unroll8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8a_descr	opt/ipb-O1.c	/^char unroll8a_descr[] = "unroll8a: Array code, unrolled by 8";$/;"	v
unroll8aa_combine	opt/ipb-O1.c	/^void unroll8aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8aa_descr	opt/ipb-O1.c	/^char unroll8aa_descr[] = "unroll8aa: Array code, unrolled by 8, Different Associativity";$/;"	v
unroll8x2_combine	opt/ipb-O1.c	/^void unroll8x2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2_descr	opt/ipb-O1.c	/^char unroll8x2_descr[] = "unroll8x2: Pointer code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x2a_combine	opt/ipb-O1.c	/^void unroll8x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2a_descr	opt/ipb-O1.c	/^char unroll8x2a_descr[] = "unroll8x2a: Array code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x4_combine	opt/ipb-O1.c	/^void unroll8x4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4_descr	opt/ipb-O1.c	/^char unroll8x4_descr[] = "unroll8x4: Pointer code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x4a_combine	opt/ipb-O1.c	/^void unroll8x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4a_descr	opt/ipb-O1.c	/^char unroll8x4a_descr[] = "unroll8x4a: Array code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x8_combine	opt/ipb-O1.c	/^void unroll8x8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8_descr	opt/ipb-O1.c	/^char unroll8x8_descr[] = "unroll8x8: Pointer code, unrolled by 8, Superscalar x8";$/;"	v
unroll8x8a_combine	opt/ipb-O1.c	/^void unroll8x8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8a_descr	opt/ipb-O1.c	/^char unroll8x8a_descr[] = "unroll8x8a: Array code, unrolled by 8, Superscalar x8";$/;"	v
unroll9a_combine	opt/ipb-O1.c	/^void unroll9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9a_descr	opt/ipb-O1.c	/^char unroll9a_descr[] = "unroll9a: Array code, unrolled by 9";$/;"	v
unroll9aa_combine	opt/ipb-O1.c	/^void unroll9aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9aa_descr	opt/ipb-O1.c	/^char unroll9aa_descr[] = "unroll9aa: Array code, unrolled by 9, Different Associativity";$/;"	v
unroll9x3_combine	opt/ipb-O1.c	/^void unroll9x3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x3_descr	opt/ipb-O1.c	/^char unroll9x3_descr[] = "unroll9x3: Pointer code, unrolled by 9, Superscalar x3";$/;"	v
unroll9x9a_combine	opt/ipb-O1.c	/^void unroll9x9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x9a_descr	opt/ipb-O1.c	/^char unroll9x9a_descr[] = "unroll9x9a: Array code, unrolled by 9, Superscalar x9";$/;"	v
unrollx2as_combine	opt/ipb-O1.c	/^void unrollx2as_combine(vec_ptr v, data_t *dest)$/;"	f
unrollx2as_descr	opt/ipb-O1.c	/^char unrollx2as_descr[] = "unrollx2as: Array code, Unroll x2, Superscalar x2, noninterleaved";$/;"	v
v	opt/ipb-O1.c	/^    vec_t v;$/;"	m	union:__anon35	file:
vec_t	opt/ipb-O1.c	/^typedef data_t vec_t __attribute__ ((vector_size(VBYTES)));$/;"	t	file:
ASIZE	opt/list.c	/^#define ASIZE /;"	d	file:
CASE2_COUNT	opt/list.c	/^#define CASE2_COUNT /;"	d	file:
ELE	opt/list.c	/^typedef struct ELE {$/;"	s	file:
TEST2_COUNT	opt/list.c	/^#define TEST2_COUNT /;"	d	file:
TEST_COUNT	opt/list.c	/^#define TEST_COUNT /;"	d	file:
case2_descr	opt/list.c	/^static char *case2_descr[CASE2_COUNT] = $/;"	v	file:
case_fun	opt/list.c	/^static test_fun2 case_fun[CASE2_COUNT] =$/;"	v	file:
data	opt/list.c	/^    long data;$/;"	m	struct:ELE	file:
list2_fun	opt/list.c	/^typedef void (*list2_fun)(list_ptr, list_ptr);$/;"	t	file:
list_copy	opt/list.c	/^void list_copy(list_ptr src, list_ptr dest)$/;"	f
list_ele	opt/list.c	/^} list_ele, *list_ptr;$/;"	t	typeref:struct:ELE	file:
list_fun	opt/list.c	/^typedef long (*list_fun)(list_ptr);$/;"	t	file:
list_len	opt/list.c	/^long list_len(list_ptr ls) {$/;"	f
list_len_clear	opt/list.c	/^long list_len_clear(list_ptr ls)$/;"	f
list_ptr	opt/list.c	/^} list_ele, *list_ptr;$/;"	t	typeref:struct:ELE	file:
list_sum	opt/list.c	/^long list_sum(list_ptr ls)$/;"	f
list_sum2	opt/list.c	/^long list_sum2(list_ptr ls)$/;"	f
list_sum_clear	opt/list.c	/^long list_sum_clear(list_ptr ls)$/;"	f
main	opt/list.c	/^int main()$/;"	f
main_list	opt/list.c	/^list_ele main_list[ASIZE];$/;"	v
myindex	opt/list.c	/^static long myindex = 0;$/;"	v	file:
mylink	opt/list.c	/^void mylink(long len)$/;"	f
next	opt/list.c	/^    struct ELE *next;$/;"	m	struct:ELE	typeref:struct:ELE::ELE	file:
pipe_sum2	opt/list.c	/^long pipe_sum2(list_ptr ls)$/;"	f
plist_copy	opt/list.c	/^void plist_copy(list_ptr src, list_ptr dest)$/;"	f
plist_copy2	opt/list.c	/^void plist_copy2(list_ptr src, list_ptr dest)$/;"	f
rlist_len	opt/list.c	/^long rlist_len(list_ptr ls)$/;"	f
rlist_sum	opt/list.c	/^long rlist_sum(list_ptr ls)$/;"	f
run_test	opt/list.c	/^static void run_test(long i)$/;"	f	file:
run_test2	opt/list.c	/^static void run_test2(long i, long c) $/;"	f	file:
stationary_copy	opt/list.c	/^void stationary_copy(list_ptr src, list_ptr dest)$/;"	f
test	opt/list.c	/^static void test(long n)$/;"	f	file:
test2_descr	opt/list.c	/^static char *test2_descr[TEST2_COUNT] = $/;"	v	file:
test2_fun	opt/list.c	/^static list2_fun test2_fun[TEST2_COUNT] = $/;"	v	file:
test2a	opt/list.c	/^static void test2a(long n)$/;"	f	file:
test2b	opt/list.c	/^static void test2b(long n)$/;"	f	file:
test2c	opt/list.c	/^static void test2c(long n)$/;"	f	file:
test_descr	opt/list.c	/^static char * test_descr[TEST_COUNT] =$/;"	v	file:
test_fun	opt/list.c	/^static list_fun test_fun[TEST_COUNT] = $/;"	v	file:
test_fun2	opt/list.c	/^typedef void (*test_fun2)(long);$/;"	t	file:
ABITS	opt/lower-obsolete.c	/^#define ABITS /;"	d	file:
ASIZE	opt/lower-obsolete.c	/^#define ASIZE /;"	d	file:
MAX_BENCHMARKS	opt/lower-obsolete.c	/^#define MAX_BENCHMARKS /;"	d	file:
current_lf	opt/lower-obsolete.c	/^lower_t current_lf;$/;"	v
data	opt/lower-obsolete.c	/^static char data[ASIZE];$/;"	v	file:
lin_lower	opt/lower-obsolete.c	/^void lin_lower(char *s)$/;"	f
lower_t	opt/lower-obsolete.c	/^typedef void (*lower_t)(char *);$/;"	t	file:
main	opt/lower-obsolete.c	/^int main()$/;"	f
quad_lower	opt/lower-obsolete.c	/^void quad_lower(char *s)$/;"	f
run	opt/lower-obsolete.c	/^void run(int *junk) {$/;"	f
run_test	opt/lower-obsolete.c	/^static void run_test(lower_t lf, int len)$/;"	f	file:
setup	opt/lower-obsolete.c	/^static void setup(int len)$/;"	f	file:
ASIZE	opt/lower.c	/^#define ASIZE /;"	d	file:
EMIN	opt/lower.c	/^#define EMIN /;"	d	file:
ESIZE	opt/lower.c	/^#define ESIZE /;"	d	file:
LINCR	opt/lower.c	/^#define LINCR /;"	d	file:
LSIZE	opt/lower.c	/^#define LSIZE /;"	d	file:
MAX_BENCHMARKS	opt/lower.c	/^#define MAX_BENCHMARKS /;"	d	file:
clock_rate	opt/lower.c	/^static double clock_rate = 0.0;$/;"	v	file:
data	opt/lower.c	/^static char data[ASIZE];$/;"	v	file:
expo	opt/lower.c	/^void expo()$/;"	f
init	opt/lower.c	/^static void init()$/;"	f	file:
linear	opt/lower.c	/^void linear()$/;"	f
lower1	opt/lower.c	/^void lower1(char *s)$/;"	f
lower2	opt/lower.c	/^void lower2(char *s)$/;"	f
main	opt/lower.c	/^int main(int argc, char *argv[])$/;"	f
run_test	opt/lower.c	/^static double run_test(test_funct fun, long len)$/;"	f	file:
set_len	opt/lower.c	/^static void set_len(long len)$/;"	f	file:
strlen	opt/lower.c	/^size_t strlen(const char *s)$/;"	f
test_lower1	opt/lower.c	/^void test_lower1(long *lenp)$/;"	f
test_lower2	opt/lower.c	/^void test_lower2(long *lenp)$/;"	f
unset_len	opt/lower.c	/^static void unset_len(long len)$/;"	f	file:
VBYTES	opt/lpb-O1.c	/^#define VBYTES /;"	d	file:
VSIZE	opt/lpb-O1.c	/^#define VSIZE /;"	d	file:
combine1	opt/lpb-O1.c	/^void combine1(vec_ptr v, data_t *dest)$/;"	f
combine1_descr	opt/lpb-O1.c	/^char combine1_descr[] = "combine1: Maximum use of data abstraction";$/;"	v
combine2	opt/lpb-O1.c	/^void combine2(vec_ptr v, data_t *dest)$/;"	f
combine2_descr	opt/lpb-O1.c	/^char combine2_descr[] = "combine2: Take vec_length() out of loop";$/;"	v
combine3	opt/lpb-O1.c	/^void combine3(vec_ptr v, data_t *dest)$/;"	f
combine3_descr	opt/lpb-O1.c	/^char combine3_descr[] = "combine3: Array reference to vector data";$/;"	v
combine3w	opt/lpb-O1.c	/^void combine3w(vec_ptr v, data_t *dest)$/;"	f
combine3w_descr	opt/lpb-O1.c	/^char combine3w_descr[] = "combine3w: Update *dest within loop only with write";$/;"	v
combine4	opt/lpb-O1.c	/^void combine4(vec_ptr v, data_t *dest)$/;"	f
combine4_descr	opt/lpb-O1.c	/^char combine4_descr[] = "combine4: Array reference, accumulate in temporary";$/;"	v
combine4b	opt/lpb-O1.c	/^void combine4b(vec_ptr v, data_t *dest)$/;"	f
combine4b_descr	opt/lpb-O1.c	/^char combine4b_descr[] = "combine4b: Include bonds check in loop";$/;"	v
combine4p	opt/lpb-O1.c	/^void combine4p(vec_ptr v, data_t *dest)$/;"	f
combine4p_descr	opt/lpb-O1.c	/^char combine4p_descr[] = "combine4p: Pointer reference, accumulate in temporary";$/;"	v
combine5	opt/lpb-O1.c	/^void combine5(vec_ptr v, data_t *dest)$/;"	f
combine5_descr	opt/lpb-O1.c	/^char combine5_descr[] = "combine5: Array code, unrolled by 2";$/;"	v
combine5p	opt/lpb-O1.c	/^void combine5p(vec_ptr v, data_t *dest)$/;"	f
combine5p_descr	opt/lpb-O1.c	/^char combine5p_descr[] = "combine5p: Pointer code, unrolled by 2, for loop";$/;"	v
combine6	opt/lpb-O1.c	/^void combine6(vec_ptr v, data_t *dest)$/;"	f
combine6_descr	opt/lpb-O1.c	/^char combine6_descr[] = "combine6: Array code, unrolled by 2, Superscalar x2";$/;"	v
combine7	opt/lpb-O1.c	/^void combine7(vec_ptr v, data_t *dest)$/;"	f
combine7_descr	opt/lpb-O1.c	/^char combine7_descr[] = "combine7: Array code, unrolled by 2, different associativity";$/;"	v
d	opt/lpb-O1.c	/^    data_t d[VSIZE];$/;"	m	union:__anon36	file:
pack_t	opt/lpb-O1.c	/^} pack_t;$/;"	t	typeref:union:__anon36	file:
register_combiners	opt/lpb-O1.c	/^void register_combiners(void)$/;"	f
simd_v12_combine	opt/lpb-O1.c	/^void simd_v12_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v12_descr	opt/lpb-O1.c	/^char simd_v12_descr[] = "simd_v12: SSE code, 12*VSIZE-way parallelism";$/;"	v
simd_v1_combine	opt/lpb-O1.c	/^void simd_v1_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v1_descr	opt/lpb-O1.c	/^char simd_v1_descr[] = "simd_v1: SSE code, 1*VSIZE-way parallelism";$/;"	v
simd_v2_combine	opt/lpb-O1.c	/^void simd_v2_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2_descr	opt/lpb-O1.c	/^char simd_v2_descr[] = "simd_v2: SSE code, 2*VSIZE-way parallelism";$/;"	v
simd_v2a_combine	opt/lpb-O1.c	/^void simd_v2a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2a_descr	opt/lpb-O1.c	/^char simd_v2a_descr[] = "simd_v2a: SSE code, 2*VSIZE-way parallelism, reassociate";$/;"	v
simd_v4_combine	opt/lpb-O1.c	/^void simd_v4_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4_descr	opt/lpb-O1.c	/^char simd_v4_descr[] = "simd_v4: SSE code, 4*VSIZE-way parallelism";$/;"	v
simd_v4a_combine	opt/lpb-O1.c	/^void simd_v4a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4a_descr	opt/lpb-O1.c	/^char simd_v4a_descr[] = "simd_v4a: SSE code, 4*VSIZE-way parallelism, reassociate";$/;"	v
simd_v8_combine	opt/lpb-O1.c	/^void simd_v8_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8_descr	opt/lpb-O1.c	/^char simd_v8_descr[] = "simd_v8: SSE code, 8*VSIZE-way parallelism";$/;"	v
simd_v8a_combine	opt/lpb-O1.c	/^void simd_v8a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8a_descr	opt/lpb-O1.c	/^char simd_v8a_descr[] = "simd_v8a: SSE code, 8*VSIZE-way parallelism, reassociate";$/;"	v
unroll10a_combine	opt/lpb-O1.c	/^void unroll10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10a_descr	opt/lpb-O1.c	/^char unroll10a_descr[] = "unroll10a: Array code, unrolled by 10";$/;"	v
unroll10aa_combine	opt/lpb-O1.c	/^void unroll10aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10aa_descr	opt/lpb-O1.c	/^char unroll10aa_descr[] = "unroll10aa: Array code, unrolled by 10, Different Associativity";$/;"	v
unroll10x10a_combine	opt/lpb-O1.c	/^void unroll10x10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10x10a_descr	opt/lpb-O1.c	/^char unroll10x10a_descr[] = "unroll10x10a: Array code, unrolled by 10, Superscalar x10";$/;"	v
unroll12aa_combine	opt/lpb-O1.c	/^void unroll12aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12aa_descr	opt/lpb-O1.c	/^char unroll12aa_descr[] = "unroll12aa: Array code, unrolled by 12, Different Associativity";$/;"	v
unroll12x12a_combine	opt/lpb-O1.c	/^void unroll12x12a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x12a_descr	opt/lpb-O1.c	/^char unroll12x12a_descr[] = "unroll12x12a: Array code, unrolled by 12, Superscalar x12";$/;"	v
unroll12x6a_combine	opt/lpb-O1.c	/^void unroll12x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x6a_descr	opt/lpb-O1.c	/^char unroll12x6a_descr[] = "unroll2x6a: Array code, unrolled by 12, Superscalar x6";$/;"	v
unroll16_combine	opt/lpb-O1.c	/^void unroll16_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16_descr	opt/lpb-O1.c	/^char unroll16_descr[] = "unroll16: Pointer code, unrolled by 16";$/;"	v
unroll16a_combine	opt/lpb-O1.c	/^void unroll16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16a_descr	opt/lpb-O1.c	/^char unroll16a_descr[] = "unroll16a: Array code, unrolled by 16";$/;"	v
unroll2_combine	opt/lpb-O1.c	/^void unroll2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2_descr	opt/lpb-O1.c	/^char unroll2_descr[] = "unroll2: Pointer code, unrolled by 2";$/;"	v
unroll2aw_combine	opt/lpb-O1.c	/^void unroll2aw_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2aw_descr	opt/lpb-O1.c	/^char unroll2aw_descr[] = "unroll2aw: Array code, unrolled by 2, while loop";$/;"	v
unroll3_combine	opt/lpb-O1.c	/^void unroll3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3_descr	opt/lpb-O1.c	/^char unroll3_descr[] = "unroll3: Pointer code, unrolled by 3";$/;"	v
unroll3a_combine	opt/lpb-O1.c	/^void unroll3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3a_descr	opt/lpb-O1.c	/^char unroll3a_descr[] = "unroll3a: Array code, unrolled by 3";$/;"	v
unroll3aa_combine	opt/lpb-O1.c	/^void unroll3aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3aa_descr	opt/lpb-O1.c	/^char unroll3aa_descr[] = "unroll3aa: Array code, unrolled by 3, Different Associativity";$/;"	v
unroll3x3a_combine	opt/lpb-O1.c	/^void unroll3x3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3x3a_descr	opt/lpb-O1.c	/^char unroll3x3a_descr[] = "unroll3x3a: Array code, unrolled by 3, Superscalar x3";$/;"	v
unroll4_combine	opt/lpb-O1.c	/^void unroll4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4_descr	opt/lpb-O1.c	/^char unroll4_descr[] = "unroll4: Pointer code, unrolled by 4";$/;"	v
unroll4a_combine	opt/lpb-O1.c	/^void unroll4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4a_descr	opt/lpb-O1.c	/^char unroll4a_descr[] = "unroll4a: Array code, unrolled by 4";$/;"	v
unroll4aa_combine	opt/lpb-O1.c	/^void unroll4aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4aa_descr	opt/lpb-O1.c	/^char unroll4aa_descr[] = "unroll4aa: Array code, unrolled by 4, Different Associativity";$/;"	v
unroll4x2a_combine	opt/lpb-O1.c	/^void unroll4x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2a_descr	opt/lpb-O1.c	/^char unroll4x2a_descr[] = "unroll4x2a: Array code, unrolled by 4, Superscalar x2";$/;"	v
unroll4x2as_combine	opt/lpb-O1.c	/^void unroll4x2as_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2as_descr	opt/lpb-O1.c	/^char unroll4x2as_descr[] = "unroll4x2as: Array code, Unroll x4, Superscalar x2, noninterleaved";$/;"	v
unroll4x4a_combine	opt/lpb-O1.c	/^void unroll4x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x4a_descr	opt/lpb-O1.c	/^char unroll4x4a_descr[] = "unroll4x4a: Array code, unrolled by 4, Superscalar x4";$/;"	v
unroll5a_combine	opt/lpb-O1.c	/^void unroll5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5a_descr	opt/lpb-O1.c	/^char unroll5a_descr[] = "unroll5a: Array code, unrolled by 5";$/;"	v
unroll5aa_combine	opt/lpb-O1.c	/^void unroll5aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5aa_descr	opt/lpb-O1.c	/^char unroll5aa_descr[] = "unroll5aa: Array code, unrolled by 5, Different Associativity";$/;"	v
unroll5x5a_combine	opt/lpb-O1.c	/^void unroll5x5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5x5a_descr	opt/lpb-O1.c	/^char unroll5x5a_descr[] = "unroll5x5a: Array code, unrolled by 5, Superscalar x5";$/;"	v
unroll6a_combine	opt/lpb-O1.c	/^void unroll6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6a_descr	opt/lpb-O1.c	/^char unroll6a_descr[] = "unroll6a: Array code, unrolled by 6";$/;"	v
unroll6aa_combine	opt/lpb-O1.c	/^void unroll6aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6aa_descr	opt/lpb-O1.c	/^char unroll6aa_descr[] = "unroll6aa: Array code, unrolled by 6, Different Associativity";$/;"	v
unroll6x6a_combine	opt/lpb-O1.c	/^void unroll6x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6x6a_descr	opt/lpb-O1.c	/^char unroll6x6a_descr[] = "unroll6x6a: Array code, unrolled by 6, Superscalar x6";$/;"	v
unroll7a_combine	opt/lpb-O1.c	/^void unroll7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7a_descr	opt/lpb-O1.c	/^char unroll7a_descr[] = "unroll7a: Array code, unrolled by 7";$/;"	v
unroll7aa_combine	opt/lpb-O1.c	/^void unroll7aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7aa_descr	opt/lpb-O1.c	/^char unroll7aa_descr[] = "unroll7aa: Array code, unrolled by 7, Different Associativity";$/;"	v
unroll7x7a_combine	opt/lpb-O1.c	/^void unroll7x7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7x7a_descr	opt/lpb-O1.c	/^char unroll7x7a_descr[] = "unroll7x7a: Array code, unrolled by 7, Superscalar x7";$/;"	v
unroll8_combine	opt/lpb-O1.c	/^void unroll8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8_descr	opt/lpb-O1.c	/^char unroll8_descr[] = "unroll8: Pointer code, unrolled by 8";$/;"	v
unroll8a_combine	opt/lpb-O1.c	/^void unroll8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8a_descr	opt/lpb-O1.c	/^char unroll8a_descr[] = "unroll8a: Array code, unrolled by 8";$/;"	v
unroll8aa_combine	opt/lpb-O1.c	/^void unroll8aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8aa_descr	opt/lpb-O1.c	/^char unroll8aa_descr[] = "unroll8aa: Array code, unrolled by 8, Different Associativity";$/;"	v
unroll8x2_combine	opt/lpb-O1.c	/^void unroll8x2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2_descr	opt/lpb-O1.c	/^char unroll8x2_descr[] = "unroll8x2: Pointer code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x2a_combine	opt/lpb-O1.c	/^void unroll8x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2a_descr	opt/lpb-O1.c	/^char unroll8x2a_descr[] = "unroll8x2a: Array code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x4_combine	opt/lpb-O1.c	/^void unroll8x4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4_descr	opt/lpb-O1.c	/^char unroll8x4_descr[] = "unroll8x4: Pointer code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x4a_combine	opt/lpb-O1.c	/^void unroll8x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4a_descr	opt/lpb-O1.c	/^char unroll8x4a_descr[] = "unroll8x4a: Array code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x8_combine	opt/lpb-O1.c	/^void unroll8x8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8_descr	opt/lpb-O1.c	/^char unroll8x8_descr[] = "unroll8x8: Pointer code, unrolled by 8, Superscalar x8";$/;"	v
unroll8x8a_combine	opt/lpb-O1.c	/^void unroll8x8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8a_descr	opt/lpb-O1.c	/^char unroll8x8a_descr[] = "unroll8x8a: Array code, unrolled by 8, Superscalar x8";$/;"	v
unroll9a_combine	opt/lpb-O1.c	/^void unroll9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9a_descr	opt/lpb-O1.c	/^char unroll9a_descr[] = "unroll9a: Array code, unrolled by 9";$/;"	v
unroll9aa_combine	opt/lpb-O1.c	/^void unroll9aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9aa_descr	opt/lpb-O1.c	/^char unroll9aa_descr[] = "unroll9aa: Array code, unrolled by 9, Different Associativity";$/;"	v
unroll9x3_combine	opt/lpb-O1.c	/^void unroll9x3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x3_descr	opt/lpb-O1.c	/^char unroll9x3_descr[] = "unroll9x3: Pointer code, unrolled by 9, Superscalar x3";$/;"	v
unroll9x9a_combine	opt/lpb-O1.c	/^void unroll9x9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x9a_descr	opt/lpb-O1.c	/^char unroll9x9a_descr[] = "unroll9x9a: Array code, unrolled by 9, Superscalar x9";$/;"	v
unrollx2as_combine	opt/lpb-O1.c	/^void unrollx2as_combine(vec_ptr v, data_t *dest)$/;"	f
unrollx2as_descr	opt/lpb-O1.c	/^char unrollx2as_descr[] = "unrollx2as: Array code, Unroll x2, Superscalar x2, noninterleaved";$/;"	v
v	opt/lpb-O1.c	/^    vec_t v;$/;"	m	union:__anon36	file:
vec_t	opt/lpb-O1.c	/^typedef data_t vec_t __attribute__ ((vector_size(VBYTES)));$/;"	t	file:
VBYTES	opt/lsb-O1.c	/^#define VBYTES /;"	d	file:
VSIZE	opt/lsb-O1.c	/^#define VSIZE /;"	d	file:
combine1	opt/lsb-O1.c	/^void combine1(vec_ptr v, data_t *dest)$/;"	f
combine1_descr	opt/lsb-O1.c	/^char combine1_descr[] = "combine1: Maximum use of data abstraction";$/;"	v
combine2	opt/lsb-O1.c	/^void combine2(vec_ptr v, data_t *dest)$/;"	f
combine2_descr	opt/lsb-O1.c	/^char combine2_descr[] = "combine2: Take vec_length() out of loop";$/;"	v
combine3	opt/lsb-O1.c	/^void combine3(vec_ptr v, data_t *dest)$/;"	f
combine3_descr	opt/lsb-O1.c	/^char combine3_descr[] = "combine3: Array reference to vector data";$/;"	v
combine3w	opt/lsb-O1.c	/^void combine3w(vec_ptr v, data_t *dest)$/;"	f
combine3w_descr	opt/lsb-O1.c	/^char combine3w_descr[] = "combine3w: Update *dest within loop only with write";$/;"	v
combine4	opt/lsb-O1.c	/^void combine4(vec_ptr v, data_t *dest)$/;"	f
combine4_descr	opt/lsb-O1.c	/^char combine4_descr[] = "combine4: Array reference, accumulate in temporary";$/;"	v
combine4b	opt/lsb-O1.c	/^void combine4b(vec_ptr v, data_t *dest)$/;"	f
combine4b_descr	opt/lsb-O1.c	/^char combine4b_descr[] = "combine4b: Include bonds check in loop";$/;"	v
combine4p	opt/lsb-O1.c	/^void combine4p(vec_ptr v, data_t *dest)$/;"	f
combine4p_descr	opt/lsb-O1.c	/^char combine4p_descr[] = "combine4p: Pointer reference, accumulate in temporary";$/;"	v
combine5	opt/lsb-O1.c	/^void combine5(vec_ptr v, data_t *dest)$/;"	f
combine5_descr	opt/lsb-O1.c	/^char combine5_descr[] = "combine5: Array code, unrolled by 2";$/;"	v
combine5p	opt/lsb-O1.c	/^void combine5p(vec_ptr v, data_t *dest)$/;"	f
combine5p_descr	opt/lsb-O1.c	/^char combine5p_descr[] = "combine5p: Pointer code, unrolled by 2, for loop";$/;"	v
combine6	opt/lsb-O1.c	/^void combine6(vec_ptr v, data_t *dest)$/;"	f
combine6_descr	opt/lsb-O1.c	/^char combine6_descr[] = "combine6: Array code, unrolled by 2, Superscalar x2";$/;"	v
combine7	opt/lsb-O1.c	/^void combine7(vec_ptr v, data_t *dest)$/;"	f
combine7_descr	opt/lsb-O1.c	/^char combine7_descr[] = "combine7: Array code, unrolled by 2, different associativity";$/;"	v
d	opt/lsb-O1.c	/^    data_t d[VSIZE];$/;"	m	union:__anon37	file:
pack_t	opt/lsb-O1.c	/^} pack_t;$/;"	t	typeref:union:__anon37	file:
register_combiners	opt/lsb-O1.c	/^void register_combiners(void)$/;"	f
simd_v10_combine	opt/lsb-O1.c	/^void simd_v10_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v10_descr	opt/lsb-O1.c	/^char simd_v10_descr[] = "simd_v10: SSE code, 10*VSIZE-way parallelism";$/;"	v
simd_v12_combine	opt/lsb-O1.c	/^void simd_v12_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v12_descr	opt/lsb-O1.c	/^char simd_v12_descr[] = "simd_v12: SSE code, 12*VSIZE-way parallelism";$/;"	v
simd_v1_combine	opt/lsb-O1.c	/^void simd_v1_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v1_descr	opt/lsb-O1.c	/^char simd_v1_descr[] = "simd_v1: SSE code, 1*VSIZE-way parallelism";$/;"	v
simd_v2_combine	opt/lsb-O1.c	/^void simd_v2_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2_descr	opt/lsb-O1.c	/^char simd_v2_descr[] = "simd_v2: SSE code, 2*VSIZE-way parallelism";$/;"	v
simd_v2a_combine	opt/lsb-O1.c	/^void simd_v2a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v2a_descr	opt/lsb-O1.c	/^char simd_v2a_descr[] = "simd_v2a: SSE code, 2*VSIZE-way parallelism, reassociate";$/;"	v
simd_v4_combine	opt/lsb-O1.c	/^void simd_v4_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4_descr	opt/lsb-O1.c	/^char simd_v4_descr[] = "simd_v4: SSE code, 4*VSIZE-way parallelism";$/;"	v
simd_v4a_combine	opt/lsb-O1.c	/^void simd_v4a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v4a_descr	opt/lsb-O1.c	/^char simd_v4a_descr[] = "simd_v4a: SSE code, 4*VSIZE-way parallelism, reassociate";$/;"	v
simd_v8_combine	opt/lsb-O1.c	/^void simd_v8_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8_descr	opt/lsb-O1.c	/^char simd_v8_descr[] = "simd_v8: SSE code, 8*VSIZE-way parallelism";$/;"	v
simd_v8a_combine	opt/lsb-O1.c	/^void simd_v8a_combine(vec_ptr v, data_t *dest)$/;"	f
simd_v8a_descr	opt/lsb-O1.c	/^char simd_v8a_descr[] = "simd_v8a: SSE code, 8*VSIZE-way parallelism, reassociate";$/;"	v
unroll10a_combine	opt/lsb-O1.c	/^void unroll10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10a_descr	opt/lsb-O1.c	/^char unroll10a_descr[] = "unroll10a: Array code, unrolled by 10";$/;"	v
unroll10aa_combine	opt/lsb-O1.c	/^void unroll10aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10aa_descr	opt/lsb-O1.c	/^char unroll10aa_descr[] = "unroll10aa: Array code, unrolled by 10, Different Associativity";$/;"	v
unroll10x10a_combine	opt/lsb-O1.c	/^void unroll10x10a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll10x10a_descr	opt/lsb-O1.c	/^char unroll10x10a_descr[] = "unroll10x10a: Array code, unrolled by 10, Superscalar x10";$/;"	v
unroll12aa_combine	opt/lsb-O1.c	/^void unroll12aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12aa_descr	opt/lsb-O1.c	/^char unroll12aa_descr[] = "unroll12aa: Array code, unrolled by 12, Different Associativity";$/;"	v
unroll12x12a_combine	opt/lsb-O1.c	/^void unroll12x12a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x12a_descr	opt/lsb-O1.c	/^char unroll12x12a_descr[] = "unroll12x12a: Array code, unrolled by 12, Superscalar x12";$/;"	v
unroll12x6a_combine	opt/lsb-O1.c	/^void unroll12x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll12x6a_descr	opt/lsb-O1.c	/^char unroll12x6a_descr[] = "unroll2x6a: Array code, unrolled by 12, Superscalar x6";$/;"	v
unroll16_combine	opt/lsb-O1.c	/^void unroll16_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16_descr	opt/lsb-O1.c	/^char unroll16_descr[] = "unroll16: Pointer code, unrolled by 16";$/;"	v
unroll16a_combine	opt/lsb-O1.c	/^void unroll16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16a_descr	opt/lsb-O1.c	/^char unroll16a_descr[] = "unroll16a: Array code, unrolled by 16";$/;"	v
unroll16x16a_combine	opt/lsb-O1.c	/^void unroll16x16a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll16x16a_descr	opt/lsb-O1.c	/^char unroll16x16a_descr[] = "unroll16x16a: Array code, unrolled by 16, Superscalar x16";$/;"	v
unroll2_combine	opt/lsb-O1.c	/^void unroll2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2_descr	opt/lsb-O1.c	/^char unroll2_descr[] = "unroll2: Pointer code, unrolled by 2";$/;"	v
unroll2aw_combine	opt/lsb-O1.c	/^void unroll2aw_combine(vec_ptr v, data_t *dest)$/;"	f
unroll2aw_descr	opt/lsb-O1.c	/^char unroll2aw_descr[] = "unroll2aw: Array code, unrolled by 2, while loop";$/;"	v
unroll3_combine	opt/lsb-O1.c	/^void unroll3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3_descr	opt/lsb-O1.c	/^char unroll3_descr[] = "unroll3: Pointer code, unrolled by 3";$/;"	v
unroll3a_combine	opt/lsb-O1.c	/^void unroll3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3a_descr	opt/lsb-O1.c	/^char unroll3a_descr[] = "unroll3a: Array code, unrolled by 3";$/;"	v
unroll3aa_combine	opt/lsb-O1.c	/^void unroll3aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3aa_descr	opt/lsb-O1.c	/^char unroll3aa_descr[] = "unroll3aa: Array code, unrolled by 3, Different Associativity";$/;"	v
unroll3x3a_combine	opt/lsb-O1.c	/^void unroll3x3a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll3x3a_descr	opt/lsb-O1.c	/^char unroll3x3a_descr[] = "unroll3x3a: Array code, unrolled by 3, Superscalar x3";$/;"	v
unroll4_combine	opt/lsb-O1.c	/^void unroll4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4_descr	opt/lsb-O1.c	/^char unroll4_descr[] = "unroll4: Pointer code, unrolled by 4";$/;"	v
unroll4a_combine	opt/lsb-O1.c	/^void unroll4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4a_descr	opt/lsb-O1.c	/^char unroll4a_descr[] = "unroll4a: Array code, unrolled by 4";$/;"	v
unroll4aa_combine	opt/lsb-O1.c	/^void unroll4aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4aa_descr	opt/lsb-O1.c	/^char unroll4aa_descr[] = "unroll4aa: Array code, unrolled by 4, Different Associativity";$/;"	v
unroll4x2a_combine	opt/lsb-O1.c	/^void unroll4x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2a_descr	opt/lsb-O1.c	/^char unroll4x2a_descr[] = "unroll4x2a: Array code, unrolled by 4, Superscalar x2";$/;"	v
unroll4x2as_combine	opt/lsb-O1.c	/^void unroll4x2as_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x2as_descr	opt/lsb-O1.c	/^char unroll4x2as_descr[] = "unroll4x2as: Array code, Unroll x4, Superscalar x2, noninterleaved";$/;"	v
unroll4x4a_combine	opt/lsb-O1.c	/^void unroll4x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll4x4a_descr	opt/lsb-O1.c	/^char unroll4x4a_descr[] = "unroll4x4a: Array code, unrolled by 4, Superscalar x4";$/;"	v
unroll5a_combine	opt/lsb-O1.c	/^void unroll5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5a_descr	opt/lsb-O1.c	/^char unroll5a_descr[] = "unroll5a: Array code, unrolled by 5";$/;"	v
unroll5aa_combine	opt/lsb-O1.c	/^void unroll5aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5aa_descr	opt/lsb-O1.c	/^char unroll5aa_descr[] = "unroll5aa: Array code, unrolled by 5, Different Associativity";$/;"	v
unroll5x5a_combine	opt/lsb-O1.c	/^void unroll5x5a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll5x5a_descr	opt/lsb-O1.c	/^char unroll5x5a_descr[] = "unroll5x5a: Array code, unrolled by 5, Superscalar x5";$/;"	v
unroll6a_combine	opt/lsb-O1.c	/^void unroll6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6a_descr	opt/lsb-O1.c	/^char unroll6a_descr[] = "unroll6a: Array code, unrolled by 6";$/;"	v
unroll6aa_combine	opt/lsb-O1.c	/^void unroll6aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6aa_descr	opt/lsb-O1.c	/^char unroll6aa_descr[] = "unroll6aa: Array code, unrolled by 6, Different Associativity";$/;"	v
unroll6x6a_combine	opt/lsb-O1.c	/^void unroll6x6a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll6x6a_descr	opt/lsb-O1.c	/^char unroll6x6a_descr[] = "unroll6x6a: Array code, unrolled by 6, Superscalar x6";$/;"	v
unroll7a_combine	opt/lsb-O1.c	/^void unroll7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7a_descr	opt/lsb-O1.c	/^char unroll7a_descr[] = "unroll7a: Array code, unrolled by 7";$/;"	v
unroll7aa_combine	opt/lsb-O1.c	/^void unroll7aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7aa_descr	opt/lsb-O1.c	/^char unroll7aa_descr[] = "unroll7aa: Array code, unrolled by 7, Different Associativity";$/;"	v
unroll7x7a_combine	opt/lsb-O1.c	/^void unroll7x7a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll7x7a_descr	opt/lsb-O1.c	/^char unroll7x7a_descr[] = "unroll7x7a: Array code, unrolled by 7, Superscalar x7";$/;"	v
unroll8_combine	opt/lsb-O1.c	/^void unroll8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8_descr	opt/lsb-O1.c	/^char unroll8_descr[] = "unroll8: Pointer code, unrolled by 8";$/;"	v
unroll8a_combine	opt/lsb-O1.c	/^void unroll8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8a_descr	opt/lsb-O1.c	/^char unroll8a_descr[] = "unroll8a: Array code, unrolled by 8";$/;"	v
unroll8aa_combine	opt/lsb-O1.c	/^void unroll8aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8aa_descr	opt/lsb-O1.c	/^char unroll8aa_descr[] = "unroll8aa: Array code, unrolled by 8, Different Associativity";$/;"	v
unroll8x2_combine	opt/lsb-O1.c	/^void unroll8x2_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2_descr	opt/lsb-O1.c	/^char unroll8x2_descr[] = "unroll8x2: Pointer code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x2a_combine	opt/lsb-O1.c	/^void unroll8x2a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x2a_descr	opt/lsb-O1.c	/^char unroll8x2a_descr[] = "unroll8x2a: Array code, unrolled by 8, Superscalar x2";$/;"	v
unroll8x4_combine	opt/lsb-O1.c	/^void unroll8x4_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4_descr	opt/lsb-O1.c	/^char unroll8x4_descr[] = "unroll8x4: Pointer code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x4a_combine	opt/lsb-O1.c	/^void unroll8x4a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x4a_descr	opt/lsb-O1.c	/^char unroll8x4a_descr[] = "unroll8x4a: Array code, unrolled by 8, Superscalar x4";$/;"	v
unroll8x8_combine	opt/lsb-O1.c	/^void unroll8x8_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8_descr	opt/lsb-O1.c	/^char unroll8x8_descr[] = "unroll8x8: Pointer code, unrolled by 8, Superscalar x8";$/;"	v
unroll8x8a_combine	opt/lsb-O1.c	/^void unroll8x8a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll8x8a_descr	opt/lsb-O1.c	/^char unroll8x8a_descr[] = "unroll8x8a: Array code, unrolled by 8, Superscalar x8";$/;"	v
unroll9a_combine	opt/lsb-O1.c	/^void unroll9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9a_descr	opt/lsb-O1.c	/^char unroll9a_descr[] = "unroll9a: Array code, unrolled by 9";$/;"	v
unroll9aa_combine	opt/lsb-O1.c	/^void unroll9aa_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9aa_descr	opt/lsb-O1.c	/^char unroll9aa_descr[] = "unroll9aa: Array code, unrolled by 9, Different Associativity";$/;"	v
unroll9x3_combine	opt/lsb-O1.c	/^void unroll9x3_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x3_descr	opt/lsb-O1.c	/^char unroll9x3_descr[] = "unroll9x3: Pointer code, unrolled by 9, Superscalar x3";$/;"	v
unroll9x9a_combine	opt/lsb-O1.c	/^void unroll9x9a_combine(vec_ptr v, data_t *dest)$/;"	f
unroll9x9a_descr	opt/lsb-O1.c	/^char unroll9x9a_descr[] = "unroll9x9a: Array code, unrolled by 9, Superscalar x9";$/;"	v
unrollx2as_combine	opt/lsb-O1.c	/^void unrollx2as_combine(vec_ptr v, data_t *dest)$/;"	f
unrollx2as_descr	opt/lsb-O1.c	/^char unrollx2as_descr[] = "unrollx2as: Array code, Unroll x2, Superscalar x2, noninterleaved";$/;"	v
v	opt/lsb-O1.c	/^    vec_t v;$/;"	m	union:__anon37	file:
vec_t	opt/lsb-O1.c	/^typedef data_t vec_t __attribute__ ((vector_size(VBYTES)));$/;"	t	file:
ELE	opt/mem.c	/^typedef struct ELE {$/;"	s	file:
MAXELE	opt/mem.c	/^#define MAXELE /;"	d	file:
block_alloc	opt/mem.c	/^list_rec block_alloc[MAXELE];$/;"	v
dynamic_head	opt/mem.c	/^list_ptr dynamic_head = NULL;$/;"	v
init	opt/mem.c	/^void init(long nele) {$/;"	f
list_ptr	opt/mem.c	/^typedef struct ELE *list_ptr;$/;"	t	typeref:struct:ELE	file:
list_rec	opt/mem.c	/^} list_rec;$/;"	t	typeref:struct:ELE	file:
main	opt/mem.c	/^int main(int argc, char *argv[]) {$/;"	f
next	opt/mem.c	/^    list_ptr next;$/;"	m	struct:ELE	file:
static_head	opt/mem.c	/^list_ptr static_head = NULL;$/;"	v
sum_list	opt/mem.c	/^long sum_list(list_ptr ll)$/;"	f
test_list	opt/mem.c	/^void test_list(long info[]) {$/;"	f
val	opt/mem.c	/^    long val;$/;"	m	struct:ELE	file:
LEN	opt/merge.c	/^#define LEN /;"	d	file:
a1	opt/merge.c	/^long a1[LEN], a2[LEN], d[2*LEN];$/;"	v
a2	opt/merge.c	/^long a1[LEN], a2[LEN], d[2*LEN];$/;"	v
b1	opt/merge.c	/^long b1[LEN], b2[LEN];$/;"	v
b2	opt/merge.c	/^long b1[LEN], b2[LEN];$/;"	v
d	opt/merge.c	/^long a1[LEN], a2[LEN], d[2*LEN];$/;"	v
init	opt/merge.c	/^void init(unsigned seed) {$/;"	f
main	opt/merge.c	/^int main(int argc, char *argv[]) {$/;"	f
merge	opt/merge.c	/^void merge(long src1[], long src2[], long dest[], long n) {$/;"	f
merge2	opt/merge.c	/^void merge2(long src1[], long src2[], long dest[], long n) {$/;"	f
run	opt/merge.c	/^void run(long len, long trials, unsigned seed) {$/;"	f
show	opt/merge.c	/^void show(char *label, long a[], long n) {$/;"	f
SIZE	opt/opt-meas.c	/^#define SIZE /;"	d	file:
a	opt/opt-meas.c	/^double a[SIZE];$/;"	v
aprod	opt/opt-meas.c	/^double aprod(double a[], long n)$/;"	f
aprod1	opt/opt-meas.c	/^double aprod1(double a[], long n)$/;"	f
aprod2	opt/opt-meas.c	/^double aprod2(double a[], long n)$/;"	f
aprod3	opt/opt-meas.c	/^double aprod3(double a[], long n)$/;"	f
aprod4	opt/opt-meas.c	/^double aprod4(double a[], long n)$/;"	f
aprod5	opt/opt-meas.c	/^double aprod5(double a[], long n)$/;"	f
main	opt/opt-meas.c	/^int main() {$/;"	f
sink	opt/opt-meas.c	/^volatile double sink = 0;$/;"	v
t1	opt/opt-meas.c	/^void t1(long n)$/;"	f
t2	opt/opt-meas.c	/^void t2(long n)$/;"	f
t3	opt/opt-meas.c	/^void t3(long n)$/;"	f
t4	opt/opt-meas.c	/^void t4(long n)$/;"	f
t5	opt/opt-meas.c	/^void t5(long n)$/;"	f
DOUBLE_OPTION	opt/options.c	/^typedef enum {INT_OPTION, DOUBLE_OPTION, STRING_OPTION} option_t;$/;"	e	enum:__anon38	file:
INT_OPTION	opt/options.c	/^typedef enum {INT_OPTION, DOUBLE_OPTION, STRING_OPTION} option_t;$/;"	e	enum:__anon38	file:
MAX_OPTION	opt/options.c	/^#define MAX_OPTION /;"	d	file:
STRING_OPTION	opt/options.c	/^typedef enum {INT_OPTION, DOUBLE_OPTION, STRING_OPTION} option_t;$/;"	e	enum:__anon38	file:
add_double_option	opt/options.c	/^void add_double_option(char *name, double *var)$/;"	f
add_int_option	opt/options.c	/^void add_int_option(char *name, int *var)$/;"	f
add_string_option	opt/options.c	/^void add_string_option(char *name, char **var)$/;"	f
d	opt/options.c	/^    double *d;$/;"	m	union:__anon39::__anon40	file:
find_option	opt/options.c	/^static int find_option(char *prog, char *name)$/;"	f	file:
i	opt/options.c	/^    int *i;$/;"	m	union:__anon39::__anon40	file:
match_length	opt/options.c	/^static int match_length(char *s, char *t)$/;"	f	file:
name	opt/options.c	/^  char *name;$/;"	m	struct:__anon39	file:
option_count	opt/options.c	/^static int option_count = 0;$/;"	v	file:
option_entry	opt/options.c	/^} option_entry;$/;"	t	typeref:struct:__anon39	file:
option_t	opt/options.c	/^typedef enum {INT_OPTION, DOUBLE_OPTION, STRING_OPTION} option_t;$/;"	t	typeref:enum:__anon38	file:
options	opt/options.c	/^static option_entry options[MAX_OPTION];$/;"	v	file:
parse_option_file	opt/options.c	/^void parse_option_file(char *prog, FILE *option_file)$/;"	f
parse_options	opt/options.c	/^int parse_options(int argc, char *argv[], char *otherargs[])$/;"	f
s	opt/options.c	/^    char **s;$/;"	m	union:__anon39::__anon40	file:
show_options	opt/options.c	/^void show_options(FILE *outfile)$/;"	f
strsave	opt/options.c	/^static char *strsave(char *s)$/;"	f	file:
type	opt/options.c	/^  option_t type;$/;"	m	struct:__anon39	file:
usage	opt/options.c	/^void usage(char *prog)$/;"	f
valp	opt/options.c	/^  } valp;$/;"	m	struct:__anon39	typeref:union:__anon39::__anon40	file:
main	opt/overhead.c	/^int main (int argc, char *argv[]) {$/;"	f
overhead	opt/overhead.c	/^double overhead() {$/;"	f
run	opt/overhead.c	/^void run(int cnt) {$/;"	f
sink	opt/overhead.c	/^volatile int sink = 0;$/;"	v
BSIZE	opt/profile/Makefile	/^BSIZE = 199999$/;"	m
DICT	opt/profile/Makefile	/^DICT = ..\/dictionary$/;"	m
DICTPG	opt/profile/Makefile	/^DICTPG = ..\/dictionary-pg$/;"	m
GPFLAGS	opt/profile/Makefile	/^GPFLAGS = -b$/;"	m
MFILE	opt/profile/Makefile	/^MFILE = moby.txt$/;"	m
SFILE	opt/profile/Makefile	/^SFILE = shakespeare.txt$/;"	m
SIZE	opt/profile/Makefile	/^SIZE = 1021$/;"	m
VBYTES	opt/simd_eg.c	/^#define VBYTES /;"	d	file:
VSIZE	opt/simd_eg.c	/^#define VSIZE /;"	d	file:
data_t	opt/simd_eg.c	/^typedef float data_t;$/;"	t	file:
innerv	opt/simd_eg.c	/^data_t innerv(vec_t av, vec_t bv) {$/;"	f
vec_t	opt/simd_eg.c	/^typedef data_t vec_t __attribute__ ((vector_size(VBYTES)));$/;"	t	file:
VBYTES	opt/simd_eq.c	/^#define VBYTES /;"	d	file:
VSIZE	opt/simd_eq.c	/^#define VSIZE /;"	d	file:
d	opt/simd_eq.c	/^    data_t d[VSIZE];$/;"	m	union:__anon41	file:
data_t	opt/simd_eq.c	/^typedef float data_t;$/;"	t	file:
innerv	opt/simd_eq.c	/^data_t innerv(vec_t av, vec_t bv) {$/;"	f
pack_t	opt/simd_eq.c	/^} pack_t;$/;"	t	typeref:union:__anon41	file:
v	opt/simd_eq.c	/^    vec_t v;$/;"	m	union:__anon41	file:
vec_t	opt/simd_eq.c	/^typedef data_t vec_t __attribute__ ((vector_size(VBYTES)));$/;"	t	file:
swap	opt/swap.c	/^void swap(long *xp, long *yp)$/;"	f
swap_alias	opt/swap.c	/^void swap_alias(long *xp, long *yp)$/;"	f
ERRLIM	opt/test_cpe.c	/^#define ERRLIM /;"	d	file:
MAXCNT	opt/test_cpe.c	/^#define MAXCNT /;"	d	file:
a	opt/test_cpe.c	/^static float *a, *b, *c, *p;$/;"	v	file:
b	opt/test_cpe.c	/^static float *a, *b, *c, *p;$/;"	v	file:
c	opt/test_cpe.c	/^static float *a, *b, *c, *p;$/;"	v	file:
check	opt/test_cpe.c	/^void check(elem_fun_t tpsumX, long cnt) {$/;"	f
data	opt/test_cpe.c	/^static float data[3*MAXCNT];$/;"	v	file:
main	opt/test_cpe.c	/^int main(int argc, char *argv[])$/;"	f
p	opt/test_cpe.c	/^static float *a, *b, *c, *p;$/;"	v	file:
psum1	opt/test_cpe.c	/^void psum1(float a[], float p[], long n)$/;"	f
psum1a	opt/test_cpe.c	/^void psum1a(float a[], float p[], long n)$/;"	f
psum2	opt/test_cpe.c	/^void psum2(float a[], float p[], long n)$/;"	f
setup	opt/test_cpe.c	/^static void setup(long len)$/;"	f	file:
tpsum1	opt/test_cpe.c	/^void tpsum1(long cnt)$/;"	f
tpsum1a	opt/test_cpe.c	/^void tpsum1a(long cnt)$/;"	f
tpsum2	opt/test_cpe.c	/^void tpsum2(long cnt)$/;"	f
usage	opt/test_cpe.c	/^static void usage(char *name)$/;"	f	file:
NVALS	opt/test_mhz.c	/^#define NVALS /;"	d	file:
main	opt/test_mhz.c	/^int main(int argc, char *argv[]) {$/;"	f
multipointers	opt/twiddle.c	/^void multipointers(long *p, long *q)$/;"	f
twiddle1	opt/twiddle.c	/^void twiddle1(long *xp, long *yp)$/;"	f
twiddle1x	opt/twiddle.c	/^void twiddle1x(long *xp)$/;"	f
twiddle2	opt/twiddle.c	/^void twiddle2(long *xp, long *yp)$/;"	f
twiddle2x	opt/twiddle.c	/^void twiddle2x(long *xp)$/;"	f
free_vec	opt/vec.c	/^void free_vec(vec_ptr v) {$/;"	f
get_vec_element	opt/vec.c	/^int get_vec_element(vec_ptr v, long index, data_t *dest)$/;"	f
get_vec_start	opt/vec.c	/^data_t *get_vec_start(vec_ptr v)$/;"	f
new_vec	opt/vec.c	/^vec_ptr new_vec(long len)$/;"	f
set_vec_element	opt/vec.c	/^int set_vec_element(vec_ptr v, long index, data_t val)$/;"	f
set_vec_length	opt/vec.c	/^void set_vec_length(vec_ptr v, long newlen)$/;"	f
vec_length	opt/vec.c	/^long vec_length(vec_ptr v)$/;"	f
GET_VEC_ELEMENT	opt/vec.h	/^#define GET_VEC_ELEMENT(/;"	d
allocated_len	opt/vec.h	/^    long allocated_len; \/* NOTE: we don't use this field in the book *\/$/;"	m	struct:__anon42
data	opt/vec.h	/^    data_t *data;$/;"	m	struct:__anon42
len	opt/vec.h	/^    long len;$/;"	m	struct:__anon42
vec_ptr	opt/vec.h	/^} vec_rec, *vec_ptr;$/;"	t	typeref:struct:__anon42
vec_rec	opt/vec.h	/^} vec_rec, *vec_ptr;$/;"	t	typeref:struct:__anon42
CC	perf/Makefile	/^CC=gcc$/;"	m
CFLAGS	perf/Makefile	/^CFLAGS = -O2 -Wall -g  -m64$/;"	m
main	perf/cf.c	/^int main() {$/;"	f
MAXBUF	perf/clock-rate-test.c	/^#define MAXBUF /;"	d	file:
STEP_CNT	perf/clock-rate-test.c	/^#define STEP_CNT /;"	d	file:
burn_cpu	perf/clock-rate-test.c	/^void burn_cpu() {$/;"	f
get_mhz	perf/clock-rate-test.c	/^double get_mhz() {$/;"	f
incr	perf/clock-rate-test.c	/^volatile int incr = 1;$/;"	v
last_time	perf/clock-rate-test.c	/^struct timespec last_time;$/;"	v	typeref:struct:timespec
main	perf/clock-rate-test.c	/^int main(int argc, char *argv[]) {$/;"	f
val	perf/clock-rate-test.c	/^volatile int val = 0;$/;"	v
CLOCK_VERSION	perf/clock-v2.c	/^#define CLOCK_VERSION /;"	d	file:
MAXBUF	perf/clock-v2.c	/^#define MAXBUF /;"	d	file:
STEP_CNT	perf/clock-v2.c	/^#define STEP_CNT /;"	d	file:
burn_cpu	perf/clock-v2.c	/^void burn_cpu() {$/;"	f
core_mhz	perf/clock-v2.c	/^double core_mhz(int verbose) {$/;"	f
cpu_ghz	perf/clock-v2.c	/^double cpu_ghz = 0.0;$/;"	v
get_comp_counter	perf/clock-v2.c	/^double get_comp_counter()$/;"	f
get_counter	perf/clock-v2.c	/^double get_counter()$/;"	f
gverbose	perf/clock-v2.c	/^int gverbose = 1;$/;"	v
incr	perf/clock-v2.c	/^volatile int incr = 1;$/;"	v
last_time	perf/clock-v2.c	/^struct timespec last_time;$/;"	v	typeref:struct:timespec
mhz	perf/clock-v2.c	/^double mhz(int verbose) {$/;"	f
mhz_full	perf/clock-v2.c	/^double mhz_full(int verbose, int sleeptime) {$/;"	f
start_comp_counter	perf/clock-v2.c	/^void start_comp_counter()$/;"	f
start_counter	perf/clock-v2.c	/^void start_counter()$/;"	f
val	perf/clock-v2.c	/^volatile int val = 0;$/;"	v
NEVENT	perf/clock.c	/^#define NEVENT /;"	d	file:
RECORDTHRESH	perf/clock.c	/^#define RECORDTHRESH /;"	d	file:
THRESHOLD	perf/clock.c	/^#define THRESHOLD /;"	d	file:
access_counter	perf/clock.c	/^void access_counter(unsigned *hi, unsigned *lo)$/;"	f
callibrate	perf/clock.c	/^static void callibrate(int verbose)$/;"	f	file:
cyc_hi	perf/clock.c	/^static unsigned cyc_hi = 0;$/;"	v	file:
cyc_lo	perf/clock.c	/^static unsigned cyc_lo = 0;$/;"	v	file:
cyc_per_tick	perf/clock.c	/^static double cyc_per_tick = 0.0;$/;"	v	file:
get_comp_counter	perf/clock.c	/^double get_comp_counter() $/;"	f
get_counter	perf/clock.c	/^double get_counter()$/;"	f
mhz	perf/clock.c	/^double mhz(int verbose)$/;"	f
mhz_full	perf/clock.c	/^double mhz_full(int verbose, int sleeptime)$/;"	f
ovhd	perf/clock.c	/^double ovhd()$/;"	f
start_comp_counter	perf/clock.c	/^void start_comp_counter() $/;"	f
start_counter	perf/clock.c	/^void start_counter()$/;"	f
start_tick	perf/clock.c	/^static clock_t start_tick = 0;$/;"	v	file:
access_counter	perf/clock.s	/^access_counter:$/;"	l
callibrate	perf/clock.s	/^callibrate:$/;"	l
cyc_hi	perf/clock.s	/^cyc_hi:$/;"	l
cyc_lo	perf/clock.s	/^cyc_lo:$/;"	l
cyc_per_tick	perf/clock.s	/^cyc_per_tick:$/;"	l
get_comp_counter	perf/clock.s	/^get_comp_counter:$/;"	l
get_counter	perf/clock.s	/^get_counter:$/;"	l
mhz	perf/clock.s	/^mhz:$/;"	l
mhz_full	perf/clock.s	/^mhz_full:$/;"	l
ovhd	perf/clock.s	/^ovhd:$/;"	l
start_comp_counter	perf/clock.s	/^start_comp_counter:$/;"	l
start_counter	perf/clock.s	/^start_counter:$/;"	l
start_tick	perf/clock.s	/^start_tick:$/;"	l
CSIZE	perf/load.c	/^#define CSIZE /;"	d	file:
CSTRIDE	perf/load.c	/^#define CSTRIDE /;"	d	file:
MSIZE	perf/load.c	/^#define MSIZE /;"	d	file:
MSTRIDE	perf/load.c	/^#define MSTRIDE /;"	d	file:
PLIMIT	perf/load.c	/^#define PLIMIT /;"	d	file:
add_load	perf/load.c	/^void add_load(int count, load_t load_type) {$/;"	f
cache_run	perf/load.c	/^static void cache_run()$/;"	f	file:
child_count	perf/load.c	/^static int child_count = 0;$/;"	v	file:
child_id	perf/load.c	/^static pid_t child_id[PLIMIT];$/;"	v	file:
cpu_run	perf/load.c	/^static void cpu_run()$/;"	f	file:
kill_loads	perf/load.c	/^void kill_loads() {$/;"	f
mem_run	perf/load.c	/^static void mem_run()$/;"	f	file:
sink	perf/load.c	/^static int sink;$/;"	v	file:
CACHE_LOAD	perf/load.h	/^typedef enum {CPU_LOAD, CACHE_LOAD, MEM_LOAD} load_t;$/;"	e	enum:__anon43
CPU_LOAD	perf/load.h	/^typedef enum {CPU_LOAD, CACHE_LOAD, MEM_LOAD} load_t;$/;"	e	enum:__anon43
MEM_LOAD	perf/load.h	/^typedef enum {CPU_LOAD, CACHE_LOAD, MEM_LOAD} load_t;$/;"	e	enum:__anon43
load_t	perf/load.h	/^typedef enum {CPU_LOAD, CACHE_LOAD, MEM_LOAD} load_t;$/;"	t	typeref:enum:__anon43
DOUBLE_OPTION	perf/options.c	/^typedef enum {INT_OPTION, DOUBLE_OPTION, STRING_OPTION} option_t;$/;"	e	enum:__anon44	file:
INT_OPTION	perf/options.c	/^typedef enum {INT_OPTION, DOUBLE_OPTION, STRING_OPTION} option_t;$/;"	e	enum:__anon44	file:
MAX_OPTION	perf/options.c	/^#define MAX_OPTION /;"	d	file:
STRING_OPTION	perf/options.c	/^typedef enum {INT_OPTION, DOUBLE_OPTION, STRING_OPTION} option_t;$/;"	e	enum:__anon44	file:
add_double_option	perf/options.c	/^void add_double_option(char *name, double *var)$/;"	f
add_int_option	perf/options.c	/^void add_int_option(char *name, int *var)$/;"	f
add_string_option	perf/options.c	/^void add_string_option(char *name, char **var)$/;"	f
d	perf/options.c	/^    double *d;$/;"	m	union:__anon45::__anon46	file:
find_option	perf/options.c	/^static int find_option(char *prog, char *name)$/;"	f	file:
i	perf/options.c	/^    int *i;$/;"	m	union:__anon45::__anon46	file:
match_length	perf/options.c	/^static int match_length(char *s, char *t)$/;"	f	file:
name	perf/options.c	/^  char *name;$/;"	m	struct:__anon45	file:
option_count	perf/options.c	/^static int option_count = 0;$/;"	v	file:
option_entry	perf/options.c	/^} option_entry;$/;"	t	typeref:struct:__anon45	file:
option_t	perf/options.c	/^typedef enum {INT_OPTION, DOUBLE_OPTION, STRING_OPTION} option_t;$/;"	t	typeref:enum:__anon44	file:
options	perf/options.c	/^static option_entry options[MAX_OPTION];$/;"	v	file:
parse_option_file	perf/options.c	/^void parse_option_file(char *prog, FILE *option_file)$/;"	f
parse_options	perf/options.c	/^int parse_options(int argc, char *argv[], char *otherargs[])$/;"	f
s	perf/options.c	/^    char **s;$/;"	m	union:__anon45::__anon46	file:
show_options	perf/options.c	/^void show_options(FILE *outfile)$/;"	f
strsave	perf/options.c	/^static char *strsave(char *s)$/;"	f	file:
type	perf/options.c	/^  option_t type;$/;"	m	struct:__anon45	file:
usage	perf/options.c	/^void usage(char *prog)$/;"	f
valp	perf/options.c	/^  } valp;$/;"	m	struct:__anon45	typeref:union:__anon45::__anon46	file:
MAXEVENT	perf/osevent.c	/^#define MAXEVENT /;"	d	file:
Mhz	perf/osevent.c	/^static double Mhz = 0.0;$/;"	v	file:
NMAX	perf/osevent.c	/^#define NMAX(/;"	d	file:
NMIN	perf/osevent.c	/^#define NMIN(/;"	d	file:
acquire	perf/osevent.c	/^void acquire(int nevent, int threshold)$/;"	f
cyc2ms	perf/osevent.c	/^double cyc2ms(double c)$/;"	f
main	perf/osevent.c	/^int main(int argc, char *argv[])$/;"	f
report	perf/osevent.c	/^void report(int nevent)$/;"	f
tactive	perf/osevent.c	/^double tactive(int i)$/;"	f
tend	perf/osevent.c	/^double tend[MAXEVENT];$/;"	v
tinactive	perf/osevent.c	/^double tinactive(int i)$/;"	f
tstart	perf/osevent.c	/^double tstart[MAXEVENT];$/;"	v
CC	src/Makefile	/^CC = gcc$/;"	m
CFLAGS	src/Makefile	/^CFLAGS = -O1 -Wall$/;"	m
F32	src/Makefile	/^F32 =-m32$/;"	m
F64	src/Makefile	/^F64 =-m64$/;"	m
INC	src/Makefile	/^INC = ..\/include$/;"	m
LIB	src/Makefile	/^LIB = ..\/lib$/;"	m
OBJS	src/Makefile	/^OBJS =  $(OBJS64)$/;"	m
OBJS32	src/Makefile	/^OBJS32 = clock32.o fcyc32.o csapp32.o lsquare32.o cpe32.o$/;"	m
OBJS64	src/Makefile	/^OBJS64 = clock64.o fcyc64.o csapp64.o lsquare64.o cpe64.o$/;"	m
CLKT	src/clock.c	/^#define CLKT /;"	d	file:
MAXBUF	src/clock.c	/^#define MAXBUF /;"	d	file:
USE_POSIX	src/clock.c	/^#define USE_POSIX /;"	d	file:
access_counter	src/clock.c	/^void access_counter(unsigned *hi, unsigned *lo)$/;"	f
core_mhz	src/clock.c	/^double core_mhz(int verbose) {$/;"	f
cpu_ghz	src/clock.c	/^double cpu_ghz = 0.0;$/;"	v
cyc_hi	src/clock.c	/^static unsigned cyc_hi = 0;$/;"	v	file:
cyc_lo	src/clock.c	/^static unsigned cyc_lo = 0;$/;"	v	file:
get_counter	src/clock.c	/^double get_counter()$/;"	f
gverbose	src/clock.c	/^int gverbose = 1;$/;"	v
last_time	src/clock.c	/^struct timespec last_time;$/;"	v	typeref:struct:timespec
mhz	src/clock.c	/^double mhz(int verbose) {$/;"	f
start_counter	src/clock.c	/^void start_counter()$/;"	f
LIM	src/cpe.c	/^#define LIM /;"	d	file:
MAXCNT	src/cpe.c	/^#define MAXCNT /;"	d	file:
SEED	src/cpe.c	/^#define SEED /;"	d	file:
UNROLL	src/cpe.c	/^#define UNROLL /;"	d	file:
find_cpe	src/cpe.c	/^double find_cpe(elem_fun_t f, long int maxcnt)$/;"	f
find_cpe_full	src/cpe.c	/^double find_cpe_full(elem_fun_t f, long int maxcnt, long int samples, FILE *data_file,$/;"	f
get_cnt	src/cpe.c	/^static long int get_cnt(long int index, long int samples,$/;"	f	file:
measure_function	src/cpe.c	/^double measure_function(elem_fun_t f, long int cnt)$/;"	f
Accept	src/csapp.c	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen) $/;"	f
Alarm	src/csapp.c	/^unsigned int Alarm(unsigned int seconds) {$/;"	f
Bind	src/csapp.c	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen) $/;"	f
Calloc	src/csapp.c	/^void *Calloc(size_t nmemb, size_t size) $/;"	f
Close	src/csapp.c	/^void Close(int fd) $/;"	f
Closedir	src/csapp.c	/^int Closedir(DIR *dirp) $/;"	f
Connect	src/csapp.c	/^void Connect(int sockfd, struct sockaddr *serv_addr, int addrlen) $/;"	f
Dup2	src/csapp.c	/^int Dup2(int fd1, int fd2) $/;"	f
Execve	src/csapp.c	/^void Execve(const char *filename, char *const argv[], char *const envp[]) $/;"	f
Fclose	src/csapp.c	/^void Fclose(FILE *fp) $/;"	f
Fdopen	src/csapp.c	/^FILE *Fdopen(int fd, const char *type) $/;"	f
Fgets	src/csapp.c	/^char *Fgets(char *ptr, int n, FILE *stream) $/;"	f
Fopen	src/csapp.c	/^FILE *Fopen(const char *filename, const char *mode) $/;"	f
Fork	src/csapp.c	/^pid_t Fork(void) $/;"	f
Fputs	src/csapp.c	/^void Fputs(const char *ptr, FILE *stream) $/;"	f
Fread	src/csapp.c	/^size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Free	src/csapp.c	/^void Free(void *ptr) $/;"	f
Freeaddrinfo	src/csapp.c	/^void Freeaddrinfo(struct addrinfo *res)$/;"	f
Fstat	src/csapp.c	/^void Fstat(int fd, struct stat *buf) $/;"	f
Fwrite	src/csapp.c	/^void Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Getaddrinfo	src/csapp.c	/^void Getaddrinfo(const char *node, const char *service, $/;"	f
Gethostbyaddr	src/csapp.c	/^struct hostent *Gethostbyaddr(const char *addr, int len, int type) $/;"	f
Gethostbyname	src/csapp.c	/^struct hostent *Gethostbyname(const char *name) $/;"	f
Getnameinfo	src/csapp.c	/^void Getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, $/;"	f
Getpgrp	src/csapp.c	/^pid_t Getpgrp(void) {$/;"	f
Inet_ntop	src/csapp.c	/^void Inet_ntop(int af, const void *src, char *dst, socklen_t size)$/;"	f
Inet_pton	src/csapp.c	/^void Inet_pton(int af, const char *src, void *dst) $/;"	f
Kill	src/csapp.c	/^void Kill(pid_t pid, int signum) $/;"	f
Listen	src/csapp.c	/^void Listen(int s, int backlog) $/;"	f
Lseek	src/csapp.c	/^off_t Lseek(int fildes, off_t offset, int whence) $/;"	f
Malloc	src/csapp.c	/^void *Malloc(size_t size) $/;"	f
Mmap	src/csapp.c	/^void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset) $/;"	f
Munmap	src/csapp.c	/^void Munmap(void *start, size_t length) $/;"	f
Open	src/csapp.c	/^int Open(const char *pathname, int flags, mode_t mode) $/;"	f
Open_clientfd	src/csapp.c	/^int Open_clientfd(char *hostname, char *port) $/;"	f
Open_listenfd	src/csapp.c	/^int Open_listenfd(char *port) $/;"	f
Opendir	src/csapp.c	/^DIR *Opendir(const char *name) $/;"	f
P	src/csapp.c	/^void P(sem_t *sem) $/;"	f
Pause	src/csapp.c	/^void Pause() $/;"	f
Pthread_cancel	src/csapp.c	/^void Pthread_cancel(pthread_t tid) {$/;"	f
Pthread_create	src/csapp.c	/^void Pthread_create(pthread_t *tidp, pthread_attr_t *attrp, $/;"	f
Pthread_detach	src/csapp.c	/^void Pthread_detach(pthread_t tid) {$/;"	f
Pthread_exit	src/csapp.c	/^void Pthread_exit(void *retval) {$/;"	f
Pthread_join	src/csapp.c	/^void Pthread_join(pthread_t tid, void **thread_return) {$/;"	f
Pthread_once	src/csapp.c	/^void Pthread_once(pthread_once_t *once_control, void (*init_function)()) {$/;"	f
Pthread_self	src/csapp.c	/^pthread_t Pthread_self(void) {$/;"	f
Read	src/csapp.c	/^ssize_t Read(int fd, void *buf, size_t count) $/;"	f
Readdir	src/csapp.c	/^struct dirent *Readdir(DIR *dirp)$/;"	f
Realloc	src/csapp.c	/^void *Realloc(void *ptr, size_t size) $/;"	f
Rio_readinitb	src/csapp.c	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f
Rio_readlineb	src/csapp.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
Rio_readn	src/csapp.c	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes) $/;"	f
Rio_readnb	src/csapp.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
Rio_writen	src/csapp.c	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
Select	src/csapp.c	/^int Select(int  n, fd_set *readfds, fd_set *writefds,$/;"	f
Sem_init	src/csapp.c	/^void Sem_init(sem_t *sem, int pshared, unsigned int value) $/;"	f
Setpgid	src/csapp.c	/^void Setpgid(pid_t pid, pid_t pgid) {$/;"	f
Setsockopt	src/csapp.c	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen) $/;"	f
Sigaddset	src/csapp.c	/^void Sigaddset(sigset_t *set, int signum)$/;"	f
Sigdelset	src/csapp.c	/^void Sigdelset(sigset_t *set, int signum)$/;"	f
Sigemptyset	src/csapp.c	/^void Sigemptyset(sigset_t *set)$/;"	f
Sigfillset	src/csapp.c	/^void Sigfillset(sigset_t *set)$/;"	f
Sigismember	src/csapp.c	/^int Sigismember(const sigset_t *set, int signum)$/;"	f
Signal	src/csapp.c	/^handler_t *Signal(int signum, handler_t *handler) $/;"	f
Sigprocmask	src/csapp.c	/^void Sigprocmask(int how, const sigset_t *set, sigset_t *oldset)$/;"	f
Sigsuspend	src/csapp.c	/^int Sigsuspend(const sigset_t *set)$/;"	f
Sio_error	src/csapp.c	/^void Sio_error(char s[])$/;"	f
Sio_putl	src/csapp.c	/^ssize_t Sio_putl(long v)$/;"	f
Sio_puts	src/csapp.c	/^ssize_t Sio_puts(char s[])$/;"	f
Sleep	src/csapp.c	/^unsigned int Sleep(unsigned int secs) $/;"	f
Socket	src/csapp.c	/^int Socket(int domain, int type, int protocol) $/;"	f
Stat	src/csapp.c	/^void Stat(const char *filename, struct stat *buf) $/;"	f
V	src/csapp.c	/^void V(sem_t *sem) $/;"	f
Wait	src/csapp.c	/^pid_t Wait(int *status) $/;"	f
Waitpid	src/csapp.c	/^pid_t Waitpid(pid_t pid, int *iptr, int options) $/;"	f
Write	src/csapp.c	/^ssize_t Write(int fd, const void *buf, size_t count) $/;"	f
app_error	src/csapp.c	/^void app_error(char *msg) \/* Application error *\/$/;"	f
dns_error	src/csapp.c	/^void dns_error(char *msg) \/* Obsolete gethostbyname error *\/$/;"	f
gai_error	src/csapp.c	/^void gai_error(int code, char *msg) \/* Getaddrinfo-style error *\/$/;"	f
open_clientfd	src/csapp.c	/^int open_clientfd(char *hostname, char *port) {$/;"	f
open_listenfd	src/csapp.c	/^int open_listenfd(char *port) $/;"	f
posix_error	src/csapp.c	/^void posix_error(int code, char *msg) \/* Posix-style error *\/$/;"	f
rio_read	src/csapp.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	file:
rio_readinitb	src/csapp.c	/^void rio_readinitb(rio_t *rp, int fd) $/;"	f
rio_readlineb	src/csapp.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
rio_readn	src/csapp.c	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) $/;"	f
rio_readnb	src/csapp.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
rio_writen	src/csapp.c	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
sio_error	src/csapp.c	/^void sio_error(char s[]) \/* Put error message and exit *\/$/;"	f
sio_ltoa	src/csapp.c	/^static void sio_ltoa(long v, char s[], int b) $/;"	f	file:
sio_putl	src/csapp.c	/^ssize_t sio_putl(long v) \/* Put long *\/$/;"	f
sio_puts	src/csapp.c	/^ssize_t sio_puts(char s[]) \/* Put string *\/$/;"	f
sio_reverse	src/csapp.c	/^static void sio_reverse(char s[])$/;"	f	file:
sio_strlen	src/csapp.c	/^static size_t sio_strlen(char s[])$/;"	f	file:
unix_error	src/csapp.c	/^void unix_error(char *msg) \/* Unix-style error *\/$/;"	f
CACHE_BLOCK	src/fcyc.c	/^#define CACHE_BLOCK /;"	d	file:
CACHE_BYTES	src/fcyc.c	/^#define CACHE_BYTES /;"	d	file:
CLEAR_CACHE	src/fcyc.c	/^#define CLEAR_CACHE /;"	d	file:
COMPENSATE	src/fcyc.c	/^#define COMPENSATE /;"	d	file:
EPSILON	src/fcyc.c	/^#define EPSILON /;"	d	file:
K	src/fcyc.c	/^#define K /;"	d	file:
KEEP_SAMPLES	src/fcyc.c	/^#define KEEP_SAMPLES /;"	d	file:
KEEP_VALS	src/fcyc.c	/^#define KEEP_VALS /;"	d	file:
MAXSAMPLES	src/fcyc.c	/^#define MAXSAMPLES /;"	d	file:
add_sample	src/fcyc.c	/^static void add_sample(double val)$/;"	f	file:
cache_block	src/fcyc.c	/^static long int cache_block = CACHE_BLOCK;$/;"	v	file:
cache_buf	src/fcyc.c	/^static long int *cache_buf = NULL;$/;"	v	file:
cache_bytes	src/fcyc.c	/^static long int cache_bytes = CACHE_BYTES;$/;"	v	file:
clear	src/fcyc.c	/^static void clear()$/;"	f	file:
clear_cache	src/fcyc.c	/^static long int clear_cache = CLEAR_CACHE;$/;"	v	file:
compensate	src/fcyc.c	/^static long int compensate = COMPENSATE;$/;"	v	file:
epsilon	src/fcyc.c	/^static double epsilon = EPSILON;$/;"	v	file:
fcyc	src/fcyc.c	/^double fcyc(test_funct f, long int *params)$/;"	f
has_converged	src/fcyc.c	/^static long int has_converged()$/;"	f	file:
init_sampler	src/fcyc.c	/^static void init_sampler()$/;"	f	file:
kbest	src/fcyc.c	/^static long int kbest = K;$/;"	v	file:
maxsamples	src/fcyc.c	/^static long int maxsamples = MAXSAMPLES;$/;"	v	file:
samplecount	src/fcyc.c	/^static long int samplecount = 0;$/;"	v	file:
samples	src/fcyc.c	/^static double *samples = NULL;$/;"	v	file:
set_fcyc_cache_block	src/fcyc.c	/^void set_fcyc_cache_block(long int bytes) {$/;"	f
set_fcyc_cache_sizee	src/fcyc.c	/^void set_fcyc_cache_sizee(long int bytes)$/;"	f
set_fcyc_clear_cache	src/fcyc.c	/^void set_fcyc_clear_cache(long int clear)$/;"	f
set_fcyc_compensate	src/fcyc.c	/^void set_fcyc_compensate(long int compensate_arg)$/;"	f
set_fcyc_epsilon	src/fcyc.c	/^void set_fcyc_epsilon(double epsilon_arg)$/;"	f
set_fcyc_k	src/fcyc.c	/^void set_fcyc_k(long int k)$/;"	f
set_fcyc_maxsamples	src/fcyc.c	/^void set_fcyc_maxsamples(long int maxsamples_arg)$/;"	f
sink	src/fcyc.c	/^static volatile long int sink = 0;$/;"	v	file:
values	src/fcyc.c	/^static double *values = NULL;$/;"	v	file:
ls_error	src/lsquare.c	/^double ls_error(double *xval, double *yval, int cnt, ls_err_t etype)$/;"	f
ls_intercept	src/lsquare.c	/^double ls_intercept(double *xval, double *yval, int cnt)$/;"	f
ls_slope	src/lsquare.c	/^double ls_slope(double *xval, double *yval, int cnt)$/;"	f
ls_stat_t	src/lsquare.c	/^} ls_stat_t;$/;"	t	typeref:struct:__anon47	file:
ls_stats	src/lsquare.c	/^static void ls_stats(double *xval, double *yval, int cnt, ls_stat_t *statp)$/;"	f	file:
rel_err	src/lsquare.c	/^static double rel_err(double x, double y, double slope, double intercept)$/;"	f	file:
sum_x	src/lsquare.c	/^    double sum_x;$/;"	m	struct:__anon47	file:
sum_xx	src/lsquare.c	/^    double sum_xx;$/;"	m	struct:__anon47	file:
sum_xy	src/lsquare.c	/^    double sum_xy;$/;"	m	struct:__anon47	file:
sum_y	src/lsquare.c	/^    double sum_y;$/;"	m	struct:__anon47	file:
CC	vm/Makefile	/^CC = gcc$/;"	m
CFLAGS	vm/Makefile	/^CFLAGS = -Wall -g -Og -I $(CSAPP_INC) -I .$/;"	m
CSAPP_INC	vm/Makefile	/^CSAPP_INC = ..\/include$/;"	m
CSAPP_SRC	vm/Makefile	/^CSAPP_SRC = ..\/src$/;"	m
LDLIBS	vm/Makefile	/^LDLIBS = -lpthread$/;"	m
PROGS	vm/Makefile	/^PROGS = fragments.o\\$/;"	m
main	vm/dynamicsize.c	/^int main() $/;"	f
binheapDelete	vm/fragments.c	/^int *binheapDelete(int **binheap, int *size)$/;"	f
bufoverflow	vm/fragments.c	/^void bufoverflow() $/;"	f
garbage	vm/fragments.c	/^void garbage() $/;"	f
heapify	vm/fragments.c	/^void heapify(int **binheap, int size, int pos)$/;"	f
heapref	vm/fragments.c	/^int *heapref(int n, int m) $/;"	f
leak	vm/fragments.c	/^void leak(int n) $/;"	f
makeArray1	vm/fragments.c	/^int **makeArray1(int n, int m) $/;"	f
makeArray2	vm/fragments.c	/^int **makeArray2(int n, int m) $/;"	f
matvec	vm/fragments.c	/^int *matvec(int **A, int *x, int n) $/;"	f
misc	vm/fragments.c	/^void misc() $/;"	f
search	vm/fragments.c	/^int *search(int *p, int val) $/;"	f
stackref	vm/fragments.c	/^int *stackref () $/;"	f
32BIT	vm/malloc/Makefile	/^32BIT =   $/;"	m
CC	vm/malloc/Makefile	/^CC = gcc$/;"	m
CFLAGS	vm/malloc/Makefile	/^CFLAGS = -Wall -Wno-unused-result -O2 -I $(CSAPP_INC) -I . -DDRIVER $(32BIT)$/;"	m
CSAPP_INC	vm/malloc/Makefile	/^CSAPP_INC = ..\/..\/include$/;"	m
CSAPP_SRC	vm/malloc/Makefile	/^CSAPP_SRC = ..\/..\/src$/;"	m
OBJS	vm/malloc/Makefile	/^OBJS = csapp.o mdriver.o mm.o memlib.o fsecs.o fcyc.o clock.o ftimer.o driverlib.o $/;"	m
NEVENT	vm/malloc/clock.c	/^#define NEVENT /;"	d	file:
RECORDTHRESH	vm/malloc/clock.c	/^#define RECORDTHRESH /;"	d	file:
THRESHOLD	vm/malloc/clock.c	/^#define THRESHOLD /;"	d	file:
access_counter	vm/malloc/clock.c	/^void access_counter(unsigned *hi, unsigned *lo)$/;"	f
callibrate	vm/malloc/clock.c	/^static void callibrate(int verbose)$/;"	f	file:
counter	vm/malloc/clock.c	/^static unsigned int (*counter)(void)= (void *)counterRoutine;$/;"	v	file:
counterRoutine	vm/malloc/clock.c	/^static unsigned int counterRoutine[] =$/;"	v	file:
cyc_hi	vm/malloc/clock.c	/^static unsigned cyc_hi = 0;$/;"	v	file:
cyc_lo	vm/malloc/clock.c	/^static unsigned cyc_lo = 0;$/;"	v	file:
cyc_per_tick	vm/malloc/clock.c	/^static double cyc_per_tick = 0.0;$/;"	v	file:
get_comp_counter	vm/malloc/clock.c	/^double get_comp_counter() $/;"	f
get_counter	vm/malloc/clock.c	/^double get_counter() $/;"	f
get_counter	vm/malloc/clock.c	/^double get_counter()$/;"	f
mhz	vm/malloc/clock.c	/^double mhz(int verbose)$/;"	f
mhz_full	vm/malloc/clock.c	/^double mhz_full(int verbose, int sleeptime)$/;"	f
ovhd	vm/malloc/clock.c	/^double ovhd()$/;"	f
start_comp_counter	vm/malloc/clock.c	/^void start_comp_counter() $/;"	f
start_counter	vm/malloc/clock.c	/^void start_counter()$/;"	f
start_tick	vm/malloc/clock.c	/^static clock_t start_tick = 0;$/;"	v	file:
ALIGNMENT	vm/malloc/config.h	/^#define ALIGNMENT /;"	d
COURSE	vm/malloc/config.h	/^#define COURSE /;"	d
DEFAULT_TRACEFILES	vm/malloc/config.h	/^#define DEFAULT_TRACEFILES /;"	d
LAB	vm/malloc/config.h	/^#define LAB /;"	d
MAX_HEAP	vm/malloc/config.h	/^#define MAX_HEAP /;"	d
MAX_SPACE	vm/malloc/config.h	/^#define MAX_SPACE /;"	d
MAX_SPEED	vm/malloc/config.h	/^#define MAX_SPEED /;"	d
SERVERHOST	vm/malloc/config.h	/^#define SERVERHOST /;"	d
SERVERPORT	vm/malloc/config.h	/^#define SERVERPORT /;"	d
TRACEDIR	vm/malloc/config.h	/^#define TRACEDIR /;"	d
USE_FCYC	vm/malloc/config.h	/^#define USE_FCYC /;"	d
USE_GETTOD	vm/malloc/config.h	/^#define USE_GETTOD /;"	d
USE_ITIMER	vm/malloc/config.h	/^#define USE_ITIMER /;"	d
UTIL_WEIGHT	vm/malloc/config.h	/^#define UTIL_WEIGHT /;"	d
__CONFIG_H_	vm/malloc/config.h	/^#define __CONFIG_H_$/;"	d
AUTOGRADE_TIMEOUT	vm/malloc/driverhdrs.h	/^#define AUTOGRADE_TIMEOUT /;"	d
COURSE_NAME	vm/malloc/driverhdrs.h	/^#define COURSE_NAME /;"	d
LAB	vm/malloc/driverhdrs.h	/^#define LAB /;"	d
SERVER_NAME	vm/malloc/driverhdrs.h	/^#define SERVER_NAME /;"	d
SERVER_PORT	vm/malloc/driverhdrs.h	/^#define SERVER_PORT /;"	d
SA	vm/malloc/driverlib.c	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr	file:
driver_post	vm/malloc/driverlib.c	/^int driver_post(char *userid, char *result, int autograded, char *status_msg) $/;"	f
init_driver	vm/malloc/driverlib.c	/^int init_driver(char *status_msg) $/;"	f
init_timeout	vm/malloc/driverlib.c	/^void init_timeout(int timeout) {$/;"	f
rio_read	vm/malloc/driverlib.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	file:
rio_readinitb	vm/malloc/driverlib.c	/^static void rio_readinitb(rio_t *rp, int fd) $/;"	f	file:
rio_readlineb	vm/malloc/driverlib.c	/^static ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f	file:
rio_writen	vm/malloc/driverlib.c	/^static ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f	file:
sigalrm_handler	vm/malloc/driverlib.c	/^void sigalrm_handler(int sig) {$/;"	f
submitr	vm/malloc/driverlib.c	/^int submitr(char *hostname,    \/* Server domain name *\/$/;"	f
urlencode	vm/malloc/driverlib.c	/^static int urlencode(unsigned char *src, unsigned char *dst)$/;"	f	file:
RIO_BUFSIZE	vm/malloc/driverlib.h	/^#define RIO_BUFSIZE /;"	d
SUBMITR_MAXBUF	vm/malloc/driverlib.h	/^#define SUBMITR_MAXBUF /;"	d
__DRIVERLIB_H__	vm/malloc/driverlib.h	/^#define __DRIVERLIB_H__$/;"	d
rio_buf	vm/malloc/driverlib.h	/^    char rio_buf[RIO_BUFSIZE]; \/* internal buffer *\/$/;"	m	struct:__anon48
rio_bufptr	vm/malloc/driverlib.h	/^    char *rio_bufptr;          \/* next unread byte in internal buf *\/$/;"	m	struct:__anon48
rio_cnt	vm/malloc/driverlib.h	/^    int rio_cnt;               \/* unread bytes in internal buf *\/$/;"	m	struct:__anon48
rio_fd	vm/malloc/driverlib.h	/^    int rio_fd;                \/* descriptor for this internal buf *\/$/;"	m	struct:__anon48
rio_t	vm/malloc/driverlib.h	/^} rio_t;$/;"	t	typeref:struct:__anon48
CACHE_BLOCK	vm/malloc/fcyc.c	/^#define CACHE_BLOCK /;"	d	file:
CACHE_BYTES	vm/malloc/fcyc.c	/^#define CACHE_BYTES /;"	d	file:
CLEAR_CACHE	vm/malloc/fcyc.c	/^#define CLEAR_CACHE /;"	d	file:
COMPENSATE	vm/malloc/fcyc.c	/^#define COMPENSATE /;"	d	file:
EPSILON	vm/malloc/fcyc.c	/^#define EPSILON /;"	d	file:
K	vm/malloc/fcyc.c	/^#define K /;"	d	file:
KEEP_SAMPLES	vm/malloc/fcyc.c	/^#define KEEP_SAMPLES /;"	d	file:
KEEP_VALS	vm/malloc/fcyc.c	/^#define KEEP_VALS /;"	d	file:
MAXSAMPLES	vm/malloc/fcyc.c	/^#define MAXSAMPLES /;"	d	file:
add_sample	vm/malloc/fcyc.c	/^static void add_sample(double val)$/;"	f	file:
cache_block	vm/malloc/fcyc.c	/^static int cache_block = CACHE_BLOCK;$/;"	v	file:
cache_buf	vm/malloc/fcyc.c	/^static int *cache_buf = NULL;$/;"	v	file:
cache_bytes	vm/malloc/fcyc.c	/^static int cache_bytes = CACHE_BYTES;$/;"	v	file:
clear	vm/malloc/fcyc.c	/^static void clear()$/;"	f	file:
clear_cache	vm/malloc/fcyc.c	/^static int clear_cache = CLEAR_CACHE;$/;"	v	file:
compensate	vm/malloc/fcyc.c	/^static int compensate = COMPENSATE;$/;"	v	file:
epsilon	vm/malloc/fcyc.c	/^static double epsilon = EPSILON;$/;"	v	file:
fcyc	vm/malloc/fcyc.c	/^double fcyc(test_funct f, void *argp)$/;"	f
has_converged	vm/malloc/fcyc.c	/^static int has_converged()$/;"	f	file:
init_sampler	vm/malloc/fcyc.c	/^static void init_sampler()$/;"	f	file:
kbest	vm/malloc/fcyc.c	/^static int kbest = K;$/;"	v	file:
maxsamples	vm/malloc/fcyc.c	/^static int maxsamples = MAXSAMPLES;$/;"	v	file:
samplecount	vm/malloc/fcyc.c	/^static int samplecount = 0;$/;"	v	file:
samples	vm/malloc/fcyc.c	/^static double *samples = NULL;$/;"	v	file:
set_fcyc_cache_block	vm/malloc/fcyc.c	/^void set_fcyc_cache_block(int bytes) {$/;"	f
set_fcyc_cache_size	vm/malloc/fcyc.c	/^void set_fcyc_cache_size(int bytes)$/;"	f
set_fcyc_clear_cache	vm/malloc/fcyc.c	/^void set_fcyc_clear_cache(int clear)$/;"	f
set_fcyc_compensate	vm/malloc/fcyc.c	/^void set_fcyc_compensate(int compensate_arg)$/;"	f
set_fcyc_epsilon	vm/malloc/fcyc.c	/^void set_fcyc_epsilon(double epsilon_arg)$/;"	f
set_fcyc_k	vm/malloc/fcyc.c	/^void set_fcyc_k(int k)$/;"	f
set_fcyc_maxsamples	vm/malloc/fcyc.c	/^void set_fcyc_maxsamples(int maxsamples_arg)$/;"	f
sink	vm/malloc/fcyc.c	/^static volatile int sink = 0;$/;"	v	file:
values	vm/malloc/fcyc.c	/^static double *values = NULL;$/;"	v	file:
test_funct	vm/malloc/fcyc.h	/^typedef void (*test_funct)(void *);$/;"	t
Mhz	vm/malloc/fsecs.c	/^static double Mhz;  \/* estimated CPU clock frequency *\/$/;"	v	file:
fsecs	vm/malloc/fsecs.c	/^double fsecs(fsecs_test_funct f, void *argp) $/;"	f
init_fsecs	vm/malloc/fsecs.c	/^void init_fsecs(void)$/;"	f
fsecs_test_funct	vm/malloc/fsecs.h	/^typedef void (*fsecs_test_funct)(void *);$/;"	t
MAX_ETIME	vm/malloc/ftimer.c	/^#define MAX_ETIME /;"	d	file:
first_p	vm/malloc/ftimer.c	/^static struct itimerval first_p; \/* prof time*\/$/;"	v	typeref:struct:itimerval	file:
first_r	vm/malloc/ftimer.c	/^static struct itimerval first_r; \/* real time *\/$/;"	v	typeref:struct:itimerval	file:
first_u	vm/malloc/ftimer.c	/^static struct itimerval first_u; \/* user time *\/$/;"	v	typeref:struct:itimerval	file:
ftimer_gettod	vm/malloc/ftimer.c	/^double ftimer_gettod(ftimer_test_funct f, void *argp, int n)$/;"	f
ftimer_itimer	vm/malloc/ftimer.c	/^double ftimer_itimer(ftimer_test_funct f, void *argp, int n)$/;"	f
get_etime	vm/malloc/ftimer.c	/^static double get_etime(void) {$/;"	f	file:
init_etime	vm/malloc/ftimer.c	/^static void init_etime(void)$/;"	f	file:
ftimer_test_funct	vm/malloc/ftimer.h	/^typedef void (*ftimer_test_funct)(void *); $/;"	t
ALLOC	vm/malloc/mdriver.c	/^    enum { ALLOC, FREE, REALLOC } type; \/* type of request *\/$/;"	e	enum:__anon49::__anon50	file:
DBG_CHEAP	vm/malloc/mdriver.c	/^static enum { DBG_NONE, DBG_CHEAP, DBG_EXPENSIVE } debug_mode = DBG_CHEAP;$/;"	e	enum:__anon54	file:
DBG_EXPENSIVE	vm/malloc/mdriver.c	/^static enum { DBG_NONE, DBG_CHEAP, DBG_EXPENSIVE } debug_mode = DBG_CHEAP;$/;"	e	enum:__anon54	file:
DBG_NONE	vm/malloc/mdriver.c	/^static enum { DBG_NONE, DBG_CHEAP, DBG_EXPENSIVE } debug_mode = DBG_CHEAP;$/;"	e	enum:__anon54	file:
FREE	vm/malloc/mdriver.c	/^    enum { ALLOC, FREE, REALLOC } type; \/* type of request *\/$/;"	e	enum:__anon49::__anon50	file:
HDRLINES	vm/malloc/mdriver.c	/^#define HDRLINES /;"	d	file:
IS_ALIGNED	vm/malloc/mdriver.c	/^#define IS_ALIGNED(/;"	d	file:
LINENUM	vm/malloc/mdriver.c	/^#define LINENUM(/;"	d	file:
MAXLINE	vm/malloc/mdriver.c	/^#define MAXLINE /;"	d	file:
RANDOM_DATA_LEN	vm/malloc/mdriver.c	/^#define RANDOM_DATA_LEN /;"	d	file:
REALLOC	vm/malloc/mdriver.c	/^    enum { ALLOC, FREE, REALLOC } type; \/* type of request *\/$/;"	e	enum:__anon49::__anon50	file:
__attribute__	vm/malloc/mdriver.c	/^#  define __attribute__(/;"	d	file:
add_range	vm/malloc/mdriver.c	/^static int add_range(range_t **ranges, char *lo, int size,$/;"	f	file:
app_error	vm/malloc/mdriver.c	/^void app_error(const char *fmt, ...) {$/;"	f
autoresult	vm/malloc/mdriver.c	/^char autoresult[SUBMITR_MAXBUF]; \/* autoresult string *\/$/;"	v
block_rand_base	vm/malloc/mdriver.c	/^    int *block_rand_base;\/* index into random_data, if debug is on *\/$/;"	m	struct:__anon51	file:
block_sizes	vm/malloc/mdriver.c	/^    size_t *block_sizes; \/* ... and a corresponding array of payload sizes *\/$/;"	m	struct:__anon51	file:
blocks	vm/malloc/mdriver.c	/^    char **blocks;       \/* array of ptrs returned by malloc\/realloc... *\/$/;"	m	struct:__anon51	file:
check_index	vm/malloc/mdriver.c	/^static void check_index(const trace_t *trace, int opnum, int index) {$/;"	f	file:
clear_ranges	vm/malloc/mdriver.c	/^static void clear_ranges(range_t **ranges)$/;"	f	file:
debug_mode	vm/malloc/mdriver.c	/^static enum { DBG_NONE, DBG_CHEAP, DBG_EXPENSIVE } debug_mode = DBG_CHEAP;$/;"	v	typeref:enum:__anon54	file:
default_tracefiles	vm/malloc/mdriver.c	/^static char *default_tracefiles[] = {$/;"	v	file:
errors	vm/malloc/mdriver.c	/^static int errors = 0;  \/* number of errs found when running student malloc *\/$/;"	v	file:
eval_libc_speed	vm/malloc/mdriver.c	/^static void eval_libc_speed(void *ptr)$/;"	f	file:
eval_libc_valid	vm/malloc/mdriver.c	/^static int eval_libc_valid(trace_t *trace)$/;"	f	file:
eval_mm_speed	vm/malloc/mdriver.c	/^static void eval_mm_speed(void *ptr)$/;"	f	file:
eval_mm_util	vm/malloc/mdriver.c	/^static double eval_mm_util(trace_t *trace, int tracenum)$/;"	f	file:
eval_mm_valid	vm/malloc/mdriver.c	/^static int eval_mm_valid(trace_t *trace, range_t **ranges)$/;"	f	file:
filename	vm/malloc/mdriver.c	/^    char filename[MAXLINE];$/;"	m	struct:__anon51	file:
filename	vm/malloc/mdriver.c	/^    char filename[MAXLINE];$/;"	m	struct:__anon53	file:
free_trace	vm/malloc/mdriver.c	/^static void free_trace(trace_t *trace)$/;"	f	file:
hi	vm/malloc/mdriver.c	/^    char *hi;              \/* high payload address *\/$/;"	m	struct:range_t	file:
ignore_ranges	vm/malloc/mdriver.c	/^    int ignore_ranges;   \/* don't check ranges (i.e. this is too big) *\/$/;"	m	struct:__anon51	file:
index	vm/malloc/mdriver.c	/^    int index;                        \/* index for free() to use later *\/$/;"	m	struct:__anon49	file:
index	vm/malloc/mdriver.c	/^    int index;             \/* same index as free; for debugging *\/$/;"	m	struct:range_t	file:
init_random_data	vm/malloc/mdriver.c	/^static void init_random_data(void) {$/;"	f	file:
lo	vm/malloc/mdriver.c	/^    char *lo;              \/* low payload address *\/$/;"	m	struct:range_t	file:
main	vm/malloc/mdriver.c	/^int main(int argc, char **argv)$/;"	f
malloc_error	vm/malloc/mdriver.c	/^void malloc_error(const trace_t *trace, int opnum, const char *fmt, ...)$/;"	f
next	vm/malloc/mdriver.c	/^    struct range_t *next;  \/* next list element *\/$/;"	m	struct:range_t	typeref:struct:range_t::range_t	file:
num_ids	vm/malloc/mdriver.c	/^    int num_ids;         \/* number of alloc\/realloc ids *\/$/;"	m	struct:__anon51	file:
num_ops	vm/malloc/mdriver.c	/^    int num_ops;         \/* number of distinct requests *\/$/;"	m	struct:__anon51	file:
onetime_flag	vm/malloc/mdriver.c	/^int onetime_flag = 0;$/;"	v
ops	vm/malloc/mdriver.c	/^    double ops;      \/* number of ops (malloc\/free\/realloc) in the trace *\/$/;"	m	struct:__anon53	file:
ops	vm/malloc/mdriver.c	/^    traceop_t *ops;      \/* array of requests *\/$/;"	m	struct:__anon51	file:
printresults	vm/malloc/mdriver.c	/^static void printresults(int n, stats_t *stats)$/;"	f	file:
randint_t	vm/malloc/mdriver.c	/^typedef unsigned char randint_t;$/;"	t	file:
randint_t_name	vm/malloc/mdriver.c	/^static const char randint_t_name[] = "byte";$/;"	v	file:
random_data	vm/malloc/mdriver.c	/^static randint_t random_data[RANDOM_DATA_LEN];$/;"	v	file:
randomize_block	vm/malloc/mdriver.c	/^static void randomize_block(trace_t *traces, int index) {$/;"	f	file:
range_t	vm/malloc/mdriver.c	/^typedef struct range_t {$/;"	s	file:
range_t	vm/malloc/mdriver.c	/^} range_t;$/;"	t	typeref:struct:range_t	file:
ranges	vm/malloc/mdriver.c	/^    range_t *ranges;$/;"	m	struct:__anon52	file:
read_trace	vm/malloc/mdriver.c	/^static trace_t *read_trace(stats_t *stats, const char *tracedir,$/;"	f	file:
reinit_trace	vm/malloc/mdriver.c	/^static void reinit_trace(trace_t *trace)$/;"	f	file:
remove_range	vm/malloc/mdriver.c	/^static void remove_range(range_t **ranges, char *lo)$/;"	f	file:
run_tests	vm/malloc/mdriver.c	/^static void run_tests(int num_tracefiles, const char *tracedir,$/;"	f	file:
secs	vm/malloc/mdriver.c	/^    double secs;     \/* number of secs needed to run the trace *\/$/;"	m	struct:__anon53	file:
set_timeout	vm/malloc/mdriver.c	/^static int set_timeout = 0;$/;"	v	file:
size	vm/malloc/mdriver.c	/^    size_t size;                      \/* byte size of alloc\/realloc request *\/$/;"	m	struct:__anon49	file:
speed_t	vm/malloc/mdriver.c	/^} speed_t;$/;"	t	typeref:struct:__anon52	file:
stats_t	vm/malloc/mdriver.c	/^} stats_t;$/;"	t	typeref:struct:__anon53	file:
status_msg	vm/malloc/mdriver.c	/^char status_msg[SUBMITR_MAXBUF]; \/* submitr status messages *\/$/;"	v
timeout_handler	vm/malloc/mdriver.c	/^static void timeout_handler(int sig __attribute__((unused))) {$/;"	f	file:
timeout_jmpbuf	vm/malloc/mdriver.c	/^static sigjmp_buf timeout_jmpbuf;$/;"	v	file:
trace	vm/malloc/mdriver.c	/^    trace_t *trace;$/;"	m	struct:__anon52	file:
trace_t	vm/malloc/mdriver.c	/^} trace_t;$/;"	t	typeref:struct:__anon51	file:
tracedir	vm/malloc/mdriver.c	/^static char tracedir[MAXLINE] = TRACEDIR;$/;"	v	file:
traceop_t	vm/malloc/mdriver.c	/^} traceop_t;$/;"	t	typeref:struct:__anon49	file:
type	vm/malloc/mdriver.c	/^    enum { ALLOC, FREE, REALLOC } type; \/* type of request *\/$/;"	m	struct:__anon49	typeref:enum:__anon49::__anon50	file:
unix_error	vm/malloc/mdriver.c	/^void unix_error(const char *fmt, ...) {$/;"	f
usage	vm/malloc/mdriver.c	/^static void usage(void)$/;"	f	file:
util	vm/malloc/mdriver.c	/^    double util;     \/* space utilization for this trace (always 0 for libc) *\/$/;"	m	struct:__anon53	file:
valid	vm/malloc/mdriver.c	/^    int valid;       \/* was the trace processed correctly by the allocator? *\/$/;"	m	struct:__anon53	file:
verbose	vm/malloc/mdriver.c	/^int verbose = 1;        \/* global flag for verbose output *\/$/;"	v
weight	vm/malloc/mdriver.c	/^    int weight;          \/* weight for this trace (unused) *\/$/;"	m	struct:__anon51	file:
weight	vm/malloc/mdriver.c	/^    int weight;$/;"	m	struct:__anon53	file:
MAX_HEAP	vm/malloc/memlib.c	/^#define MAX_HEAP /;"	d	file:
mem_brk	vm/malloc/memlib.c	/^static char *mem_brk;      \/* Points to last byte of heap plus 1 *\/$/;"	v	file:
mem_deinit	vm/malloc/memlib.c	/^void mem_deinit(void)$/;"	f
mem_heap	vm/malloc/memlib.c	/^static char *mem_heap;     \/* Points to first byte of heap *\/ $/;"	v	file:
mem_heap_hi	vm/malloc/memlib.c	/^void *mem_heap_hi()$/;"	f
mem_heap_lo	vm/malloc/memlib.c	/^void *mem_heap_lo()$/;"	f
mem_heapsize	vm/malloc/memlib.c	/^size_t mem_heapsize() $/;"	f
mem_init	vm/malloc/memlib.c	/^void mem_init(void)$/;"	f
mem_max_addr	vm/malloc/memlib.c	/^static char *mem_max_addr; \/* Max legal heap addr plus 1*\/ $/;"	v	file:
mem_pagesize	vm/malloc/memlib.c	/^size_t mem_pagesize()$/;"	f
mem_reset_brk	vm/malloc/memlib.c	/^void mem_reset_brk()$/;"	f
mem_sbrk	vm/malloc/memlib.c	/^void *mem_sbrk(int incr) $/;"	f
CHUNKSIZE	vm/malloc/mm.c	/^#define CHUNKSIZE /;"	d	file:
DSIZE	vm/malloc/mm.c	/^#define DSIZE /;"	d	file:
FTRP	vm/malloc/mm.c	/^#define FTRP(/;"	d	file:
GET	vm/malloc/mm.c	/^#define GET(/;"	d	file:
GET_ALLOC	vm/malloc/mm.c	/^#define GET_ALLOC(/;"	d	file:
GET_SIZE	vm/malloc/mm.c	/^#define GET_SIZE(/;"	d	file:
HDRP	vm/malloc/mm.c	/^#define HDRP(/;"	d	file:
MAX	vm/malloc/mm.c	/^#define MAX(/;"	d	file:
NEXT_BLKP	vm/malloc/mm.c	/^#define NEXT_BLKP(/;"	d	file:
NEXT_FITx	vm/malloc/mm.c	/^#define NEXT_FITx$/;"	d	file:
PACK	vm/malloc/mm.c	/^#define PACK(/;"	d	file:
PREV_BLKP	vm/malloc/mm.c	/^#define PREV_BLKP(/;"	d	file:
PUT	vm/malloc/mm.c	/^#define PUT(/;"	d	file:
WSIZE	vm/malloc/mm.c	/^#define WSIZE /;"	d	file:
checkblock	vm/malloc/mm.c	/^static void checkblock(void *bp) $/;"	f	file:
checkheap	vm/malloc/mm.c	/^void checkheap(int verbose) $/;"	f
coalesce	vm/malloc/mm.c	/^static void *coalesce(void *bp) $/;"	f	file:
extend_heap	vm/malloc/mm.c	/^static void *extend_heap(size_t words) $/;"	f	file:
find_fit	vm/malloc/mm.c	/^static void *find_fit(size_t asize)$/;"	f	file:
heap_listp	vm/malloc/mm.c	/^static char *heap_listp = 0;  \/* Pointer to first block *\/  $/;"	v	file:
mm_checkheap	vm/malloc/mm.c	/^void mm_checkheap(int verbose)  $/;"	f
mm_free	vm/malloc/mm.c	/^void mm_free(void *bp)$/;"	f
mm_init	vm/malloc/mm.c	/^int mm_init(void) $/;"	f
mm_malloc	vm/malloc/mm.c	/^void *mm_malloc(size_t size) $/;"	f
mm_realloc	vm/malloc/mm.c	/^void *mm_realloc(void *ptr, size_t size)$/;"	f
place	vm/malloc/mm.c	/^static void place(void *bp, size_t asize)$/;"	f	file:
printblock	vm/malloc/mm.c	/^static void printblock(void *bp) $/;"	f	file:
rover	vm/malloc/mm.c	/^static char *rover;           \/* Next fit rover *\/$/;"	v	file:
main	vm/mallocalign.c	/^int main() {$/;"	f
bssvar	vm/map.c	/^double bssvar = 10000.0;$/;"	v
datavar	vm/map.c	/^char datavar[4096];$/;"	v
main	vm/map.c	/^int main() $/;"	f
email1	vm/mm.h	/^    char *name1, *email1;$/;"	m	struct:__anon55
email2	vm/mm.h	/^    char *name2, *email2;$/;"	m	struct:__anon55
name1	vm/mm.h	/^    char *name1, *email1;$/;"	m	struct:__anon55
name2	vm/mm.h	/^    char *name2, *email2;$/;"	m	struct:__anon55
team	vm/mm.h	/^    char *team;$/;"	m	struct:__anon55
team_t	vm/mm.h	/^} team_t;$/;"	t	typeref:struct:__anon55
main	vm/mmapcopy.c	/^int main(int argc, char **argv) $/;"	f
mmapcopy	vm/mmapcopy.c	/^void mmapcopy(int fd, int size) $/;"	f
main	vm/sbrk.c	/^int main()$/;"	f
main	vm/sizeof.c	/^int main()$/;"	f
MAXN	vm/staticsize.c	/^#define MAXN /;"	d	file:
array	vm/staticsize.c	/^int array[MAXN];$/;"	v
main	vm/staticsize.c	/^int main() $/;"	f
